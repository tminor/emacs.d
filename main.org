
* Intro
:PROPERTIES:
:HASH:     b8ba4fcb8585e5f7ff230d41f1695cb2
:MODIFIED: 2019-03-08 14:50:47
:END:

I've used [[https://github.com/dieggsy/dotfiles/blob/master/emacs.d/init.org][this config]] as an inspiration for a lot of what follows.

Some conventions:
- Headlines with TODOs /should/ have some accompanying =;; TODO:=
  comments in code blocks that follow
- General is used for consistent and (somewhat) friendly key binding
- Some headings have subheadings titled "Elisp"; these sections
  contain Emacs Lisp code written by me or taken from someone on the
  internet
  - All of these /should/ have a =tm/= prefix; this is not an attempt
    at plagiarism (when stolen from the internet); it is, rather, an
    attempt at consistent namespacing for times when I use
    =describe-fuction= and the like to find
    functions/variables/etc. I've added over time

** Table of Contents                                                                                         :TOC:
:PROPERTIES:
:HASH:     78190e712a4139f467e8794cfecaaa76
:MODIFIED: 2019-03-08 15:50:50
:END:

- [[#intro][Intro]]
  - [[#large-config-changes][Large config changes]]
- [[#bootstrap][Bootstrap]]
  - [[#package-repositories][Package repositories]]
  - [[#use-package-bootstrap][Use-package bootstrap]]
  - [[#no-littering][No-littering]]
  - [[#load-path][Load path]]
- [[#make-emacs-friendlier][Make Emacs Friendlier]]
  - [[#key-bindings][Key bindings]]
  - [[#emacs-navigation][Emacs navigation]]
  - [[#interface-gui][Interface (GUI)]]
  - [[#helpinfo][Help/Info]]
  - [[#completion-ivycounselswiper][Completion (Ivy/Counsel/Swiper)]]
  - [[#themes][Themes]]
  - [[#config-management][Config management]]
  - [[#clipboard-management][Clipboard management]]
  - [[#cleaningtidying][Cleaning/tidying]]
- [[#prog-mode][Prog-mode]]
  - [[#language-modes][Language modes]]
  - [[#complete-any-mode][Complete any mode]]
  - [[#miscellany][Miscellany]]
  - [[#version-control][Version control]]
- [[#shell-and-term-modes][Shell and Term Modes]]
  - [[#term-mode][Term-mode]]
  - [[#eshell][Eshell]]
  - [[#sshgpg-keys][SSH/GPG keys]]
- [[#mail][Mail]]
  - [[#notmuch][Notmuch]]
  - [[#elisp][Elisp]]
- [[#org-mode][Org-mode]]
  - [[#org-mode-1][Org-mode]]
  - [[#org-agenda][Org-agenda]]
  - [[#org-capture][Org-capture]]
  - [[#blog-publishing][Blog Publishing]]
- [[#hydra][Hydra]]
  - [[#hydra-bootstrap][Hydra bootstrap]]
  - [[#window-management][Window management]]
  - [[#dired][Dired]]
  - [[#projectile][Projectile]]
  - [[#magit][Magit]]
  - [[#notmuch-1][Notmuch]]
  - [[#org-agenda-1][Org agenda]]
  - [[#multiple-cursors][Multiple-cursors]]
  - [[#menu-for-all-hydras][Menu for all hydras]]
- [[#other][Other]]
  - [[#kill-whitespace-when-saving][Kill whitespace when saving]]
  - [[#rainbow-mode][Rainbow Mode]]
  - [[#spell-check][Spell check]]
  - [[#file-type-modes-not-prog-mode-files][File type modes (not =prog-mode= files)]]

** TODO Large config changes
:PROPERTIES:
:HASH:     a809178df0a73cfec59f739a040c6354
:MODIFIED: 2019-03-08 15:48:05
:END:
:LOGBOOK:
- State "TODO"       from              [2019-03-06 Wed 10:55]
:END:

- I'd like to some day switch to =straight.el= for package management
  instead of =package.el=

* Bootstrap
:PROPERTIES:
:HASH:     8c2a0caf8fbd97dc266b5553bec99564
:MODIFIED: 2019-03-08 14:47:24
:END:

In this section, we:

- Make sure Emacs knows about repositories such as MELPA
- Bootstrap =use-package=
- And set up our =load-path=

** Package repositories
:PROPERTIES:
:HASH:     5f1c05eee66b46ec95b319e1032edc81
:MODIFIED: 2019-03-08 15:50:42
:END:

NOTE: For Windows, I needed GnuTLS DLLs. (Emacs for Windows isn't
built with TLS support.)  Instructions found [[http://חנוך.se/diary/how_to_enable_GnuTLS_for_Emacs_24_on_Windows/index.en.html][here]].

This snippet enables all necessary repositories on start up. Added
org ELPA to get all of the nice =org-contrib= packages that I may
someday want.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/") t)

  (add-to-list 'package-archives
               '("org" . "http://orgmode.org/elpa/") t)
#+END_SRC

** Use-package bootstrap
:PROPERTIES:
:HASH:     2283195e68aaec1226ce96d9982b8c3a
:MODIFIED: 2019-03-08 15:50:42
:END:

=use-package= provides consistent and sane package management and
configuration.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
#+END_SRC

** No-littering
:PROPERTIES:
:HASH:     c20149043a5c4b15e9866a1b9181053a
:MODIFIED: 2019-03-08 15:50:42
:END:

Keep files we don't manage from accumulating in =~/.emacs.d/=:

#+BEGIN_SRC emacs-lisp
  ;; Surely there's a better way...
  (use-package recentf)

  (use-package no-littering
    :ensure t
    :config
    (add-to-list 'recentf-exclude no-littering-var-directory)
    (add-to-list 'recentf-exclude no-littering-etc-directory)
    ;; One of the most common types of files that Emacs creates
    ;; automatically is auto-save files. By default, these appear in the
    ;; current directory of a visited file. No-littering does not change
    ;; this, but you can add the following code to your init.el file to
    ;; store these files in the var directory:
    (setq auto-save-file-name-transforms
          `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
    ;; Tell `custom' to save its state under ~/.emacs.d/etc/
    (setq custom-file (no-littering-expand-etc-file-name "custom.el"))
    ;; Put history file in ~/.emacs.d/var/
    (setq savehist-file (no-littering-expand-var-file-name "history")))
#+END_SRC

** Load path
:PROPERTIES:
:HASH:     d8e0bd6c649de49b656336b237438d72
:MODIFIED: 2019-03-08 15:50:42
:END:

*** Elisp
:PROPERTIES:
:HASH:     2962e4541e9a12c921dc2471bf7ee31b
:MODIFIED: 2019-03-08 15:50:42
:END:

Add non-package provided Elisp to Emacs's =load-path=:

#+BEGIN_SRC emacs-lisp
  (let ((default-directory "~/.emacs.d/lisp/"))
    (normal-top-level-add-subdirs-to-load-path))
#+END_SRC

*** Emacs's =$PATH=
:PROPERTIES:
:HASH:     8ff34d280287eac613e76429c2b7f79d
:MODIFIED: 2019-03-08 15:50:42
:END:

TODO: Find a better way for this.

Inform Emacs of executabels not otherwise found in =$PATH=:

#+BEGIN_SRC emacs-lisp
  (add-to-list 'exec-path "/home/tminor/.gem/ruby/bin/")
#+END_SRC

* Make Emacs Friendlier
:PROPERTIES:
:HASH:     2e091ba324c4ad4bb9d9a18c3357c6eb
:MODIFIED: 2019-03-08 15:48:05
:END:

** Key bindings
:PROPERTIES:
:HASH:     065b29dcb7f339c8b012d7309865c245
:MODIFIED: 2019-03-08 15:49:53
:END:

*** General.el
:PROPERTIES:
:HASH:     b6d5afa1789a85bfd13a014e18b3f170
:MODIFIED: 2019-03-08 15:49:53
:END:

Install [[https://github.com/noctuid/general.el#about][general.el]] for key bindings:

#+BEGIN_SRC emacs-lisp
  (use-package general
    :demand t
    :config
    (general-evil-setup t)
    (general-override-mode)
    (general-auto-unbind-keys)
    (general-create-definer tm/leader-def
      :states '(normal motion visual emacs insert)
      :keymaps '(local override)
      :prefix "SPC"
      :non-normal-prefix "M-SPC"
      :prefix-command 'tm/prefix-command
      :prefix-map 'tm/prefix-map))
#+END_SRC

*** Evil mode
:PROPERTIES:
:HASH:     bf5b8f82af947215d62b1c5988aead70
:MODIFIED: 2019-03-08 15:49:53
:END:

Install =evil= for =vi= style editing:

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :demand t
    :init
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))
#+END_SRC

**** =evil-collection=
:PROPERTIES:
:HASH:     2daa3a0ba1685c1c3498c9986cb0b715
:MODIFIED: 2019-03-08 15:50:42
:END:

#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :custom
    (evil-collection-company-use-tng nil)
    (evil-collection-setup-minibuffer t)
    (evil-collection-term-sync-state-and-mode-p t)
    :init
    (evil-collection-init))
#+END_SRC

*** Which-key
:PROPERTIES:
:HASH:     0d356961187545f6692afc99e55b044a
:MODIFIED: 2019-03-08 15:49:53
:END:

After pressing a prefix key and waiting a short time, [[https://github.com/justbur/emacs-which-key][which-key]]
provides a pop-up for possible completion candidates.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    ;; :general
    ;; (tm/leader-def
    ;;   :infix "k"
    ;;   :prefix-command 'tm/key-prefix-command
    ;;   :prefix-map 'tm/key-prefix-map
    ;;   "" '(:which-key "key? prefix" :ignore t)
    ;;   "t" 'which-key-show-top-level
    ;;   "m" 'which-key-show-major-mode)
    :config
    (which-key-mode))
#+END_SRC

** Emacs navigation
:PROPERTIES:
:HASH:     4779231949f3e304a921508cb6807dfa
:MODIFIED: 2019-03-08 15:49:53
:END:

Navigating in Emacs can be challenging. In this section, we'll make
changes that provide more sane methods for dealing with windows,
buffers, etc.

*** Buffer management
:PROPERTIES:
:HASH:     794c355ab7eb70de527342edfcb76025
:MODIFIED: 2019-03-08 15:50:42
:END:

=ibuffer= provides a menu for manipulating buffers.

#+BEGIN_SRC emacs-lisp
  (use-package ibuffer
    :ensure t
    :general
    (tm/leader-def
      "B" 'ibuffer)
    :config
    (autoload 'ibuffer "ibuffer" "List buffers." t))
#+END_SRC

*** Lines, cursors, marks, etc.
:PROPERTIES:
:HASH:     0c308dd41f3dd35f05947ea71ca2bee3
:MODIFIED: 2019-03-08 15:50:42
:END:

**** Cursor
:PROPERTIES:
:HASH:     4b690e00ed1d98a148161f5ac0768662
:MODIFIED: 2019-03-08 15:50:42
:END:

Highlight line containing cursor:

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode +1)
#+END_SRC

Multiple cursors for editing more than one line at the same time:

#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :general
    (tm/leader-def
      :infix "M"
      :prefix-command 'tm/multiple-cursor-prefix-command
      "" '(:which-key "multiple-cursors prefix" :ignore t)
      "c" 'mc/edit-lines
      ">" 'mc/mark-next-like-this
      "<" 'mc/mark-previous-like-this
      "C-<" 'mc/mark-all-like-this)
    :init
    (require 'multiple-cursors))
#+END_SRC

**** Indentation
:PROPERTIES:
:HASH:     a8b6f369e3c6b1e7065420a0c278841d
:MODIFIED: 2019-03-08 15:50:42
:END:

Install =highlight-indent-guides= for indentation indicators in
=prog-mode=:

#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
    (setq highlight-indent-guides-method 'column))
#+END_SRC

*** Window management
:PROPERTIES:
:HASH:     24ef076bad6be26be2c5115f0cd6099b
:MODIFIED: 2019-03-08 15:50:42
:END:

**** Undo/redo window layout changes
:PROPERTIES:
:HASH:     72c3a6fbd4e5d95ab71ef0ae754f386c
:MODIFIED: 2019-03-08 15:52:29
:END:

From =winner-mode= docstring:

#+BEGIN_QUOTE
Winner mode is a global minor mode that records the changes in
the window configuration (i.e. how the frames are partitioned
into windows) so that the changes can be "undone" using the
command ‘winner-undo’.  By default this one is bound to the key
sequence ‘C-c <left>’.  If you change your mind (while undoing),
you can press ‘C-c <right>’ (calling ‘winner-redo’).
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (use-package winner
    :ensure t
    :general
    (tm/leader-def
      :infix "w"
      :prefix-command 'tm/window-prefix-command
      :prefix-map 'tm/window-prefix-map
      "" '(:which-key "window prefix" :ignore t)
      "u" 'winner-undo
      "C-r" 'winner-redo)
    :config
    (winner-mode 1))
#+END_SRC

**** Workspace management
:PROPERTIES:
:HASH:     cba25789cada8a610dd31d4f8d0e4f59
:MODIFIED: 2019-03-08 15:50:42
:END:

Install =eyebrowse= for i3 style workspace management:

#+BEGIN_SRC emacs-lisp
  (use-package eyebrowse
    :ensure t
    :general
    (tm/leader-def
      :infix "e"
      :prefix-command 'tm/eyebrowse-prefix-command
      "" '(:ignore t :which-key "eyebrowse prefix")
      "s" 'eyebrowse-switch-to-window-config
      "l" 'eyebrowse-next-window-config
      "h" 'eyebrowse-prev-window-config
      "r" 'eyebrowse-rename-window-config
      "c" 'eyebrowse-close-window-config
      "'" 'eyebrowse-last-window-config
      "0" 'eyebrowse-switch-to-window-config-0
      "1" 'eyebrowse-switch-to-window-config-1
      "2" 'eyebrowse-switch-to-window-config-2
      "3" 'eyebrowse-switch-to-window-config-3
      "4" 'eyebrowse-switch-to-window-config-4
      "5" 'eyebrowse-switch-to-window-config-5
      "6" 'eyebrowse-switch-to-window-config-6
      "7" 'eyebrowse-switch-to-window-config-7
      "8" 'eyebrowse-switch-to-window-config-8
      "9" 'eyebrowse-switch-to-window-config-9)
    :init
    (setq eyebrowse-keymap-prefix "")
    (global-unset-key (kbd "C-c C-w"))
    :defer 1
    :config
    (setq eyebrowse-switch-back-and-forth t)
    (setq eyebrowse-wrap-around t)
    (setq eyebrowse-new-workspace t)
    (eyebrowse-mode))
#+END_SRC

**** Switching/deleting/etc. windows
:PROPERTIES:
:HASH:     c3e882b6b052391572f757338d9b389c
:MODIFIED: 2019-03-08 15:50:42
:END:

Install =ace-window= for more sane window management:

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (custom-set-faces '(aw-leading-char-face
                        ((t (:foreground "red" :height 3.0)))))
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    :general
    (tm/leader-def
      :infix "w"
      :prefix-command 'tm/window-prefix-command
      "" '(:which-key "window prefix" :ignore t )
      "m" 'ace-window
      "d" 'ace-delete-window
      "s" 'ace-swap-window))
#+END_SRC

Add normal Emacs window commands to leader key:

#+BEGIN_SRC emacs-lisp
  (tm/leader-def
    "1" 'delete-other-windows
    "2" 'split-window-below
    "3" 'split-window-right
    "0" 'delete-window)
#+END_SRC

*** File and project browsing
:PROPERTIES:
:HASH:     4bdf49d60fde8362d7a733aabd6edf7f
:MODIFIED: 2019-03-08 15:50:42
:END:

**** Projectile
:PROPERTIES:
:HASH:     31c061f99f03b03c19fc0b3e08222785
:MODIFIED: 2019-03-08 15:50:42
:END:

[[https://github.com/bbatsov/projectile][Project interaction via projectile]]:

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (use-package ripgrep
      :ensure t)
    (use-package projectile-ripgrep
      :ensure t)
    :config
    (projectile-mode +1)
    (setq projectile-completion-system 'ivy)
    :general
    (tm/leader-def
      "p" '(:keymap projectile-command-map
                    :package projectile
                    :which-key "projectile prefix")))
#+END_SRC

*** Scratch buffers
:PROPERTIES:
:HASH:     09fe545c7dece46196733ca6b6035958
:MODIFIED: 2019-03-08 15:50:42
:END:

#+BEGIN_SRC emacs-lisp
  (defun tm/new-empty-text-buffer ()
    "Create a new empty text buffer.

  URL `http://ergoemacs.org/emacs/emacs_new_empty_buffer.html'"
    (interactive)
    (let ((buf (generate-new-buffer "*scratch/text*")))
      (switch-to-buffer buf)
      (setq initial-major-mode 'text-mode)
      buf))

  (defun tm/new-empty-lisp-buffer ()
    "Create a new empty lisp buffer.

  URL `http://ergoemacs.org/emacs/emacs_new_empty_buffer.html'"
    (interactive)
    (let ((buf (generate-new-buffer "*scratch/lisp*")))
      (switch-to-buffer buf)
      (setq initial-major-mode 'lisp-mode)
      buf))
#+END_SRC

Bind scratch buffer functions:

#+BEGIN_SRC emacs-lisp
  (tm/leader-def
    :infix "S"
    :prefix-command 'tm/scratch-prefix-command
    :prefix-map 'tm/scratch-prefix-map
    "" '(:which-key "scratch prefix" :ignore t)
    "l" 'tm/new-empty-text-buffer
    "t" 'tm/new-empty-lisp-buffer)
#+END_SRC

*** Evaluating lisp
:PROPERTIES:
:HASH:     3c2a45b9bb449f71f6e6dbc05d66b27a
:MODIFIED: 2019-03-08 15:50:42
:END:

#+BEGIN_SRC emacs-lisp
  (tm/leader-def
    ":" 'eldoc-eval-expression)
#+END_SRC

** Interface (GUI)
:PROPERTIES:
:HASH:     6b801f9de511e52c14b77dca14401ea7
:MODIFIED: 2019-03-08 15:49:53
:END:

*** GUI elements (scrollbar, menu bars)
:PROPERTIES:
:HASH:     ec2c1286cc1164090a10a99fe10e1e2f
:MODIFIED: 2019-03-08 15:50:42
:END:

Disable the scroll bar by default:

#+BEGIN_SRC emacs-lisp
  (toggle-scroll-bar -1)
#+END_SRC

=toggle-scroll-bar= doesn't seem to work with new frames. Try this
instead:

#+BEGIN_SRC emacs-lisp
  (defun tm/disable-scroll-bars (frame)
    "Toggle scrollbar in FRAME."
    (modify-frame-parameters frame
                             '((vertical-scroll-bars . nil)
                               (horizontal-scroll-bars . nil))))

  (add-hook 'after-make-frame-functions 'tm/disable-scroll-bars)
#+END_SRC

When using macOS, I preferred Emacs to be maximized. I'm not sure what
effect this has elsewhere, but at least while using i3 it doesn't do
anything noticeable. From [[https://emacs.stackexchange.com/questions/2999/how-to-maximize-my-emacs-frame-on-start-up][here]]:

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

Hide tool bar and menu bar:

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
#+END_SRC

*** Startup
:PROPERTIES:
:HASH:     ff5dbf21a884a11c06cc48508e2ad7e9
:MODIFIED: 2019-03-08 15:50:42
:END:

Don't show the startup message:

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

*** Mode-line
:PROPERTIES:
:HASH:     52a1d1d7b01784ec42a7d597615fd768
:MODIFIED: 2019-03-08 15:50:42
:END:

Install [[https://github.com/seagle0128/doom-modeline][doom-modeline]] for fun things like nyancat in our modeline:

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init
    (use-package all-the-icons
      :demand t
      :init
      (unless (file-exists-p (cl-case window-system
                               (x (concat (or (getenv "XDG_DATA_HOME")
                                              (concat (getenv "HOME") "/.local/share"))
                                          "/fonts/"))
                               (mac (concat (getenv "HOME") "/Library/Fonts/"))
                               (ns (concat (getenv "HOME") "/Library/Fonts/"))))
        (all-the-icons-install-fonts t)))
    :config
    (setq doom-modeline-buffer-file-name-style 'truncate-all)
    (setq doom-modeline-enable-word-count t)
    (setq doom-modeline-icon t)
    (setq doom-modeline-height 45)
    :defer t
    :hook (after-init . doom-modeline-init))
#+END_SRC

** Help/Info
:PROPERTIES:
:HASH:     25f4193dfc2e9a1053260983bc06149c
:MODIFIED: 2019-03-08 15:49:53
:END:

Improved *help* buffers with [[https://github.com/Wilfred/helpful][helpful]]:

#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :ensure t
    :general
    (tm/leader-def
      :infix "h"
      :prefix-command 'tm/help-prefix-command
      :prefix-map 'tm/help-prefix-map
      "" '(:which-key "help prefix" :ignore t)
      "s" 'helpful-symbol
      "k" 'helpful-key))
#+END_SRC

Add [[https://github.com/emacsmirror/emacswiki.org/blob/master/info%2b.el][Info+]] later.

** Completion (Ivy/Counsel/Swiper)
:PROPERTIES:
:HASH:     462d979fad322d8e15bbea7128e48134
:MODIFIED: 2019-03-08 15:49:53
:END:

Install [[https://github.com/abo-abo/swiper][Ivy, Counsel, and Swiper]] for completion and other fun.

*** Ivy
:PROPERTIES:
:HASH:     d276b0a0254781f2bdad5f0783f438e2
:MODIFIED: 2019-03-08 15:50:42
:END:

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t
          ivy-count-format "%d/%d ")
    :general
    (ivy-minibuffer-map
     "M-j" 'ivy-next-line
     "M-k" 'ivy-previous-line)
    (tm/leader-def
      "b" 'ivy-switch-buffer))
#+END_SRC

*** Counsel
:PROPERTIES:
:HASH:     d93bc85b11f31cd6a0c31c141931de45
:MODIFIED: 2019-03-08 15:50:42
:END:

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :general
    ("M-x" 'counsel-M-x
     "C-x C-f" 'counsel-find-file)
    (imap minibuffer-local-command
      "C-r" 'counsel-minibuffer-history)
    (tm/leader-def
      "x" 'counsel-M-x
      "y" 'counsel-yank-pop)
    (tm/leader-def
      :infix "f"
      :prefix-command 'tm/find-prefix-command
      "" '(:which-key "find prefix" :ignore t)
      "f" 'counsel-find-file
      "F" 'find-file-other-window
      "j" 'counsel-file-jump
      "l" 'counsel-locate)
    (tm/leader-def
      :infix "h"
      :prefix-command 'tm/help-prefix-command
      "" '(:which-key "help prefix" :ignore t)
      "F" 'counsel-describe-face
      "b" 'counsel-descbinds
      "f" 'counsel-describe-function
      "v" 'counsel-describe-variable)
    (tm/leader-def
      :infix "s"
      :prefix-command 'tm/search-prefix-command
      "" '(:which-key "search prefix" :ignore t)
      "r" 'counsel-rg
      "s" 'counsel-grep-or-swiper)
    :custom
    (counsel-find-file-ignore-regexp "\\`\\.")
    (counsel-yank-pop-preselect-last t)
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :config
    (when (eq system-type 'darwin)
      (setq counsel-locate-cmd 'counsel-locate-cmd-mdfind))

    (setq conusel-org-goto-display-style 'path
          counsel-org-headline-path-separator ": "
          counsel-org-goto-face-style 'org
          counsel-org-headline-display-todo t
          counsel-grep-base-command "rg -Sz -M 120 --no-heading --line-number --color never %s %s"
          counsel-rg-base-command "rg -Sz -M 120 --no-heading --line-number --color never %s ."
          counsel-yank-pop-separator "\n─────────────────────────\n"
          counsel-find-file-ignore-regexp (rx (or (group string-start (char ".#"))
                                                  (group (char "~#") string-end)
                                                  (group ".elc" string-end)
                                                  (group ".pyc" string-end)
                                                  (group ".import.scm" string-end)
                                                  (group ".so" string-end))))
    (counsel-mode 1)
    (defalias 'locate #'counsel-locate)

    (ivy-add-actions
     'counsel-find-file
     '(("e"
        (lambda (f)
          (let ((default-directory (if (file-directory-p f)
                                       f
                                     (file-name-directory f))))
            (d/eshell-here)))
        "eshell"))))
#+END_SRC

*** Swiper
:PROPERTIES:
:HASH:     d6ec3ce4b8a91c015cd53d5a595dbb51
:MODIFIED: 2019-03-08 15:50:42
:END:

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t)
#+END_SRC

*** All-the-icons for Ivy/Counsel
:PROPERTIES:
:HASH:     e33487f664134465d68b0d0413ed790c
:MODIFIED: 2019-03-08 15:50:42
:END:

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-ivy
    :ensure t
    :config
    (all-the-icons-ivy-setup))
#+END_SRC
** Themes
:PROPERTIES:
:HASH:     b4330a2e436a94dcb44cba42c997b3d9
:MODIFIED: 2019-03-08 15:49:53
:END:

=cherry-blossom-theme= is my preferred theme. I hope to adapt
[[https://github.com/hlissner/emacs-doom-themes][emacs-doom-themes]] to increase its coverage of different modes.

#+BEGIN_SRC emacs-lisp
  (use-package cherry-blossom-theme
    :ensure t)
#+END_SRC

** Config management
:PROPERTIES:
:HASH:     32b63b2323fd8b58c94b305cbc3a398a
:MODIFIED: 2019-03-08 15:49:53
:END:

*** Try packages temporarily
:PROPERTIES:
:HASH:     b0b442a2592a27d734b3f2a5a09f3db3
:MODIFIED: 2019-03-08 15:50:42
:END:

Enables temporarily downloading and installing packages for the
purpose of test driving. I discovered it [[http://cestlaz.github.io/posts/using-emacs-1-setup/#.Wb03a44pCfU][here]].

#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
#+END_SRC

*** Testing/reloading init.el
:PROPERTIES:
:HASH:     ab2d550a0a4833e697f7e5ff58bfb173
:MODIFIED: 2019-03-08 15:50:42
:END:

Test init.el file to make sure it's fine:

#+BEGIN_SRC emacs-lisp
  (defun tm/test-emacs (init-file)
    "Evaluate INIT-FILE. Return buffer with errors if any are found.

  With a prefix argument, assume INIT-FILE is `~/.emacs.d/init.el'."
    (interactive (if current-prefix-arg
                     (list "~/.emacs.d/init.el")
                   (list (expand-file-name (read-file-name "Init file: ")))))
    (require 'async)
    (let ((command (format
                    "emacs --batch --eval \"
  (condition-case e
      (progn
        (load \\\"%s\\\")
        (message \\\"-OK-\\\"))
    (error
     (message \\\"ERROR!\\\")
     (signal (car e) (cdr e))))\"" init-file)))
      (async-start
       `(lambda () (shell-command-to-string ,command))
       `(lambda (output)
          (if (string-match "-OK-" output)
              (when ,(called-interactively-p 'any)
                (message "All is well"))
            (switch-to-buffer-other-window "*startup error*")
            (delete-region (point-min) (point-max))
            (insert output)
            (search-backward "ERROR!"))))))
#+END_SRC

Reload init file:

#+BEGIN_SRC emacs-lisp
  (defun tm/reload-init ()
    "Reload init.el."
    (interactive)
    (load-file "/home/tminor/.emacs.d/init.el"))


#+END_SRC

Bind them to some keys:

#+BEGIN_SRC emacs-lisp
  (tm/leader-def
    :infix "c"
    :prefix-command 'tm/config-prefix-command
    :prefix-map 'tm/config-prefix-map
    "" '(:which-key "init.el prefix")
    "t" 'reload-init
    "r" 'tm/test-emacs)
#+END_SRC

** Clipboard management
:PROPERTIES:
:HASH:     8d2040c3bbf4284bdf8e68e5edb46a11
:MODIFIED: 2019-03-08 15:49:53
:END:

*** Clipboard monitoring
:PROPERTIES:
:HASH:     9e744d419cbd8c5bf8e6386d9ba4eacf
:MODIFIED: 2019-03-08 15:50:42
:END:

Sync contents of X clipboard to kill ring:

#+BEGIN_SRC emacs-lisp
  (use-package clipmon
    :ensure t
    :config
    (add-to-list 'after-init-hook 'clipmon-mode-start)
    (add-to-list 'after-init-hook 'clipmon-persist)
    (setq kill-ring-max 500)
    ;; Remove sensitive info from kill-ring
    ;;
    ;; TODO: Read from file instead of hard coding
    (setq clipmon-transform-remove
          (with-temp-buffer
            (insert-file-contents "~/.emacs.d/etc/clipmon-ignore")
            (buffer-string))))
#+END_SRC

Ensure =kill-ring= is saved between sessions:

#+BEGIN_SRC emacs-lisp
  (use-package savehist
    :after 'no-littering
    :config
    (savehist-mode 1)
    (add-to-list 'savehist-additional-variables 'kill-ring))
#+END_SRC

** Cleaning/tidying
:PROPERTIES:
:HASH:     8ab3300d36591b24686a3e77931385cc
:MODIFIED: 2019-03-08 15:49:53
:END:

*** Buffer cleanup
:PROPERTIES:
:HASH:     2aeb1a3735fef65d10031f8e98363e2b
:MODIFIED: 2019-03-08 15:50:42
:END:

Clean up matching buffers at midnight:

#+BEGIN_SRC emacs-lisp
  (use-package midnight
    :config
    ;; TODO: Decide what needs cleaning and define here
    (setq clean-buffer-list-delay-general 2
          clean-buffer-list-kill-regexps '("\\`\\*Man "
                                           "\\`\\*helpful "
                                           "\\`\\*notmuch-"
                                           "\\`\\magit"))
    (midnight-mode))
#+END_SRC

* Prog-mode
:PROPERTIES:
:HASH:     90d4d36e3c0c9c492cefe319acf21374
:MODIFIED: 2019-03-08 15:48:05
:END:

** Language modes
:PROPERTIES:
:HASH:     02c483ea42588716a19c373a00cdf8dd
:MODIFIED: 2019-03-08 15:50:42
:END:

Syntax highlighting, etc.

*** PowerShell
:PROPERTIES:
:HASH:     06e799d1b44528cf268722d08a462f98
:MODIFIED: 2019-03-08 15:50:42
:END:

Powershell syntax highlighting:

#+BEGIN_SRC emacs-lisp
  (use-package powershell
    :ensure t)
#+END_SRC

*** =puppet-mode=
:PROPERTIES:
:HASH:     c318f2482acecb006135dd825c33d843
:MODIFIED: 2019-03-08 15:50:42
:END:

Syntax highlighting for Puppet:

#+BEGIN_SRC emacs-lisp
  (use-package puppet-mode
    :ensure t
    :config
    (setq puppet-indent-level 4))
#+END_SRC

*** MarkDown
:PROPERTIES:
:HASH:     c59479b2eb922391a0bc1e36bcdd17ed
:MODIFIED: 2019-03-08 15:50:42
:END:

MarkDown syntax highlighting:

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t)
#+END_SRC

*** Fish Mode
:PROPERTIES:
:HASH:     7e5da05ff0ed4e3a84b85619de447a02
:MODIFIED: 2019-03-08 15:50:42
:END:

Sometimes fish one liners become long enough to deserve writing a
script! Fish syntax highlighting:

#+BEGIN_SRC emacs-lisp
  (use-package fish-mode
    :ensure t)
#+END_SRC

*** TODO Ruby
:PROPERTIES:
:HASH:     bfcf9d454fbe973e86a132b62a43b84b
:MODIFIED: 2019-03-08 15:50:42
:END:
:LOGBOOK:
- State "TODO"       from              [2019-03-04 Mon 16:51]
:END:

#+BEGIN_SRC emacs-lisp
  (use-package ruby-mode
    :ensure t
    :config
    (setq ruby-indent-level 4))
#+END_SRC

I've had some trouble with this package; mostly because I don't
understand Gemfiles and such. It would probably be worth figuring out
how to make it work. And once that's done, more configuration.

#+BEGIN_QUOTE
Robe is a code assistance tool that uses a Ruby REPL subprocess with
your application or gem code loaded, to provide information about
loaded classes and modules, and where each method is defined.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (use-package robe
    :ensure t
    :config
    (add-hook 'ruby-mode-hook 'robe-mode)
    (eval-after-load 'company
    '(push 'company-robe company-backends)))
#+END_SRC

*** TODO Lisp
:PROPERTIES:
:HASH:     9cecee71e81dfd807eeb8e853fde7a64
:MODIFIED: 2019-03-08 15:50:42
:END:
:LOGBOOK:
- State "TODO"       from              [2019-03-06 Wed 08:45]
:END:

[[http://sachachua.com/blog/2015/04/2015-04-08-emacs-lisp-development-tips-with-john-wiegley/][Notes]] from Sacha Chua and John Wiegly youtube video.

=evil-mode= alternative to paredit:

#+BEGIN_SRC emacs-lisp
  (use-package lispy
      :ensure t
      :init
      (add-hook 'emacs-lisp-mode-hook #'lispy-mode)
      (add-hook 'lisp-mode-hook #'lispy-mode))

#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package lispyville
    :ensure t
    :init
    (with-eval-after-load 'lispyville
      (lispyville-set-key-theme
       '(slurp/barf-cp
         mark-toggle)))
    (add-hook 'emacs-lisp-mode-hook #'lispyville-mode)
    (add-hook 'emacs-lisp-mode-hook
              (lambda () (setq-local lisp-indent-function
                                     #'tm/lisp-indent-function)))
    :after (lispy))
#+END_SRC

eldoc mode (stolen from John Wiegley's [[https://github.com/jwiegley/dot-emacs/blob/4e87553c2f2d21e30be885bdfba83b40c4bf0bed/init.el][emacs config]]):

#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :diminish
    :hook ((c-mode-common emacs-lisp-mode) . eldoc-mode))
#+END_SRC

Better paren highlighting with [[https://github.com/tsdh/highlight-parentheses.el][highlight-parentheses]]:

#+BEGIN_SRC emacs-lisp
  (use-package highlight-parentheses
    :ensure t
    :init
    (highlight-parentheses-mode 1))
#+END_SRC

*** Elisp
:PROPERTIES:
:HASH:     55e5ffb39c78851888a18871af9febf8
:MODIFIED: 2019-03-08 15:50:42
:END:

**** Formatting
:PROPERTIES:
:HASH:     a0d0cf2bb986e44e84f29d791e2501a4
:MODIFIED: 2019-03-08 15:50:42
:END:

***** Indent keywords properly
:PROPERTIES:
:HASH:     57d44d33df95137bc7c45c9ca3e4119c
:MODIFIED: 2019-03-08 15:50:42
:END:

By default, =lisp-indent-function= indents =:keywords= improperly:

#+BEGIN_QUOTE
(:token token
        :token-quality quality)
#+END_QUOTE

To fix this, define a new function to use for =lisp-indent-function=
(solution from [[https://emacs.stackexchange.com/a/10233][here]]):

#+BEGIN_SRC emacs-lisp
  (eval-after-load "lisp-mode"
    '(defun tm/lisp-indent-function (indent-point state)
       "This function is the normal value of the variable `lisp-indent-function'.
  The function `calculate-lisp-indent' calls this to determine
  if the arguments of a Lisp function call should be indented specially.
  INDENT-POINT is the position at which the line being indented begins.
  Point is located at the point to indent under (for default indentation);
  STATE is the `parse-partial-sexp' state for that position.
  If the current line is in a call to a Lisp function that has a non-nil
  property `lisp-indent-function' (or the deprecated `lisp-indent-hook'),
  it specifies how to indent.  The property value can be:
  ,* `defun', meaning indent `defun'-style
    \(this is also the case if there is no property and the function
    has a name that begins with \"def\", and three or more arguments);
  ,* an integer N, meaning indent the first N arguments specially
    (like ordinary function arguments), and then indent any further
    arguments like a body;
  ,* a function to call that returns the indentation (or nil).
    `lisp-indent-function' calls this function with the same two arguments
    that it itself received.
  This function returns either the indentation to use, or nil if the
  Lisp function does not specify a special indentation."
       (let ((normal-indent (current-column))
             (orig-point (point)))
         (goto-char (1+ (elt state 1)))
         (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t)
         (cond
          ;; car of form doesn't seem to be a symbol, or is a keyword
          ((and (elt state 2)
                (or (not (looking-at "\\sw\\|\\s_"))
                    (looking-at ":")))
           (if (not (> (save-excursion (forward-line 1) (point))
                       calculate-lisp-indent-last-sexp))
               (progn (goto-char calculate-lisp-indent-last-sexp)
                      (beginning-of-line)
                      (parse-partial-sexp (point)
                                          calculate-lisp-indent-last-sexp 0 t)))
           ;; Indent under the list or under the first sexp on the same line as
           ;; calculate-lisp-indent-last-sexp.  Note that first thing on that
           ;; line has to be complete sexp since we are inside the innermost
           ;; containing sexp.
           (backward-prefix-chars)
           (current-column))
          ((and (save-excursion
                  (goto-char indent-point)
                  (skip-syntax-forward " ")
                  (not (looking-at ":")))
                (save-excursion
                  (goto-char orig-point)
                  (looking-at ":")))
           (save-excursion
             (goto-char (+ 2 (elt state 1)))
             (current-column)))
          (t
           (let ((function (buffer-substring (point)
                                             (progn (forward-sexp 1) (point))))
                 method)
             (setq method (or (function-get (intern-soft function)
                                            'lisp-indent-function)
                              (get (intern-soft function) 'lisp-indent-hook)))
             (cond ((or (eq method 'defun)
                        (and (null method)
                             (> (length function) 3)
                             (string-match "\\`def" function)))
                    (lisp-indent-defform state indent-point))
                   ((integerp method)
                    (lisp-indent-specform method state
                                          indent-point normal-indent))
                   (method
                    (funcall method indent-point state)))))))))
#+END_SRC

***** TODO Auto align :keywords "value" pairs
:PROPERTIES:
:HASH:     b245ac9701103d46a16aa5c675550ec0
:MODIFIED: 2019-03-08 15:50:42
:END:
:LOGBOOK:
- State "TODO"       from              [2019-03-06 Wed 08:46]
:END:

** TODO Complete any mode
:PROPERTIES:
:HASH:     c24b113b9999e1550d05c628abbbaa9b
:MODIFIED: 2019-03-08 15:50:42
:END:
:LOGBOOK:
- State "TODO"       from              [2019-03-04 Mon 16:51]
:END:

General completion mechanism:

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'company-mode)
    (setq company-idle-delay 0.02))
#+END_SRC

*** Python
:PROPERTIES:
:HASH:     30488635960a7a57d5bad4e41eedb046
:MODIFIED: 2019-03-08 15:50:42
:END:

Python JEDI backend for =company-mode=.

NOTE: Don't forget to install =virtualenv= (=$ pip install
virtualenv=) and run =M-x jedi:install-server=.

#+BEGIN_SRC emacs-lisp
(use-package company-jedi
  :ensure t
  :config
    (defun tm/python-mode-hook ()
      (add-to-list 'company-backends 'company-jedi))
    (add-hook 'python-mode-hook 'tm/python-mode-hook))
#+END_SRC

*** Shell
:PROPERTIES:
:HASH:     85998ea6cc948c609864558ba5ae43e8
:MODIFIED: 2019-03-08 15:50:43
:END:

=company-shell= provides completion for fish and binaries found on =$PATH=.

Find more documentation [[https://github.com/Alexander-Miller/company-shell][here]].

#+BEGIN_SRC emacs-lisp
(use-package company-shell
  :ensure t
  :config
    (add-to-list 'company-backends
                 '(company-shell company-shell-env company-fish-shell))
    (setq company-shell-clean-manpage t))
#+END_SRC
** TODO Miscellany
:PROPERTIES:
:HASH:     b91d66f85e6f44e0897fc16b653ef22c
:MODIFIED: 2019-03-08 15:50:43
:END:
:LOGBOOK:
- State "TODO"       from              [2019-03-05 Tue 11:15]
:END:

Highlight TODO and other keywords in comments:

#+BEGIN_SRC emacs-lisp
  (use-package hl-todo
    :ensure t
    :config
    (global-hl-todo-mode t))
#+END_SRC

Use yasnippet. Configure it.

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    ;; TODO: More configuration, more research
    (yas-global-mode 1))
#+END_SRC

Code folding (based stupidly on indentation):

#+BEGIN_SRC emacs-lisp
  (use-package yafolding
    :ensure t
    :config
    (add-to-list 'evil-fold-list
                 '((yafolding-mode)
                   :open-all yafolding-toggle-all
                   :close-all yafolding-toggle-all
                   :toggle yafolding-toggle-element))
    (add-hook 'prog-mode-hook (lambda () (yafolding-mode))))
#+END_SRC

Syntax checking:

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :config
    (add-hook 'after-init-hook #'global-flycheck-mode)

    ;; Config for RuboCop
    (setq flycheck-rubocoprc "/home/tminor/.config/rubocop/.rubocop.yml")

    ;; Config for Puppet lint
    (setq flycheck-puppet-lint-rc "/home/tminor/.puppet-lint.rc"))
#+END_SRC

*** =rainbow-delimiters=
:PROPERTIES:
:HASH:     eb8f9b5f30b1c51fcc581a776140e87f
:MODIFIED: 2019-03-08 15:50:43
:END:

This makes hunting down paren pairs easier in Elisp:

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

** Version control
:PROPERTIES:
:HASH:     8d9a5fb1f24539513aa7494f92caaf48
:MODIFIED: 2019-03-08 15:50:43
:END:

*** Magit
:PROPERTIES:
:HASH:     bb7f8d9ff9ddadf238c8a21c4ddebc4b
:MODIFIED: 2019-03-08 15:50:43
:END:

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :general
    (tm/leader-def
      :infix "m"
      :prefix-command 'tm/magit-prefix-command
      :prefix-map 'tm/magit-prefix-map
      "" '(:which-key "magit prefix" :ignore t)
      "B" 'tm/magit-blame-toggle
      "C" 'magit-clone
      "L" 'magit-log-buffer-file
      "a" 'magit-submodule-add
      "b" 'magit-branch
      "c" 'magit-checkout
      "f" 'magit-find-file
      "l" 'magit-log-all
      "s" 'magit-status
      "p" 'magit-file-popup)
    :config
    (setq magit-diff-refine-hunk t
          auto-revert-check-vc-info t
          git-commit-summary-max-length 50
          git-commit-major-mode 'org-mode))
#+END_SRC

*** Elisp
:PROPERTIES:
:HASH:     e93f4e70a579e1e0cc61e2310499a079
:MODIFIED: 2019-03-08 15:50:43
:END:

From [[https://github.com/dieggsy/dotfiles/blob/master/emacs.d/init.org#functions-7][here]]:

#+BEGIN_SRC emacs-lisp
  (defun d/magit-blame-toggle ()
    "Toggle magit-blame-mode on and off interactively.

  Source: https://git.io/vQKub"
    (interactive)
    (if (bound-and-true-p magit-blame-mode)
        (magit-blame-quit)
      (call-interactively 'magit-blame)))
#+END_SRC
* Shell and Term Modes
:PROPERTIES:
:HASH:     7c791981d7972ac86100ae2ec527dbae
:MODIFIED: 2019-03-08 15:48:05
:END:

** TODO Term-mode
:PROPERTIES:
:HASH:     1615fd61a0b9a0cfddf6763475f231e9
:MODIFIED: 2019-03-08 15:50:43
:END:
:LOGBOOK:
- State "TODO"       from              [2019-03-04 Mon 16:50]
:END:

Moving to using Emacs as a primary terminal emulator is probably
something I should work towards.

#+BEGIN_SRC emacs-lisp
  (use-package multi-term
    :ensure t
    :config
    ;; I'm not quite sure what this does; it was in my init.el (it was
    ;; added by `custom.el')
    (setq ansi-color-faces-vector
          [default bold shadow italic underline bold bold-italic bold])
    (setq ansi-color-names-vector
          (vector "#ffffff"
                  "#f36c60"
                  "#8bc34a"
                  "#fff59d"
                  "#4dd0e1"
                  "#b39ddb"
                  "#81d4fa"
                  "#263238")))
#+END_SRC

** TODO Eshell
:PROPERTIES:
:HASH:     d891da95546fa80c946a723fa80142af
:MODIFIED: 2019-03-08 15:50:43
:END:
:LOGBOOK:
- State "TODO"       from              [2019-03-04 Mon 16:51]
:END:

Eshell should also probably become part of my workflow.

#+BEGIN_SRC emacs-lisp
  (use-package egp
    :commands egp-theme)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package eshell
    :custom
    (eshell-prompt-function #'egp-theme))
#+END_SRC

*** Elisp
:PROPERTIES:
:HASH:     194cf187ed28b78abaad8580f7264cd1
:MODIFIED: 2019-03-08 15:50:43
:END:

A quick internet search said that Eshell doesn't have anything like
brace expansion built in. [[https://emacs.stackexchange.com/a/9521][This]] Stack Exchange post provides a
solution:

#+BEGIN_SRC emacs-lisp
(defun eshell-brace-expansion (str)
  (let* ((parts (split-string str "[{}]"))
         (prefix (car parts))
         (body   (nth 1 parts))
         (suffix (nth 2 parts)))
    (mapcar (lambda (x) (concat prefix x suffix))
            (split-string body ","))))
#+END_SRC

Used like this:

#+BEGIN_QUOTE
ls "prefix-{A,B,C}.suffix"(|eshell-brace-expansion)
#+END_QUOTE

** SSH/GPG keys
:PROPERTIES:
:HASH:     ac21a7acedacaf233af250e8bcf5ba75
:MODIFIED: 2019-03-08 15:50:43
:END:

Install =keychain-environment= so Emacs can use [[https://github.com/funtoo/keychain][keychain]] to access SSH
and GPG keys.

#+BEGIN_SRC emacs-lisp
  (use-package keychain-environment
    :ensure t
    :init
    (keychain-refresh-environment))
#+END_SRC

* Mail
:PROPERTIES:
:HASH:     77e2ccb28c4429b559d2716250583790
:MODIFIED: 2019-03-08 14:47:24
:END:

** TODO Notmuch
:PROPERTIES:
:HASH:     497382a23d085c702e2ef97eca809359
:MODIFIED: 2019-03-08 15:50:43
:END:
:LOGBOOK:
- State "TODO"       from              [2019-03-05 Tue 10:30]
:END:

#+BEGIN_SRC emacs-lisp
  (use-package notmuch
    :init
    ;; Org/HTML deps
    (use-package htmlize
      :ensure t)
    (use-package org-mime
      :ensure t)
    (require 'org-mime)
    (use-package w3m
      :ensure t
      :config
      (require 'mime-w3m))
    :ensure t
    :general
    (tm/leader-def
      "/" 'notmuch)
    ;; TODO: Revisit notmuch bindings
    ;;
    ;; (tm/leader-def
    ;;   :keymaps 'message-mode-map
    ;;   :infix "P"
    ;;   "" '(:which-key "notmuch-prettify prefix" :ignore t)
    ;;   "h" 'org-mime-htmlize)
    :config
    ;; Help Emacs find notmuch and load it
    (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
    (setq exec-path (append exec-path '("/usr/local/bin")))
    (autoload 'notmuch "notmuch" "notmuch mail" t)

    ;; Tell Emacs how to send mail
    (setq message-send-mail-function 'message-send-mail-with-sendmail
          sendmail-program "/usr/bin/msmtp")

    ;; Configure Fcc
    (setq notmuch-fcc-dirs "work/Sent +sent -new"
          notmuch-maildir-use-notmuch-insert t)

    ;; Other variables
    (setq notmuch-search-oldest-first nil
          message-kill-buffer-on-exit t
          notmuch-show-indent-messages-width 4
          notmuch-multipart/alternative-discouraged '("text/html" "text/plain")
          notmuch-archive-tags '("-inbox" "+archive"))

    ;; Turn on org-struct mode in message-mode
    (add-hook 'message-mode-hook 'turn-on-orgstruct++)

    ;; Render HTML with w3m
    (setq mm-text-html-renderer 'w3m)

    ;; Activate line highlighting only for feed buffer
    (add-hook 'notmuch-search-mode
              (lambda ()
                (with-current-buffer
                    (if (eq (buffer-name) "*notmuch-saved-search-feed*")
                        (progn
                          (setq notmuch-search-line-faces '(("git-commits" . '(:foreground "green"))
                                                            ("nagios" . '(:foreground "red"))
                                                            ("servicenow" . '(:foreground "yellow"))
                                                            ("tenshi-uga" . '(:foreground "DodgerBlue1"))
                                                            ("tenshi-db300" . '(:foreground "DodgerBlue1"))
                                                            ("ssladmin" . '(:foreground "pink"))
                                                            ("unread" . '(:background "gray15"))))
                          (make-local-variable 'notmuch-search-line-faces))
                        (setq notmuch-search-line-faces nil)))))

    ;; Saved searches for notmuch-hello
    (setq notmuch-saved-searches
          '((:name "inbox"
             :query "tag:inbox"
             :key "i"
             :count-query "tag:inbox and tag:unread")
            (:name "saved mail"
             :query "tag:check"
             :key "c")
            (:name "feed"
             :query "date:\"2hours..now\"")
            (:name "nagios-gluu"
             :query "subject:\"/idp-demo-prod/\" and tag:nagios-gluu and date:30days..today"
             :count-query "subject:\"/idp-demo-prod/\" and tag:nagios-gluu and date:30days..today and tag:unread")
            (:name "nagios"
             :query "tag:nagios not 'subject:\"/Project: gluu/\"' and date:3days..today"
             :count-query "tag:nagios not 'subject:\"/Project: gluu/\"' and date:3days..today and tag:unread")
            (:name "git messages"
             :query "tag:git and date:4days..today"
             :count-query "tag:git and date:4days..today and tag:unread")
            (:name "service now"
             :query "tag:servicenow and date:3days..today and not subject:\"/(Resolved|Closed)/\""
             :count-query "tag:servicenow and date:3days..today and not subject:\"/(Resolved|Closed)/\" and tag:unread")
            (:name "ssl" :query "tag:ssladmin and date:6days..today")
            (:name "cron daemon"
             :query "date:4days..today and from:\"(Cron Daemon)\""
             :count-query "date:4days..today and from:\"(Cron Daemon)\" and tag:unread")
            (:name "tenshi"
             :query "date:2days..today and tag:tenshi-db300 or tag:tenshi-uga"
             :count-query "date:2days..today and tag:tenshi-db300 or tag:tenshi-uga and tag:unread")
            (:name "notmuch list"
             :query "tag:lists/notmuch and date:1month..today")
            (:name "emacs bug list"
             :query "date:10days.. and tag:lists/bug-gnu-emacs")
            (:name "emacs lists"
             :query "(tag:lists/help-gnu-emacs or tag:lists/emacs-devel) and date:15days..today")
            (:name "davmail-users list"
             :query "tag:lists/davmail-users and date:1month..")
            (:name "dns-operations list"
             :query "tag:lists/dns-operations and date:1month..")
            (:name "fedora users list"
             :query "tag:lists/users and date:1month..today")
            (:name "followed list threads"
             :query "tag:follow")
            (:name "sent"
             :query "tag:sent"
             :key "t")
            (:name "drafts"
             :query "tag:draft"
             :key "d"))))
#+END_SRC

** Elisp
:PROPERTIES:
:HASH:     ba12765916563b3f00515d61783c7933
:MODIFIED: 2019-03-08 15:50:43
:END:

*** Sending
:PROPERTIES:
:HASH:     bfd4e36f7b78a41304a0ffaf94d8641e
:MODIFIED: 2019-03-08 15:50:43
:END:

**** Signatures
:PROPERTIES:
:HASH:     bcca16c42b05160ca1f0157b0d3c44db
:MODIFIED: 2019-03-08 15:50:43
:END:

#+BEGIN_SRC emacs-lisp
(defvar tm/signature-alist '((?f "Formal"
			      (lambda () (insert-file-contents
					  "~/org/sigs/formal")))
			  (?i "Informal"
			      (lambda () (insert-file-contents
					  "~/org/sigs/informal")))))

(defun tm/signature-choose ()
  "Lets the user choose the animal and takes the corresponding action.
Returns whatever the action returns."
  (interactive)
  (let ((choice (read-char-choice (mapconcat (lambda (item) (format "%c: %s" (car item) (cadr item))) tm/signature-alist "; ")
                  (mapcar #'car tm/signature-alist))))
    (funcall (nth 2 (assoc choice tm/signature-alist)))))

(add-hook 'notmuch-message-mode-hook
          (lambda () (local-set-key (kbd "C-c C-w") #'tm/signature-choose)))
#+END_SRC

*** Alerts
:PROPERTIES:
:HASH:     e23512cad33f707f5cbdc342138266f7
:MODIFIED: 2019-03-08 15:50:43
:END:

#+BEGIN_SRC emacs-lisp
  (defun tm/notmuch-notify ()
    "Generate desktop notifcations for new mail.

  Utilize `notmuch-call-notmuch-sexp' to fetch the latest messages
  tagged inbox and send a notification to the desktop"
    (let* ((latest-messages
            (apply
             #'notmuch-call-notmuch-sexp
             '("search"
               "--format=sexp"
               "--format-version=4"
               "--sort=newest-first"
               "tag:inbox"
               "date:45secs..")))
           (who)
           (when)
           (what)
           (mail-message)
           (body))
      (mapcar (lambda (mail-message)
                (setq when (plist-get mail-message :date_relative))
                (setq who (if (string-match-p "|"
                                              (plist-get mail-message :authors))
                              (progn (string-match "[[:space:],]\\{0,2\\}\\([a-zA-z[:space:]]+\\)|"
                                                   (plist-get mail-message
                                                              :authors))
                                     (match-string 1 (plist-get mail-message
                                                                :authors)))
                            (plist-get mail-message :authors)))
                (setq what (plist-get mail-message :subject))
                (setq body (format "<b>%s</b>\n<b>%s</b>\n\n%s" when who what))
                (notifications-notify :title "New message(s)!\n"
                                      :body body
                                      :app-name "notmuchmail"))
              latest-messages)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun tm/notmuch-unread ()
    "Show unread message count in mode-line."
    (let* ((unread-mail (apply
                         #'notmuch-call-notmuch-sexp
                         '("search"
                           "--format=sexp"
                           "--format-version=4"
                           "--sort=newest-first"
                           "--output=messages"
                           "tag:inbox"
                           "and tag:unread"))))
      (if (> (length unread-mail) 0)
          (setq global-mode-string
                (propertize
                 (format "%s %s"
                         (all-the-icons-material "mail" :face 'all-the-icons-cyan-alt)
                         (length unread-mail)) 'font-lock-face '(:foreground "#61dafb")))
        (setq global-mode-string nil))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-hook 'notmuch-after-tag-hook #'tm/notmuch-unread)
#+END_SRC

*** TODO Reminders for sent mail
:PROPERTIES:
:HASH:     ab24c782ddaadca26d2c549655a3ffea
:MODIFIED: 2019-03-08 15:50:43
:END:
:LOGBOOK:
- State "TODO"       from              [2019-03-06 Wed 09:32]
:END:

Reminders a la Gmail about sent mail that hasn't received a response.

* Org-mode
:PROPERTIES:
:HASH:     1ec6d96ffcc20597ffd547966ecf91ee
:MODIFIED: 2019-03-08 15:48:05
:END:

** Org-mode
:PROPERTIES:
:HASH:     f40e82b6ae092d1613e05d17f45e50c1
:MODIFIED: 2019-03-08 15:50:43
:END:

*** Config
:PROPERTIES:
:HASH:     89d8c053616b4672d05d21f5dc18febd
:MODIFIED: 2019-03-08 15:50:43
:END:

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :general
    (tm/leader-def
      :infix "o"
      :prefix-command 'tm/org-prefix-command
      :prefix-map 'tm/org-prefix-map
      "" '(:which-key "org prefix" :ignore t)
      "a" 'org-agenda
      "c" 'org-capture
      "b" 'org-switchb
      "'" 'org-edit-special)
    :init
    ;; Use UTF8 bullets instead of asterisks for Org headings
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
    ;; Evil key bindings in Org mode
    (use-package evil-org
      :ensure t
      :after org
      :config
      (add-hook 'org-mode-hook 'evil-org-mode)
      (add-hook 'evil-org-mode-hook
                (lambda ()
                  (evil-org-set-key-theme))))
    :config
    ;; Add TOC for any heading with :TOC: tag
    ;; https://github.com/snosov1/toc-org
    (use-package toc-org
      :ensure t
      :config
      (add-hook 'org-mode-hook 'toc-org-mode))

    ;; Set org file base directory
    (setq org-base-directory "~/org/")

    ;; Add indentation based on heading level
    (setq org-startup-indented t)

    ;; Enable syntax highlighting for code blocks
    ;;
    ;; TODO: Tweak org source block faces
    (setq org-src-fontify-natively t)

    ;; Tweak tag placement when window sizes change
    (add-hook 'window-configuration-change-hook 'tm/place-org-tags)

    ;; Add modified time property when Org mode files are saved
    ;;
    ;; TODO: Refine these functions
    (add-hook 'before-save-hook
              (lambda ()
                (when (eq major-mode 'org-mode)
                  (org-map-entries #'tm/update-modification-time ;; FUNC
                                   nil                           ;; MATCH
                                   'file                         ;; SCOPE
                                   #'tm/skip-nonmodified))))     ;; SKIP

    ;; Define TODO/DONE-state keywords
    (setq org-todo-keywords
          '((sequence "TODO(t!)"
                      "WAITING(w@)"
                      "HOLD(h@)"
                      "NEXT(n@)"
                      "MAYBE(m@)"
                      "STUFF(s!)"
                      "PROJECT(p!)"
                      "|"
                      "DONE(d@)"
                      "CANCELLED(c@)")))

    ;; Enable state change logging in :LOGBOOK: drawer
    (setq org-log-into-drawer t)

    ;; Enable fast todo selection
    (setq org-use-fast-todo-selection t)

    ;; Make headlines look different for TODO/DONE states
    (setq org-fontify-done-headline t)
    (setq org-fontify-quote-and-verse-blocks t)
    (setq org-fontify-whole-heading-line t)

    ;; Org modules
    (setq org-modules
          '(org-bbdb org-bibtex org-docview org-gnus org-habit
                     org-info org-irc org-mhe org-rmail org-w3m))

    ;; Faces
    ;;
    ;; TODO: Find a better way to move this into a theme
    ;; Task state faces
    (setq org-todo-keyword-faces
          '(("TODO" :foreground "red" :weight bold)
            ("NEXT" :foreground "blue" :weight bold)
            ("DONE" :foreground "forest green" :weight bold)
            ("WAITING" :foreground "orange" :weight bold)
            ("MAYBE" :foreground "yellow" :weight bold)
            ("PROJECT" :foreground "purple" :weight bold)
            ("STUFF" :foreground "cyan" :weight bold)
            ("HOLD" :foreground "magenta" :weight bold)
            ("CANCELLED" :foreground "forest green" :weight bold)
            ("MEETING" :foreground "forest green" :weight bold)))

    ;; Priority faces
    (setq org-priority-faces '((?A . (:foreground "red" :weight 'bold))
                               (?B . (:foreground "yellow"))
                               (?C . (:foreground "green"))))

    ;;  ;;;;;;;;;;;;;;;;;;;
    ;;
    ;; `org-refile' section
    ;;
    ;;  ;;;;;;;;;;;;;;;;;;;

    ;; Define refile targets and specify max level so we aren't bombarded
    ;; with too many choices
    (setq org-refile-targets
          '((nil :maxlevel . 1)
            (org-agenda-files :maxlevel . 1)))

    ;; Using `ivy' or similar negates the need for Org's native complete
    ;; in steps for refiling
    (setq org-outline-path-complete-in-steps nil)

    ;; Include file name in refile targets
    (setq org-refile-use-outline-path 'file)

    ;; Hooks
    ;;
    ;; Remove inherited tags when refiling
    (add-hook 'org-after-refile-insert-hook
              'tm/org-remove-inherited-local-tags))
#+END_SRC

*** Elisp
:PROPERTIES:
:HASH:     55e5ffb39c78851888a18871af9febf8
:MODIFIED: 2019-03-08 15:50:43
:END:

**** Tag placement
:PROPERTIES:
:HASH:     8ee1aa3aa218557d747fff03e57be937
:MODIFIED: 2019-03-08 15:50:43
:END:

#+BEGIN_SRC emacs-lisp
  (defun tm/place-agenda-tags ()
      "Flush tags to right side of agenda window."
      (with-current-buffer
          (buffer-name)
        (if (derived-mode-p 'org-agenda-mode)
            (progn
              (setq org-agenda-tags-column (abs (- 20 (window-width))))
              (setq org-habit-graph-column (abs (- 65 (window-width))))
              (org-agenda-align-tags))
          nil)))

  (defun tm/place-org-tags ()
      "Align tags with right side of current window."
      (with-current-buffer
          (buffer-name)
        (if (derived-mode-p 'org-mode)
            (progn
              (setq org-tags-column (abs (- 30 (window-width))))
              (org-align-all-tags))
          nil)))
#+END_SRC

**** Org-refile functions
:PROPERTIES:
:HASH:     f847514018712eb68be765b1360e070f
:MODIFIED: 2019-03-08 15:50:43
:END:

From [[https://github.com/Fuco1/Fuco1.github.io/blob/master/posts/2017-05-09-Automatically-remove-inherited-tags-from-tasks-after-refiling.org][here]]:

#+BEGIN_SRC emacs-lisp
  (defun tm/org-remove-inherited-local-tags ()
    "Remove local tags that can be inherited instead."
    (let* ((target-tags-local (org-get-tags-at nil 'local))
           ;; We have to remove the local tags otherwise they would not show up
           ;; as being inherited if they are present on parents---the local tag
           ;; would "override" the parent
           (target-tags-inherited
            (unwind-protect
                (progn
                  (org-set-tags-to nil)
                  (org-get-tags-at))
              (org-set-tags-to target-tags-local))))
      (-each target-tags-local
        (lambda (tag)
          (when (member tag target-tags-inherited)
            (org-toggle-tag tag 'off))))))
#+END_SRC

** Org-agenda
:PROPERTIES:
:HASH:     41d3f193eaaac071532945c71c538817
:MODIFIED: 2019-03-08 15:50:43
:END:

*** Elisp
:PROPERTIES:
:HASH:     55e5ffb39c78851888a18871af9febf8
:MODIFIED: 2019-03-08 15:50:43
:END:

**** Add modified date property to headings in Org mode file
:PROPERTIES:
:HASH:     b0c066de89a69d8a159b5c0f39dc8535
:MODIFIED: 2019-03-08 15:50:43
:END:

Functions for calculating last update time per Org heading (from
[[https://emacs.stackexchange.com/a/39376][here]]):

#+BEGIN_SRC emacs-lisp
  (defun tm/getentryhash ()
    "Get the hash sum of the text in current entry, except :HASH:
  and :MODIFIED: property texts."
    (save-excursion
      (let* ((full-str
              (buffer-substring-no-properties (point-min)
                                              (point-max)))
             (str-nohash
              (if (string-match "^ *:HASH:.+\n" full-str)
                  (replace-match "" nil nil full-str)
                full-str))
             (str-nohash-nomod
              (if (string-match "^ *:MODIFIED:.+\n" str-nohash)
                  (replace-match "" nil nil str-nohash)
                str-nohash))
             (str-nohash-nomod-nopropbeg
              (if (string-match "^ *:PROPERTIES:\n" str-nohash-nomod)
                  (replace-match "" nil nil str-nohash-nomod)
                str-nohash-nomod))
             (str-nohash-nomod-nopropbeg-end
              (if (string-match "^ *:END:\n" str-nohash-nomod-nopropbeg)
                  (replace-match "" nil nil str-nohash-nomod-nopropbeg)
                str-nohash-nomod-nopropbeg)))
        (secure-hash 'md5 str-nohash-nomod-nopropbeg-end))))

  (defun tm/update-modification-time ()
    "Set the :MODIFIED: property of the current entry to NOW and
  update :HASH: property."
    (save-excursion
      (save-restriction
        (let* ((beg
                (progn
                  (org-back-to-heading)
                  (point)))
               (end
                (progn
                  (outline-next-heading)
                  (- (point) 1))))
          (narrow-to-region beg end)
          (org-set-property "HASH"
                            (format "%s" (tm/getentryhash)))
          (org-set-property "MODIFIED"
                            (format-time-string "%Y-%m-%d %H:%M:%S"))))))

  (defun tm/skip-nonmodified ()
    "Skip headings whose :MODIFIED: properties are unchanged."
    (let ((next-headline
           (save-excursion
             (or (outline-next-heading)
                 (point-max)))))
      (save-restriction
        (let* ((beg
                (progn
                  (org-back-to-heading)
                  (point)))
               (end
                (progn
                  (outline-next-heading)
                  (- (point) 1))))
          (narrow-to-region beg end)
          (if (string= (org-entry-get (point) "HASH" nil)
                       (format "%s" (tm/getentryhash)))
              next-headline
            nil)))))
#+END_SRC

**** More convenient movement
:PROPERTIES:
:HASH:     4f01861f68279253b01512c998c8c3cf
:MODIFIED: 2019-03-08 15:50:43
:END:

Move between =org-agenda-custom-command= blocks (from [[https://blog.aaronbieber.com/2016/09/25/agenda-interactions-primer.html][here]]):

#+BEGIN_SRC emacs-lisp
  (require 'org-agenda)

  (defun tm/org-agenda-next-header ()
    "Jump to the next header in an agenda series."
    (interactive)
    (tm/org-agenda-goto-header))

  (defun tm/org-agenda-previous-header ()
    "Jump to the previous header in an agenda series."
    (interactive)
    (tm/org-agenda-goto-header t))

  (defun tm/org-agenda-goto-header (&optional backwards)
    "Find the next agenda series header forwards or BACKWARDS."
    (let ((pos (save-excursion
                 (goto-char (if backwards
                                (line-beginning-position)
                              (line-end-position)))
                 (let* ((find-func (if backwards
                                       'previous-single-property-change
                                     'next-single-property-change))
                        (end-func (if backwards
                                      'max
                                    'min))
                        (all-pos-raw (list (funcall find-func (point) 'org-agenda-structural-header)
                                           (funcall find-func (point) 'org-agenda-date-header)))
                        (all-pos (cl-remove-if-not 'numberp all-pos-raw))
                        (prop-pos (if all-pos (apply end-func all-pos) nil)))
                   prop-pos))))
      (if pos (goto-char pos))
      (if backwards (goto-char (line-beginning-position)))))
#+END_SRC

**** Auto-refresh specified files when they change on disk
:PROPERTIES:
:HASH:     3cdaee95aa51037958c93867636832fb
:MODIFIED: 2019-03-08 15:50:43
:END:

Activate minor modes based on file names (from [[https://stackoverflow.com/a/13946304][here)]]:

#+BEGIN_SRC emacs-lisp
  (defvar tm/auto-minor-mode-alist ()
    "Alist of filename patterns vs correpsonding minor mode
  functions, see `auto-mode-alist' All elements of this alist are
  checked, meaning you can enable multiple minor modes for the same
  regexp.")

  (defun tm/enable-minor-mode-based-on-extension ()
    "Check file name against `tm/auto-minor-mode-alist' to enable minor modes
  the checking happens for all pairs in tm/auto-minor-mode-alist"
    (when buffer-file-name
      (let ((name (file-name-sans-versions buffer-file-name))
            (remote-id (file-remote-p buffer-file-name))
            (case-fold-search auto-mode-case-fold)
            (alist tm/auto-minor-mode-alist))
        ;; Remove remote file name identification.
        (when (and (stringp remote-id)
                   (string-match-p (regexp-quote remote-id) name))
          (setq name (substring name (match-end 0))))
        (while (and alist (caar alist) (cdar alist))
          (if (string-match-p (caar alist) name)
              (funcall (cdar alist) 1))
          (setq alist (cdr alist))))))

  (setq auto-revert-verbose nil)
#+END_SRC

*** Config
:PROPERTIES:
:HASH:     c161d92865c546ccc51b06984fb92d48
:MODIFIED: 2019-03-08 15:50:43
:END:

#+BEGIN_SRC emacs-lisp
  (use-package org-agenda
    :general
    (org-agenda-mode-map
     :keymaps 'override
     "j" 'org-agenda-next-item
     "k" 'org-agenda-previous-item
     "J" 'tm/org-agenda-next-header
     "K" 'tm/org-agenda-previous-header)
    :init
    (use-package evil-org-agenda
      :config
      (evil-org-agenda-set-keys))
    :config
    ;; Hooks
    ;;
    ;; Place tags flush with right side of window
    (add-hook 'window-configuration-change-hook 'tm/place-agenda-tags)
    (add-hook 'find-file-hook #'tm/enable-minor-mode-based-on-extension)

    ;; Activate `auto-revert-mode' for calendar.org
    (add-to-list 'tm/auto-minor-mode-alist '("\\calendar.org\\'" . auto-revert-mode))

    ;; Files that `org-agenda' uses to populate its commands/views
    (setq org-agenda-files '("~/org/projects.org"
                             "~/org/capture.org"
                             "~/org/someday.org"
                             "~/org/calendar.org"
                             "~/org/todo.org"
                             "~/org/notes.org"
                             "~/org/links.org"
                             "~/org/mobile-capture.org"))

    ;; Don't show scheduled TODOs in `org-agenda'
    (setq org-agenda-todo-ignore-scheduled t)

    ;; Tell `org-agenda' to use `current-buffer' to avoid destroying
    ;; precious window layouts
    (setq org-agenda-window-setup 'current-window)

    ;; Define `org-stuck-projects'
    (setq org-stuck-projects '("/PROJECT" ("NEXT" "TODO") nil ""))

    ;; Customize `org-agenda-column-view' layout
    (setq org-columns-default-format "%3PRIORITY %Effort(Estim){:} %60ITEM %TODO")

    ;; Set up `org-habit'
    (require 'org-habit)
    (add-to-list 'org-modules "org-habit")
    (setq org-habit-graph-column 80
          org-habit-show-habits-only-for-today t)

    ;; Create overly complicated `org-agenda' custom commands
    ;;
    ;; TODO: Clean out commands that aren't used
    (setq org-agenda-custom-commands
          (quote (("n" "Morning Ritual"
                   ((agenda ""
                            ((org-agenda-prefix-format " %-6.6e: %t")))
                    (todo "STUFF"
                          ((org-agenda-overriding-header "Stuff to Refile")
                           (org-tags-match-list-sublevels nil)
                           (org-agenda-prefix-format "  %-6.6e  %-20.20c: ")))
                    (tags-todo "-CANCELLED/!NEXT"
                               ((org-agenda-overriding-header "Tasks to Complete Next")
                                (org-tags-match-list-sublevels t)
                                (org-agenda-skip-function '(org-agenda-skip-entry-if
                                                            'scheduled))
                                (org-agenda-sorting-strategy
                                 '(priority-down))))
                    (todo "WAITING|HOLD"
                          ((org-agenda-overriding-header "Waiting and Postponed Tasks")
                           (org-agenda-include-inactive-timestamps t)
                           (org-tags-match-list-sublevels t)
                           (org-agenda-sorting-strategy
                            '(priority-down))
                           (org-agenda-prefix-format "  %-6.6e  %-20.20c: %5(org-entry-get nil \"MODIFIED\") ")))
                    (tags "quick/!+TODO"
                          ((org-agenda-overriding-header "Two Minute Tasks")
                           (org-agenda-skip-function '(org-agenda-skip-entry-if
                                                       'scheduled))
                           (org-agenda-sorting-strategy
                            '(priority-down))
                           (org-tags-match-list-sublevels nil)
                           (org-agenda-prefix-format "  %-6.6e  %-20.20c: ")))
                    (tags "PROJECTS/!+TODO"
                          ((org-agenda-overriding-header "Tasks Not NEXT in Projects")
                           (org-tags-match-list-sublevels t)
                           (org-agenda-skip-function '(org-agenda-skip-entry-if
                                                       'scheduled))
                           (org-agenda-sorting-strategy
                            '(priority-down))
                           (org-agenda-prefix-format "  %-6.6e  %-20.20c: "))))
                   nil)
                  ("r" "Weekly Review"
                   ((agenda ""
                            ((org-agenda-prefix-format " %-6.6e: %t")))
                    (todo "STUFF"
                          ((org-agenda-overriding-header "Stuff to Refile")
                           (org-tags-match-list-sublevels nil)
                           (org-agenda-prefix-format "  %-6.6e  %-20.20c: ")))
                    (stuck ""
                           ((org-agenda-overriding-header "Review Stuck Projects")
                            (org-agenda-prefix-format "  %-6.6e  %-20.20c: ")))
                    (todo "MAYBE"
                          ((org-agenda-overriding-header "Review Someday Items")
                           (org-agenda-prefix-format "  %-6.6e  %-20.20c: ")))
                    (todo "WAITING|HOLD"
                          ((org-agenda-overriding-header "Waiting and Postponed Tasks")
                           (org-agenda-include-inactive-timestamps t)
                           (org-tags-match-list-sublevels t)
                           (org-agenda-sorting-strategy
                            '(priority-down effort-down deadline-up))
                           (org-agenda-prefix-format "  %-6.6e  %-20.20c: %5(org-entry-get nil \"MODIFIED\") ")))
                    (todo "DONE|CANCELLED"
                          ((org-agenda-overriding-header "Archive Completed or Cancelled Tasks")
                           (org-agenda-include-inactive-timestamps t)
                           (org-tags-match-list-sublevels t)
                           (org-agenda-prefix-format "  %-20.20c: ")))
                    (tags "QUICK/!+TODO"
                          ((org-agenda-overriding-header "Two Minute Tasks")
                           (org-agenda-skip-function '(org-agenda-skip-entry-if
                                                       'scheduled))
                           (org-agenda-sorting-strategy
                            '(priority-down effort-down deadline-up))
                           (org-tags-match-list-sublevels nil)
                           (org-agenda-prefix-format "  %-6.6e  %-20.20c: ")))
                    (tags "PROJECTS/!+TODO"
                          ((org-agenda-overriding-header "Tasks Not NEXT in Projects")
                           (org-tags-match-list-sublevels t)
                           (org-agenda-skip-function '(org-agenda-skip-entry-if
                                                       'scheduled))
                           (org-agenda-sorting-strategy
                            '(priority-down effort-down deadline-up))
                           (org-agenda-prefix-format "  %-6.6e  %-20.20c: ")))))
                  ("d" "Daily Agenda"
                   ((tags "quick/!+TODO"
                          ((org-agenda-overriding-header "Two Minute Tasks")
                           (org-agenda-skip-function '(org-agenda-skip-entry-if
                                                       'scheduled))
                           (org-agenda-sorting-strategy
                            '(priority-down))
                           (org-tags-match-list-sublevels nil)))
                    (tags "PROJECTS/!+TODO"
                          ((org-agenda-overriding-header "Tasks Not NEXT in Projects")
                           (org-tags-match-list-sublevels t)
                           (org-agenda-skip-function '(org-agenda-skip-entry-if
                                                       'scheduled))
                           (org-agenda-sorting-strategy
                            '(priority-down))))
                    (agenda "" nil)))))))
#+END_SRC

** Org-capture
:PROPERTIES:
:HASH:     601b1d12b653c8928bc99dc44281c235
:MODIFIED: 2019-03-08 15:50:43
:END:

*** Config
:PROPERTIES:
:HASH:     371be7e47261dcce13d9563a780692be
:MODIFIED: 2019-03-08 15:50:43
:END:

#+BEGIN_SRC emacs-lisp
  (use-package org-capture
    :config
    ;; Set default capture file
    (setq org-default-notes-file "~/org/capture.org")

    ;; Capture templates
    ;;
    ;; TODO: Set deadlines automatically
    ;; TODO: Add capture template for Emacs config modifications
    ;; TODO: Don't prompt for priority; template for each urgency
    (setq org-capture-templates
          '(("t" "Templates for TODOs.")
            ;; Urgent/high priority TODOs
            ("tu" "TODO that should be done soon."
             entry (file "~/org/todo.org")
             (concat "* TODO [#%^{Priority: |C|B|A}] %? %^g\n"
                     "SCHEDULED: %^{(SCHEDULED) }t\n"
                     ":PROPERTIES:\n"
                     ":CONTEXT: %a\n"
                     ":Effort: %^{Effort:|00:02|00:10|00:30|01:00}\n"
                     ":END:"))

            ;; Non-urgent TODOs
            ("tl" "TODO that can be done later."
             entry (file "~/org/todo.org")
             (concat "* TODO [#%^{Priority: |C|B|A}] %? %^g\n"
                     ":PROPERTIES:\n"
                     "DEADLINE: %^{(DEADLINE) }t\n"
                     ":CONTEXT: %a\n"
                     ":Effort: %^{Effort:|00:02|00:10|00:30|01:00}\n"
                     ":END:"))

            ;; NOTE for notes.org
            ("n" ":NOTE: about something to remember in notes.org."
             entry (file+function "~/org/notes.org" org-ask-location)
             "* %? %^{Tags, please}g")

            ;; Archive LINK and LINK HTML
            ("l" "LINK to save for posterity."
             entry (file "~/org/links.org")
             "* LINK [[%x][%?]]\n%U\n:PROPERTIES:\n:CONTEXT: %a\n:END:")

            ;; Low friction quick capture for later processing
            ("s" "STUFF for quick capture."
             entry (file "~/org/capture.org")
             "* STUFF %?\n%U\n%f\n%a\n")

            ("p" "Templates for PROJECTs.")

            ;; Create new PROJECT
            ("pp" "New PROJECT containing NOTEs and TODOs."
             entry (file "~/org/projects.org")
             (concat "* PROJECT [#%^{Priority: |C|B|A}] %?\n"
                     "DEADLINE:%^{(DEADLINE)}t\n"
                     ":PROPERTIES:\n"
                     ":CONTEXT: %a\n"
                     ":END:"))

            ;; Create new TODO under PROJECT
            ("pt" "TODO associated with a project."
             entry (file+function "~/org/projects.org" org-ask-location)
             (concat "* TODO [#%^{Priority: |C|B|A}] %?\n"
                     ":PROPERTIES:\n"
                     ":CONTEXT: %a\n"
                     ":Effort: %^{Effort:|00:02|00:10|00:30|01:00}\n"
                     ":END:"))

            ("pu" "Urgent TODO associated with a project."
             entry (file+function "~/org/projects.org" org-ask-location)
             (concat "* TODO [#%^{Priority: |C|B|A}] %?\n"
                     ":SCHEDULED: %^{(SCHEDULED) }t\n"
                     ":PROPERTIES:\n"
                     ":CONTEXT: %a\n"
                     ":Effort: %^{Effort:|00:02|00:10|00:30|01:00}\n"
                     ":END:"))

            ;; Add :NOTE: to subheading of currently clocked entry
            ("c" ":NOTE: for currently clocked entry."
             item (function org-capture-clocked-note)
             "- %?"))))
#+END_SRC

*** Elisp
:PROPERTIES:
:HASH:     72d6cec81f4e2636c751eaf5b3bbd7f8
:MODIFIED: 2019-03-08 15:50:43
:END:

#+BEGIN_SRC emacs-lisp
  ;; https://stackoverflow.com/a/24787118
  (defun tm/org-ask-location ()
    "Prompt for refile location."
    (setq org-refile-use-outline-path nil)
    (let* ((org-refile-targets '((nil :maxlevel . 1)))
           (hd (condition-case nil
                   (car (org-refile-get-location "Headline" nil t))
                 (error (car org-refile-history)))))
      (goto-char (point-min))
      (outline-next-heading)
      (if (re-search-forward
           (format org-complex-heading-regexp-format (regexp-quote hd))
           nil t)
          (goto-char (point-at-bol))
        (goto-char (point-max))
        (or (bolp) (insert "\n"))
        (insert "* " hd "\n")))
    (end-of-line)
    (setq org-refile-use-outline-path 'file))

  (defun org-capture-clocked-note ()
      "Add list item to TODO's :NOTE: heading."
      (let (region-begin
            region-end
            eol
            heading-text)
        (if (and (markerp org-clock-hd-marker)
                 (marker-buffer org-clock-hd-marker))
            (progn (set-buffer (marker-buffer org-clock-hd-marker))
                   (org-capture-put-target-region-and-position)
                   (widen)
                   (goto-char org-clock-hd-marker)
                   (setq heading-text (nth 4 (org-heading-components)))
                   ;; Try to find the first subheading; if it exists,
                   ;; check that it's one with a :NOTE: tag. If it doesn't
                   ;; have a :NOTE: tag or if the heading doesn't have a
                   ;; subheading, make sure that its first subheading is
                   ;; created and has a :NOTE: tag.
                   (if (org-goto-first-child)
                       ;; Make sure first subheading has a :NOTE: tag.
                       ;; Return point to beginning of parent if it does.
                       ;; Insert new subheading directly under the parent
                       ;; with :NOTE: tag if the first subheading isn't
                       ;; the one we expect (and also return point to
                       ;; beginning of parent).
                       (progn
                         (org-goto-first-child)
                         (org-end-of-line)
                         (setq eol (point))
                         (org-beginning-of-line)
                         (if (re-search-forward ":NOTE:$" eol t)
                             (org-backward-element)
                           (progn
                             (org-backward-element)
                             (org-set-tags-to ":NOTE:")
                             (org-backward-element))))
                     ;; Else: if `org-goto-first-child' returns nil,
                     ;; create a new subheading with :NOTE: tag.
                     (progn
                       (org-end-of-line)
                       (org-insert-subheading 1)
                       (insert (format "Notes to remember about %s" heading-text))
                       (org-set-tags-to ":NOTE:")
                       (org-backward-element)))
                   (org-goto-first-child)
                   (if (re-search-forward "^-.*$" nil t)
                       (progn
                         ;; (goto-char (re-search-forward "^-.*$" nil))
                         (newline 1))
                     (progn
                       (goto-char (re-search-forward "^$" nil))
                       (newline 1))))
          (error "No running clock that could be used as capture target"))))
#+END_SRC

** TODO Blog Publishing
:PROPERTIES:
:HASH:     65384ef23ee9196fe497f830cd82ef29
:MODIFIED: 2019-03-08 15:50:43
:END:
:LOGBOOK:
- State "TODO"       from              [2019-03-06 Wed 08:47]
:END:

I never use this (because I never blog). I should re-evaluate this
(and blog more) and decide if moving to Hugo would be better/easier.

*** =org2jekyll=
:PROPERTIES:
:HASH:     faa9575444c7e96f1b7d6fd2608933d4
:MODIFIED: 2019-03-08 15:50:43
:END:

Write blog posts in =org-mode= and publish them to a Jekyll site with =org2jekyll=.

Define the following variables:
- =org2jekyll-source-directory=: The directory where =*.org= blog posts are stored.
- =org2jekyll-jekyll-directory=: Path to a Jekyll site.
- =org2jekyll-posts-dir=: The directory where Jekyll posts are stored.

#+BEGIN_SRC emacs-lisp
(use-package org2jekyll
  :ensure t
  :defer 3
  :config
  (setq org2jekyll-blog-author       "tminor"
        org2jekyll-source-directory  (expand-file-name "~/org/blog")
        org2jekyll-jekyll-directory  (expand-file-name "~/blog")
        org2jekyll-jekyll-drafts-dir ""
        org2jekyll-jekyll-posts-dir  "_posts/"
        org-publish-project-alist
            `(("default"
                :base-directory ,(org2jekyll-input-directory)
                :base-extension "org"
                ;; :publishing-directory "/ssh:user@host:~/html/notebook/"
                :publishing-directory ,(org2jekyll-output-directory)
                :publishing-function org-html-publish-to-html
                :headline-levels 4
                :section-numbers nil
                :with-toc nil
                :html-head "<link rel=\"stylesheet\" href=\"./css/style.css\" type=\"text/css\"/>"
                :html-preamble t
                :recursive t
                :make-index t
                :html-extension "html"
                :body-only t)

            ("post"
                :base-directory ,(org2jekyll-input-directory)
                :base-extension "org"
                :publishing-directory ,(org2jekyll-output-directory org2jekyll-jekyll-posts-dir)
                :publishing-function org-html-publish-to-html
                :headline-levels 4
                :section-numbers nil
                :with-toc nil
                :html-head "<link rel='stylesheet' href='https://blog.tminor.io/assets/core.css'>"
                :html-preamble t
                :recursive t
                :make-index t
                :html-extension "html"
                :body-only t)

            ("images"
                :base-directory ,(org2jekyll-input-directory "img")
                :base-extension "jpg\\|gif\\|png"
                :publishing-directory ,(org2jekyll-output-directory "img")
                :publishing-function org-publish-attachment
                :recursive t)

            ("js"
                :base-directory ,(org2jekyll-input-directory "js")
                :base-extension "js"
                :publishing-directory ,(org2jekyll-output-directory "js")
                :publishing-function org-publish-attachment
                :recursive t)

            ("css"
                :base-directory ,(org2jekyll-input-directory "css")
                :base-extension "css\\|el"
                :publishing-directory ,(org2jekyll-output-directory "css")
                :publishing-function org-publish-attachment
                :recursive t)

            ("web" :components ("images" "js" "css")))))
#+END_SRC

*** Creating a Blog Post
:PROPERTIES:
:HASH:     d628231bc1be949d8580001a964548b3
:MODIFIED: 2019-03-08 15:50:43
:END:

1. Invoke =org2jekyll-create-draft=, select your layout and follow the prompts in the mini buffer.
2. Write your post.
3. Publish it with =org2jekyll-publish=.

* Hydra
:PROPERTIES:
:HASH:     5e6e39921e99257f5dec24edd71c7ccd
:MODIFIED: 2019-03-08 15:48:05
:END:

** Hydra bootstrap
:PROPERTIES:
:HASH:     2a0c5c1c1b196a0ac720a3297df17545
:MODIFIED: 2019-03-08 15:50:43
:END:

Make sure hydra is installed.

#+BEGIN_SRC emacs-lisp
(use-package hydra
  :ensure t)
#+END_SRC

** Window management
:PROPERTIES:
:HASH:     806bb5758f392a3ca70bf08383e72e57
:MODIFIED: 2019-03-08 15:50:43
:END:

*** hydra Window Functions
:PROPERTIES:
:HASH:     49cee86c3193fa0485a86f7b4987a21f
:MODIFIED: 2019-03-08 15:50:43
:END:

The following functions are used in =hydra-window=.

#+BEGIN_SRC emacs-lisp
(defun hydra-move-splitter-left (arg)
  "Move window splitter left."
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'right))
      (shrink-window-horizontally arg)
    (enlarge-window-horizontally arg)))

(defun hydra-move-splitter-right (arg)
  "Move window splitter right."
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'right))
      (enlarge-window-horizontally arg)
    (shrink-window-horizontally arg)))

(defun hydra-move-splitter-up (arg)
  "Move window splitter up."
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'up))
      (enlarge-window arg)
    (shrink-window arg)))

(defun hydra-move-splitter-down (arg)
  "Move window splitter down."
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'up))
      (shrink-window arg)
    (enlarge-window arg)))
#+END_SRC

*** hydra-window
:PROPERTIES:
:HASH:     95d76987d76100cbdfb620b1d0a0e5f8
:MODIFIED: 2019-03-08 15:50:43
:END:

From [[https://github.com/abo-abo/hydra/wiki/Window-Management][the wiki]].

#+BEGIN_SRC emacs-lisp
  (defhydra hydra-window (global-map "<f5>")
    "
  Movement^^        ^Split^         ^Switch^            ^Resize^
  ----------------------------------------------------------------
  _h_ ←            _v_ertical          _b_uffer         _q_ X←
  _j_ ↓            _x_ horizontal      _f_ind files     _w_ X↓
  _k_ ↑            _z_ undo            _a_ce 1          _e_ X↑
  _l_ →            _Z_ reset           _s_wap           _r_ X→
  _F_ollow         _D_lt Other         _S_ave        max_i_mize
  _SPC_ cancel     _o_nly this         _d_elete    zoom _I_n
                                             ^^^^^^zoom _O_ut
  "
    ("h" windmove-left)
    ("j" windmove-down)
    ("k" windmove-up)
    ("l" windmove-right)
    ("q" hydra-move-splitter-left)
    ("w" hydra-move-splitter-down)
    ("e" hydra-move-splitter-up)
    ("r" hydra-move-splitter-right)
    ("b" helm-mini)
    ("f" helm-find-files)
    ("F" follow-mode)
    ("a" (lambda ()
           (interactive)
           (ace-window 1)
           (add-hook 'ace-window-end-once-hook
                     'hydra-window/body)))
    ("v" (lambda ()
           (interactive)
           (split-window-right)
           (windmove-right)))
    ("x" (lambda ()
           (interactive)
           (split-window-below)
           (windmove-down)))
    ("s" (lambda ()
           (interactive)
           (ace-window 4)
           (add-hook 'ace-window-end-once-hook
                     'hydra-window/body)))
    ("S" save-buffer)
    ("d" delete-window)
    ("D" (lambda ()
           (interactive)
           (ace-window 16)
           (add-hook 'ace-window-end-once-hook
                     'hydra-window/body)))
    ("o" delete-other-windows)
    ("i" ace-maximize-window)
    ("z" (progn
           (winner-undo)
           (setq this-command 'winner-undo)))
    ("Z" winner-redo)
    ("I" text-scale-increase)
    ("O" text-scale-decrease)
    ("SPC" nil))
     ;("SPC" hydra-pop "exit" :color "blue"))

  (global-set-key (kbd "C-c M-v") 'hydra-window/body)
#+END_SRC

** Dired
:PROPERTIES:
:HASH:     231e61f79b39583572eaa6a12cc0e9e8
:MODIFIED: 2019-03-08 15:50:43
:END:

#+BEGIN_SRC emacs-lisp
(defhydra hydra-dired (:hint nil :color pink)
  "
_+_ mkdir          _v_iew           _m_ark             _(_ details        _i_nsert-subdir    wdired
_C_opy             _O_ view other   _U_nmark all       _)_ omit-mode      _$_ hide-subdir    C-x C-q : edit
_D_elete           _o_pen other     _u_nmark           _l_ redisplay      _w_ kill-subdir    C-c C-c : commit
_R_ename           _M_ chmod        _t_oggle           _g_ revert buf     _e_ ediff          C-c ESC : abort
_Y_ rel symlink    _G_ chgrp        _E_xtension mark   _s_ort             _=_ pdiff
_S_ymlink          ^ ^              _F_ind marked      _._ toggle hydra   \\ flyspell
_r_sync            ^ ^              ^ ^                ^ ^                _?_ summary
_z_ compress-file  _A_ find regexp
_Z_ compress       _Q_ repl regexp

T - tag prefix
"
  ("\\" dired-do-ispell)
  ("(" dired-hide-details-mode)
  (")" dired-omit-mode)
  ("+" dired-create-directory)
  ("=" diredp-ediff)         ;; smart diff
  ("?" dired-summary)
  ("$" diredp-hide-subdir-nomove)
  ("A" dired-do-find-regexp)
  ("C" dired-do-copy)        ;; Copy all marked files
  ("D" dired-do-delete)
  ("E" dired-mark-extension)
  ("e" dired-ediff-files)
  ("F" dired-do-find-marked-files)
  ("G" dired-do-chgrp)
  ("g" revert-buffer)        ;; read all directories again (refresh)
  ("i" dired-maybe-insert-subdir)
  ("l" dired-do-redisplay)   ;; relist the marked or singel directory
  ("M" dired-do-chmod)
  ("m" dired-mark)
  ("O" dired-display-file)
  ("o" dired-find-file-other-window)
  ("Q" dired-do-find-regexp-and-replace)
  ("R" dired-do-rename)
  ("r" dired-do-rsynch)
  ("S" dired-do-symlink)
  ("s" dired-sort-toggle-or-edit)
  ("t" dired-toggle-marks)
  ("U" dired-unmark-all-marks)
  ("u" dired-unmark)
  ("v" dired-view-file)      ;; q to exit, s to search, = gets line #
  ("w" dired-kill-subdir)
  ("Y" dired-do-relsymlink)
  ("z" diredp-compress-this-file)
  ("Z" dired-do-compress)
  ("q" nil)
  ;("." hydra-pop "exit" :color "blue"))
  ("." nil))

(define-key dired-mode-map "." 'hydra-dired/body)
#+END_SRC

** Projectile
:PROPERTIES:
:HASH:     77b5bebd844757199261241a0c5701ff
:MODIFIED: 2019-03-08 15:50:43
:END:

For projectile fun:

#+BEGIN_SRC emacs-lisp
(defhydra hydra-projectile-other-window (:color teal)
  "projectile-other-window"
  ("f"  projectile-find-file-other-window        "file")
  ("g"  projectile-find-file-dwim-other-window   "file dwim")
  ("d"  projectile-find-dir-other-window         "dir")
  ("b"  projectile-switch-to-buffer-other-window "buffer")
  ("q"  hydra-pop                                "exit"))
  ;("q"  nil                                      "cancel" :color "blue"))

(defhydra hydra-projectile (:color teal
                            :hint nil)
  "
     PROJECTILE: %(projectile-project-root)

     Find File            Search/Tags          Buffers                Cache
------------------------------------------------------------------------------------------
  _F_: file            _R_: ripgrep           _i_: Ibuffer           _c_: cache clear
 _ff_: file dwim       _g_: update gtags      _b_: switch to buffer  _x_: remove known project
 _fd_: file curr dir   _o_: multi-occur       _K_: Kill all buffers  _X_: cleanup non-existing
  _r_: recent file            ^^              _s_: Switch project    _z_: cache current
  _d_: dir

"
  ("b"   projectile-switch-to-buffer)
  ("c"   projectile-invalidate-cache)
  ("d"   projectile-find-dir)
  ("F"   projectile-find-file)
  ("ff"  projectile-find-file-dwim)
  ("fd"  projectile-find-file-in-directory)
  ("g"   ggtags-update-tags)
  ("s-g" ggtags-update-tags)
  ("i"   projectile-ibuffer)
  ("K"   projectile-kill-buffers)
  ("s-k" projectile-kill-buffers)
  ("m"   projectile-multi-occur)
  ("o"   projectile-multi-occur)
  ("s-p" projectile-switch-project "switch project")
  ("p"   projectile-switch-project)
  ("s"   projectile-switch-project)
  ("R"   projectile-ripgrep)
  ("r"   projectile-recentf)
  ("x"   projectile-remove-known-project)
  ("X"   projectile-cleanup-known-projects)
  ("z"   projectile-cache-current-file)
  ("`"   hydra-projectile-other-window/body "other window")
  ;("q"   hydra-pop "exit" :color "blue"))
  ("q"   nil "cancel"))
#+END_SRC

** Magit
:PROPERTIES:
:HASH:     e1458d1eda5888068c5ba4dd22240087
:MODIFIED: 2019-03-08 15:50:43
:END:

#+BEGIN_SRC emacs-lisp
(defun matcha-magit-dir ()
  "Return `magit-toplevel' if `magit' is loaded, otherwise."
  (if (featurep 'magit)
      (magit-toplevel)
    "Not yet loaded."))

(defun matcha-magit-status-pick-repository ()
  "Calls `magit-status' with a prefix argument to allow picking the repository."
  (interactive)
  (let ((current-prefix-arg '(4))) ; C-u
    (call-interactively 'magit-status)))

(defun matcha-magit-status-or-switch-buffer ()
  "Switch to existing `magit-status' without updating or run `magit-status'.
If `magit' is not yet loaded yet, just call `magit-status' directly."
  (interactive)
  (if (not (featurep 'magit))
      (magit-status-internal default-directory)
    (if-let (magit-buffer
             (magit-mode-get-buffer
              #'magit-status-mode nil nil
              (magit-buffer-lock-value #'magit-status-mode nil)))
        (switch-to-buffer magit-buffer)
      (magit-status-internal default-directory))))

(defhydra hydra-magit-log (:color "blue" :hint nil)
  "
   Magit Log: %s(matcha-magit-dir)
    File                       Branch                  Reflog
  ------------------------------------------------------------------------------
    _f_ Current File         _p_ Pick Branch            _P_ Pick Branch
    _F_ Current File Popup   _c_ Current Branch         _C_ Current Branch
    _u_ Unmerged Commits     _h_ Head Branch            _H_ Head Branch
                           ^^_o_ Local + Head
                           ^^_a_ Local + Remote + Head
                           ^^_A_ Everything
"
  ("f" magit-log-buffer-file)
  ("F" magit-log-buffer-file-popup)
  ("u" magit-cherry)
  ("p" magit-log-other)
  ("c" magit-log-current)
  ("h" magit-log-head)
  ("o" magit-log-branches)
  ("a" magit-log-all-branches)
  ("A" magit-log-all)
  ("P" magit-reflog)
  ("C" magit-reflog-current)
  ("H" magit-reflog-head)
  ("q" nil))

(defhydra hydra-magit (:color "blue" :hint nil)
  "
   Magit: %s(matcha-magit-dir)
    Status                    Blame                 ?
  ------------------------------------------------------------------------------
    _s_ Status               _b_ Blame               _p_ File Popup
    _g_ Switch to Status     _j_ Blob Next           _d_ Dispatch
    _L_ List Repos           _k_ Blob Previous       _l_ Log
    _r_ Pick Repo
    Search                           Diff            Repository
  ------------------------------------------------------------------------------
    _f_ Find File                _ef_ Ediff Files        ^^_c_ Clone
    _F_ Find File Other Window   _eb_ Ediff Buffers
                               ^^_ed_ Ediff Directories
"
  ("p" magit-file-popup)
  ("d" magit-dispatch-popup)
  ("f" magit-find-file)
  ("F" magit-find-file-other-window)
  ("j" magit-blob-next)
  ("k" magit-blob-previous)
  ("b" magit-blame-addition)
  ("l" matcha-magit-log/body)
  ("L" magit-list-repositories)
  ("r" matcha-magit-status-pick-repository)
  ("g" matcha-magit-status-or-switch-buffer)
  ("s" magit-status)
  ("c" magit-clone)
  ("ef" ediff-files)
  ("eF" ediff-files3)
  ("eb" ediff-buffers)
  ("eB" ediff-buffers3)
  ("ed" ediff-directories)
  ("eD" ediff-directories3)
  ("q" nil))
#+END_SRC

** Notmuch
:PROPERTIES:
:HASH:     2ddb9d79bec19182987b02463a05f17a
:MODIFIED: 2019-03-08 15:50:43
:END:

#+BEGIN_SRC emacs-lisp
(defhydra hydra-notmuch-tree-mode (:color "blue")
  "Tree"
  ("?" (notmuch-tree-close-message-pane-and #'notmuch-help) "Help")
  ("q" notmuch-tree-quit "Quit")
  ("s" notmuch-tree-to-search "Search")
  ("m" (notmuch-tree-close-message-pane-and #'notmuch-mua-new-mail)
   "Compose")
  ("J" (notmuch-tree-close-message-pane-and #'notmuch-jump-search) "Jump")
  ("S" notmuch-search-from-tree-current-query "Search from Query")
  ("|" notmuch-show-pipe-message "Show Pipe Message")
  ("w" notmuch-show-save-attachments "Save Attachments")
  ("v" notmuch-show-view-all-mime-parts "View All Mime Parts")
  ("c" hydra-notmuch-show-stash-command/body "Show Stash Commands")
  ("b" notmuch-show-resend-message "Resend Message")
  ("$" (notmuch-tree-to-message-pane #'notmuch-show-toggle-process-crypto)
   "Process Crypto")
  ("f" (notmuch-tree-close-message-pane-and #'notmuch-show-forward-message)
   "Forward Message")
  ("r" (notmuch-tree-close-message-pane-and #'notmuch-show-reply-sender)
   "Reply To Sender")
  ("R" (notmuch-tree-close-message-pane-and #'notmuch-show-reply) "Reply")
  ("V" (notmuch-tree-close-message-pane-and #'notmuch-show-view-raw-message)
   "View Raw Message")
  ("RET" notmuch-tree-show-message "Show Message")
  ("x" notmuch-tree-quit "Quit")
  ("A" notmuch-tree-archive-thread "Archive Thread")
  ("a" notmuch-tree-archive-message-then-next "Archive Message Then Next")
  ("z" notmuch-tree-to-tree "Tree to Tree")
  ("n" notmuch-tree-next-matching-message "Next Matching Message")
  ("p" notmuch-tree-prev-matching-message "Previous Matching Message")
  ("N" notmuch-tree-next-message "Next Message")
  ("P" notmuch-tree-prev-message "Previous Message")
  ("C-p" notmuch-tree-prev-thread "Previous Thread")
  ("C-n" notmuch-tree-next-thread "Next Thread")
  ("k" notmuch-tag-jump "Tag Jump")
  ("-" notmuch-tree-remove-tag "Remove Tag")
  ("+" notmuch-tree-add-tag "Add Tag")
  ("*" notmuch-tree-tag-thread "Tag Thread")
  ("e" notmuch-tree-resume-message "Resume Message"))

(defhydra hydra-notmuch-search-mode (:color "blue")
  "Search"
  ("J" notmuch-jump-search "Jump Search")
  ("K" notmuch-tag-jump "Tag Jump")
  ("L" notmuch-search-filter "Search Filter")
  ("C" compose-mail-other-frame "Compose Mail Other Frame")
  ("O" notmuch-search-toggle-order "Toggle Order")
  ("R" notmuch-search-reply-to-thread "Reply to Thread")
  ("Z" notmuch-tree-from-search-current-query "Tree from current Query")
  ("a" notmuch-search-archive-thread "Archive Thread")
  ("c" compose-mail "Compose Mail")
  ("d" +notmuch-search-toggle-delete "Toggle Delete")
  ("m" hydra-notmuch-common/body "Common Commands")
  ("n" notmuch-search-next-thread "Next Thread")
  ("o" compose-mail-other-window "Compose Mail Other Window")
  ("p" notmuch-search-previous-thread "Previous Thread")
  ("q" notmuch-bury-or-kill-this-buffer "Bury or Kill Buffer")
  ("r" notmuch-search-reply-to-thread-sender "Reply to Thread Sender")
  ("t" notmuch-search-filter-by-tag "Filter by Tag")
  ("z" hydra-notmuch-search-stash/body "Search Stash Map")
  ("*" notmuch-search-tag-all "Tag All")
  ("-" notmuch-search-remove-tag "Remove Tag")
  ("+" notmuch-search-add-tag "Add Tag")
  ("<" notmuch-search-first-thread "First Thread")
  (">" notmuch-search-last-thread "Last Thread")
  ("RET" notmuch-search-show-thread "Show Thread"))

(defhydra hydra-notmuch-search-stash (:color "blue")
  "Stash"
  ("i" notmuch-search-stash-thread-id "Stash Thread Id")
  ("q" notmuch-stash-query "Stash Query")
  ("?" notmuch-subkeymap-help "Help"))

(defhydra hydra-notmuch-common (:color "blue")
  "Common Commands"
  ("?" notmuch-help "Help")
  ("q" notmuch-bury-or-kill-this-buffer "Bury or Kill Buffer")
  ("s" notmuch-search "Search")
  ("z" notmuch-tree "Tree")
  ("m" notmuch-mua-new-mail "Mua New Mail")
  ("gr" notmuch-refresh-this-buffer "Refresh this Buffer")
  ("gR" notmuch-refresh-all-buffers "Refresh all Buffers")
  ("Z" notmuch-poll-and-refresh-this-buffer "Poll and Refresh this Buffer")
  ("J" notmuch-jump-search "Jump Search"))

(defhydra hydra-notmuch-hello-mode (:color "blue")
  "Hello"
  ("m" hydra-notmuch-common/body "Common Commands"))

(defhydra hydra-notmuch-show-stash-commands (:color "blue")
  "Show Stash Commands"
  ("c" notmuch-show-stash-cc "CC")
  ("d" notmuch-show-stash-date "Date")
  ("F" notmuch-show-stash-filename "Filename")
  ("f" notmuch-show-stash-from "From")
  ("i" notmuch-show-stash-message-id "Message Id")
  ("I" notmuch-show-stash-message-id-stripped "Message Id Stripped")
  ("s" notmuch-show-stash-subject "Subject")
  ("T" notmuch-show-stash-tags "Tags")
  ("t" notmuch-show-stash-to "To")
  ("l" notmuch-show-stash-mlarchive-link "Archive Link")
  ("L" notmuch-show-stash-mlarchive-link-and-go "Archive Link and Go")
  ("G" notmuch-show-stash-git-send-email "Git Send Email")
  ("?" notmuch-subkeymap-help "Help"))

(defhydra hydra-notmuch-show-part (:color "blue")
  "Show Part"
  ("s" notmuch-show-save-part "Save Part")
  ("v" notmuch-show-view-part "View Part")
  ("o" notmuch-show-interactively-view-part "Show Interactively View Part")
  ("|" notmuch-show-pipe-part "Show Pipe Part")
  ("m" notmuch-show-choose-mime-of-part "Show Choose Mime of Part")
  ("?" notmuch-subkeymap-help "Help"))

(defhydra hydra-notmuch-show-mode (:color "blue" :hint nil)
  "
   Show: %(notmuch-show-get-subject)
    ^^Compose^^             ^^Tags^^         ^^Archive Then^^       ^^Misc^^
  ------------------------------------------------------------------------------
  _F_ Forward Open      ^_d_ Delete    ^^_A_ -> Message     ^_l_ Filter Thread
  _R_ Reply             ^_K_ Jump      ^^_a_ Msg Or Thread  ^_m_ Common
  _r_ Reply Sender      ^_-_ Remove    ^^_X_ -> Exit        ^_w_ Save Attachments
  _S_ Resend Message    ^_+_ Add       ^^_x_ Msg Or Exit    ^_._ Attachments
  _e_ Resume Draft      ^_*_ Tag All                      ^^^^^_|_ Pipe
  _f_ Forward Message

    ^^Navigate^^                ^^View^^                ^^Toggle^^
  ------------------------------------------------------------------------------
  _j_ Next Thread         ^^_N_ Next Message      ^^_h_ Headers
  _k_ Previous Thread     ^^_P_ Previous Message  ^^_t_ Truncate Lines
  _n_ Next Message        ^^_V_ Raw Message       ^^_!_ Elide Non Matching
  _p_ Previous Message    ^^_#_ Print Message     ^^_$_ Process Crypto
  _y_ Rewind              ^^_Z_ Tree              ^^_<_ Thread Indentation
  _z_ Advance             ^^_c_ Stash             ^^_T_ All Messages
                                                ^^^^^^^^_RET_ Message
"
  ("l" notmuch-show-filter-thread)
  ("m" hydra-notmuch-common/body)
  ("w" notmuch-show-save-attachments)
  ("." hydra-notmuch-show-part/body)
  ("|" notmuch-show-pipe-message)
  ("F" notmuch-show-forward-open-messages)
  ("R" notmuch-show-reply)
  ("r" notmuch-show-reply-sender)
  ("S" notmuch-show-resend-message)
  ("e" notmuch-show-resume-message)
  ("f" notmuch-show-forward-message)
  ("h" notmuch-show-toggle-visibility-headers)
  ("t" toggle-truncate-lines)
  ("!" notmuch-show-toggle-elide-non-matching)
  ("$" notmuch-show-toggle-process-crypto)
  ("<" notmuch-show-toggle-thread-indentation)
  ("T" notmuch-show-open-or-close-all)
  ("RET" notmuch-show-toggle-message)
  ("d" +notmuch-show-toggle-delete)
  ("K" notmuch-tag-jump)
  ("-" notmuch-show-remove-tag)
  ("+" notmuch-show-add-tag)
  ("*" notmuch-show-tag-all)
  ("A" notmuch-show-archive-thread-then-next)
  ("X" notmuch-show-archive-thread-then-exit)
  ("a" notmuch-show-archive-message-then-next-or-next-thread)
  ("x" notmuch-show-archive-message-then-next-or-exit)
  ("j" notmuch-show-next-thread-show :color red)
  ("k" notmuch-show-previous-thread-show :color red)
  ("n" notmuch-show-next-open-message :color red)
  ("p" notmuch-show-previous-open-message :color red)
  ("y" notmuch-show-rewind)
  ("z" notmuch-show-advance-and-archive)
  ("N" notmuch-show-next-message :color red)
  ("P" notmuch-show-previous-message :color red)
  ("V" notmuch-show-view-raw-message)
  ("#" notmuch-show-print-message)
  ("Z" notmuch-tree-from-show-current-query)
  ("c" hydra-notmuch-show-stash-command/body))

(defun hydra-notmuch-set-launcher ()
  "Set `hydra' launcher for `notmuch'."
  (matcha-set-mode-command
   :mode 'notmuch-hello-mode :command #'hydra-notmuch-hello-mode/body)
  (matcha-set-mode-command
   :mode 'notmuch-show-mode :command #'hydra-notmuch-show-mode/body)
  (matcha-set-mode-command
   :mode 'notmuch-tree-mode :command #'hydra-notmuch-tree-mode/body)
  (matcha-set-mode-command
   :mode 'notmuch-search-mode :command #'hydra-notmuch-search-mode/body))
#+END_SRC

** Org agenda
:PROPERTIES:
:HASH:     c5228c33b74abe44f07d4bc13271c018
:MODIFIED: 2019-03-08 15:50:43
:END:

#+BEGIN_SRC emacs-lisp
(defhydra hydra-org-agenda (:pre (setq which-key-inhibit t)
                                 :post (setq which-key-inhibit nil)
                                 :hint none)
  "
Org agenda (_q_uit)

^Clock^      ^Visit entry^              ^Date^             ^Other^
^-----^----  ^-----------^------------  ^----^-----------  ^-----^---------
_ci_ in      _SPC_ in other window      _ds_ schedule      _gr_ reload
_co_ out     _TAB_ & go to location     _dd_ set deadline  _._  go to today
_cq_ cancel  _RET_ & del other windows  _dt_ timestamp     _gd_ go to date
_cj_ jump    _o_   link                 _+_  do later      ^^
^^           ^^                         _-_  do earlier    ^^
^^           ^^                         ^^                 ^^
^View^          ^Filter^                 ^Headline^         ^Toggle mode^
^----^--------  ^------^---------------  ^--------^-------  ^-----------^----
_vd_ day        _ft_ by tag              _ht_ set status    _tf_ follow
_vw_ week       _fr_ refine by tag       _hk_ kill          _tl_ log
_vt_ fortnight  _fc_ by category         _hr_ refile        _ta_ archive trees
_vm_ month      _fh_ by top headline     _hA_ archive       _tA_ archive files
_vy_ year       _fx_ by regexp           _h:_ set tags      _tr_ clock report
_vn_ next span  _fd_ delete all filters  _hp_ set priority  _td_ diaries
_vp_ prev span  ^^                       ^^                 ^^
_vr_ reset      ^^                       ^^                 ^^
^^              ^^                       ^^                 ^^
"
  ;; Entry
  ("hA" org-agenda-archive-default)
  ("hk" org-agenda-kill)
  ("hp" org-agenda-priority)
  ("hr" org-agenda-refile)
  ("h:" org-agenda-set-tags)
  ("ht" org-agenda-todo)
  ;; Visit entry
  ("o"   link-hint-open-link :exit t)
  ("<tab>" org-agenda-goto :exit t)
  ("TAB" org-agenda-goto :exit t)
  ("SPC" org-agenda-show-and-scroll-up)
  ("RET" org-agenda-switch-to :exit t)
  ;; Date
  ("dt" org-agenda-date-prompt)
  ("dd" org-agenda-deadline)
  ("+" org-agenda-do-date-later)
  ("-" org-agenda-do-date-earlier)
  ("ds" org-agenda-schedule)
  ;; View
  ("vd" org-agenda-day-view)
  ("vw" org-agenda-week-view)
  ("vt" org-agenda-fortnight-view)
  ("vm" org-agenda-month-view)
  ("vy" org-agenda-year-view)
  ("vn" org-agenda-later)
  ("vp" org-agenda-earlier)
  ("vr" org-agenda-reset-view)
  ;; Toggle mode
  ("ta" org-agenda-archives-mode)
  ("tA" (org-agenda-archives-mode 'files))
  ("tr" org-agenda-clockreport-mode)
  ("tf" org-agenda-follow-mode)
  ("tl" org-agenda-log-mode)
  ("td" org-agenda-toggle-diary)
  ;; Filter
  ("fc" org-agenda-filter-by-category)
  ("fx" org-agenda-filter-by-regexp)
  ("ft" org-agenda-filter-by-tag)
  ("fr" org-agenda-filter-by-tag-refine)
  ("fh" org-agenda-filter-by-top-headline)
  ("fd" org-agenda-filter-remove-all)
  ;; Clock
  ("cq" org-agenda-clock-cancel)
  ("cj" org-agenda-clock-goto :exit t)
  ("ci" org-agenda-clock-in :exit t)
  ("co" org-agenda-clock-out)
  ;; Other
  ("q" nil :exit t)
  ("gd" org-agenda-goto-date)
  ("." org-agenda-goto-today)
  ("gr" org-agenda-redo))
#+END_SRC

** Multiple-cursors
:PROPERTIES:
:HASH:     4a5645a305de8acec62e69c94c7b1da0
:MODIFIED: 2019-03-08 15:50:43
:END:

#+BEGIN_SRC emacs-lisp
(defhydra hydra-multiple-cursors (:hint nil)
  "
 Up^^             Down^^           Miscellaneous           % 2(mc/num-cursors) cursor%s(if (> (mc/num-cursors) 1) \"s\" \"\")
------------------------------------------------------------------
 [_p_]   Next     [_n_]   Next     [_l_] Edit lines  [_0_] Insert numbers
 [_P_]   Skip     [_N_]   Skip     [_a_] Mark all    [_A_] Insert letters
 [_M-p_] Unmark   [_M-n_] Unmark   [_s_] Search
 [Click] Cursor at point       [_q_] Quit"
  ("l" mc/edit-lines :exit t)
  ("a" mc/mark-all-like-this :exit t)
  ("n" mc/mark-next-like-this)
  ("N" mc/skip-to-next-like-this)
  ("M-n" mc/unmark-next-like-this)
  ("p" mc/mark-previous-like-this)
  ("P" mc/skip-to-previous-like-this)
  ("M-p" mc/unmark-previous-like-this)
  ("s" mc/mark-all-in-region-regexp :exit t)
  ("0" mc/insert-numbers :exit t)
  ("A" mc/insert-letters :exit t)
  ("<mouse-1>" mc/add-cursor-on-click)
  ;; Help with click recognition in this hydra
  ("<down-mouse-1>" ignore)
  ("<drag-mouse-1>" ignore)
  ("q" nil))
#+END_SRC

** Menu for all hydras
:PROPERTIES:
:HASH:     7dbfffa34939a9c4320ff4a0cfcc291b
:MODIFIED: 2019-03-08 15:50:43
:END:

Remembering keys is hard, so here's a hydra that should add a menu for
other hydras:

#+BEGIN_SRC emacs-lisp
(defvar hydra-stack nil)

(defun hydra-push (expr)
  (push `(lambda () ,expr) hydra-stack))

(defun hydra-pop ()
  (interactive)
  (let ((x (pop hydra-stack)))
    (when x
      (funcall x))))

(defhydra hydra-hydras-menu (:color teal)
  "
     Hydras List
---------------------
_d_:  hydra-dired
_c_:  hydra-multiple-cursors
_pp_: hydra-projectile
_pw_: hydra-projectile-other-window
_w_:  hydra-window
_ml_: hydra-magit-log
_mm_: hydra-magit
_n_:  hydra-notmuch-show-mode
_o_:  hydra-org-agenda

"
  ("d" (progn
         (hydra-dired/body)
         (hydra-push '(hydra-dired/body)))
       "visit hydra-dired")
  ("c" (progn
         (hydra-multiple-cursors/body)
         (hydra-push '(hydra-multiple-cursors/body)))
       "visit hydra-multiple-cursors")
  ("ml" (progn
         (hydra-magit-log/body)
         (hydra-push '(hydra-magit-log/body)))
       "visit hydra-magit-log")
  ("mm" (progn
         (hydra-magit/body)
         (hydra-push '(hydra-magit/body)))
       "visit hydra-magit")
  ("n" (progn
         (hydra-notmuch-show-mode/body)
         (hydra-push '(hydra-notmuch-show-mode/body)))
       "visit hydra-notmuch-show-mode")
  ("o" (progn
         (hydra-org-agenda/body)
         (hydra-push '(hydra-org-agenda/body)))
       "visit hydra-org-agenda")
  ("pp" (progn
         (hydra-projectile/body)
         (hydra-push '(hydra-projectile/body)))
       "visit hydra-projectile")
  ("pw" (progn
         (hydra-projectile-other-window/body)
         (hydra-push '(hydra-projectile-other-window/body)))
       "visit hydra-projectile-other-window")
  ("w" (progn
         (hydra-window/body)
         (hydra-push '(hydra-window/body)))
       "visit hydra-window")
  ("q" hydra-pop "exit" :exit t))

(global-set-key (kbd "C-c h") 'hydra-hydras-menu/body)
#+END_SRC

* Other
:PROPERTIES:
:HASH:     4bad01946f576f1858db6dc458a7ff7a
:MODIFIED: 2019-03-08 15:48:05
:END:

** Kill whitespace when saving
:PROPERTIES:
:HASH:     66c11594d1ca3d8c66d26bc666450a2c
:MODIFIED: 2019-03-08 15:50:43
:END:

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** Rainbow Mode
:PROPERTIES:
:HASH:     29d81b2d98955795e11327fcc95aac1b
:MODIFIED: 2019-03-08 15:50:43
:END:

Rainbow mode changes the background of any color name. This includes
hexidecimal representation of colors.

#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :ensure t)
#+END_SRC

** Spell check
:PROPERTIES:
:HASH:     52f35f299fa2e93aebf493b09bc496af
:MODIFIED: 2019-03-08 15:50:43
:END:

Spell checking with flyspell:

#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :ensure t
  :config
  (add-hook 'text-mode-hook 'flyspell-mode))
#+END_SRC

** File type modes (not =prog-mode= files)
:PROPERTIES:
:HASH:     df94c7c8bff8eae153f792d18ce69f64
:MODIFIED: 2019-03-08 15:50:43
:END:

File types like csv, yaml, etc.

#+BEGIN_SRC emacs-lisp
  (use-package csv-mode
    :ensure t)
#+END_SRC
