
* Intro
:PROPERTIES:
:HASH:     04bdac1d31552fe999997dbdc9f1e313
:MODIFIED: 2019-06-27 21:51:00
:END:

Some conventions:
- General is used for consistent key binding
- Some headings have subheadings titled "Elisp"; these sections
  contain Emacs Lisp code written by me or taken from someone on the
  internet
  - All of these /should/ have a =tm/= prefix; this is not an attempt
    at plagiarism (when stolen from the internet); it is, rather, an
    attempt at consistent namespacing for times when I use
    =describe-fuction= and the like to find
    functions/variables/etc. I've added over time

** Links to interesting configs
:PROPERTIES:
:HASH:     a7c158fe4f1a5dafdd51c1a14f4f9a48
:MODIFIED: [2019-07-03 Wed 00:55]
:END:
:LOGBOOK:
- State "TODO"       from              [2019-06-27 Thu 21:50]
:END:

This section contains links to Emacs configurations that I find
interesting (and that I've probably borrowed from). I've also cloned
them for fear of them disappearing!

*** [[https://github.com/terlar/emacs.d][terlar/emacs.d]]
:PROPERTIES:
:HASH:     699823767c8fb5636efbbf23be897256
:MODIFIED: [2019-07-01 Mon 10:04]
:END:

*** [[https://github.com/sk8ingdom/.emacs.d][sk8ingdom/.emacs.d]]
:PROPERTIES:
:HASH:     010c7e3c9a227ed644b9dcf863455301
:MODIFIED: [2019-07-01 Mon 10:06]
:END:

*** [[https://github.com/purcell/emacs.d][purcell/emacs.d]]
:PROPERTIES:
:HASH:     1441d3ef6f539dc0ade0f61c5da34c80
:MODIFIED: [2019-07-01 Mon 10:06]
:END:



** Table of Contents                                                                                                                                                                                                          :TOC:
:PROPERTIES:
:HASH:     ff42c7a3e59e3f87c9977a731690b225
:MODIFIED: [2019-06-30 Sun 20:51]
:END:

- [[#intro][Intro]]
  - [[#links-to-interesting-configs][Links to interesting configs]]
- [[#bootstrap][Bootstrap]]
  - [[#reorganize-bootstrap-section][Reorganize 'bootstrap' section]]
  - [[#no-littering][No-littering]]
  - [[#load-path][Load path]]
  - [[#elisp][Elisp]]
- [[#make-emacs-friendlier][Make Emacs Friendlier]]
  - [[#key-bindings][Key bindings]]
  - [[#emacs-navigation][Emacs navigation]]
- [[#prog-mode][Prog-mode]]
  - [[#language-modes][Language modes]]
  - [[#complete-any-mode][Complete any mode]]
  - [[#miscellany][Miscellany]]
  - [[#version-control][Version control]]
- [[#mail][Mail]]
  - [[#elisp-1][Elisp]]
  - [[#notmuch][Notmuch]]
  - [[#gnus][Gnus]]
- [[#org-mode][Org-mode]]
  - [[#org-mode-1][Org-mode]]
  - [[#org-journal][Org-journal]]
  - [[#org-agenda][Org-agenda]]
  - [[#org-capture][Org-capture]]
  - [[#blog-publishing][Blog Publishing]]
- [[#shell-and-term-modes][Shell and Term Modes]]
  - [[#term-mode][Term-mode]]
  - [[#eshell][Eshell]]
  - [[#sshgpg-keys][SSH/GPG keys]]
- [[#hydra][Hydra]]
  - [[#hydra-bootstrap][Hydra bootstrap]]
  - [[#window-management][Window management]]
  - [[#dired][Dired]]
  - [[#projectile][Projectile]]
  - [[#magit][Magit]]
  - [[#notmuch-1][Notmuch]]
  - [[#org-agenda-1][Org agenda]]
  - [[#multiple-cursors][Multiple-cursors]]
  - [[#straightel][Straight.el]]
  - [[#gnus-1][Gnus]]
  - [[#menu-for-all-hydras][Menu for all hydras]]
- [[#other][Other]]
  - [[#kill-whitespace-when-saving][Kill whitespace when saving]]
  - [[#rainbow-mode][Rainbow Mode]]
  - [[#spell-check][Spell check]]
  - [[#file-type-modes-not-prog-mode-files][File type modes (not =prog-mode= files)]]

* Bootstrap
:PROPERTIES:
:HASH:     81c35aa54b506d25c88189f9ccdcf49e
:MODIFIED: 2019-06-28 13:21:15
:END:
:LOGBOOK:
- State "TODO"       from              [2019-06-27 Thu 21:48]
:END:

** TODO Reorganize 'bootstrap' section                               :easy:
:PROPERTIES:
:HASH:     c58e73ec2378bc247ab7ba67fd0c515b
:MODIFIED: 2019-06-28 16:38:43
:END:
:LOGBOOK:
- State "TODO"       from              [2019-06-28 Fri 13:20]
:END:

Break this section apart and get rid of it. Boot strap code has been
moved to =init.el=.

** No-littering
:PROPERTIES:
:HASH:     c4c0fa8013873f91e5134fc9257ff3a7
:MODIFIED: 2019-06-21 12:24:17
:END:

Keep files we don't manage from accumulating in =~/.emacs.d/=:

#+BEGIN_SRC emacs-lisp
  ;; Surely there's a better way...
  (use-package recentf)

  (use-package no-littering
    :config
    (add-to-list 'recentf-exclude no-littering-var-directory)
    (add-to-list 'recentf-exclude no-littering-etc-directory)
    ;; One of the most common types of files that Emacs creates
    ;; automatically is auto-save files. By default, these appear in the
    ;; current directory of a visited file. No-littering does not change
    ;; this, but you can add the following code to your init.el file to
    ;; store these files in the var directory:
    (setq auto-save-file-name-transforms
          `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
    ;; Tell `custom' to save its state under ~/.emacs.d/etc/
    (setq custom-file (no-littering-expand-etc-file-name "custom.el"))
    ;; Put history file in ~/.emacs.d/var/
    (setq savehist-file (no-littering-expand-var-file-name "history")))
#+END_SRC

** Load path
:PROPERTIES:
:HASH:     d8e0bd6c649de49b656336b237438d72
:MODIFIED: 2019-03-08 15:50:42
:END:

*** Elisp
:PROPERTIES:
:HASH:     2962e4541e9a12c921dc2471bf7ee31b
:MODIFIED: 2019-03-08 15:50:42
:END:

Add non-package provided Elisp to Emacs's =load-path=:

#+BEGIN_SRC emacs-lisp
  (let ((default-directory "~/.emacs.d/lisp/"))
    (normal-top-level-add-subdirs-to-load-path))
#+END_SRC

** Elisp
:PROPERTIES:
:HASH:     3ad9dc346355d4076623d1fabda317b4
:MODIFIED: 2019-06-20 10:14:25
:END:

Simple pgrep using only Emacs Lisp functions:

#+BEGIN_SRC emacs-lisp
  (defun tm/pgrep (string)
    "Search process list for any process name matching STRING."

    (interactive "sProcess name: ")
    (let (pid-list)
      ;; Gets a list of PIDs and constructs a list of lists containing
      ;; attribute alists for each process.
      (dolist (pid (list-system-processes) pid-list)
        (setq pid-list (cons (process-attributes pid) pid-list)))
      ;; Looks for STRING in PID-LIST and returns PID.
      (dolist (proc pid-list)
        (if (string-match-p (regexp-quote string)
                            (cdr (assoc-string 'args proc)))
            (message (cdr (assoc 'args proc)))
          nil))))
#+END_SRC

Function for finding and printing color and its complement:

#+BEGIN_SRC emacs-lisp
  (defun tm/complement-for-color-at-point ()
    "Return color name for complement of color name at point."
    (interactive)
    (with-current-buffer (buffer-name)
      (let* ((complement-rgb-value
              (color-complement (thing-at-point 'word t)))
             (red (car complement-rgb-value))
             (blue (car (cdr complement-rgb-value)))
             (green (car (cdr (cdr complement-rgb-value))))
             (complement (color-rgb-to-hex red blue green))
             (color (thing-at-point 'word t)))
        (message "%s" (propertize complement
                                  'face
                                  `(:foreground ,(color-darken-name color 40)
                                    :background ,complement))))))
#+END_SRC

* Make Emacs Friendlier
:PROPERTIES:
:HASH:     2e091ba324c4ad4bb9d9a18c3357c6eb
:MODIFIED: 2019-03-08 15:48:05
:END:

** Key bindings
:PROPERTIES:
:HASH:     065b29dcb7f339c8b012d7309865c245
:MODIFIED: 2019-03-08 15:49:53
:END:

*** General.el
:PROPERTIES:
:HASH:     de8caab6e5ed1bad7d2d5572bce47956
:MODIFIED: 2019-06-28 16:36:54
:END:

Install [[https://github.com/noctuid/general.el#about][general.el]] for key bindings:

#+BEGIN_SRC emacs-lisp
  (use-package general
    :config
    (general-evil-setup t)
    (general-override-mode)
    (general-auto-unbind-keys)
    (general-create-definer tm/leader-def
      :states '(normal motion visual emacs insert)
      :keymaps '(local override)
      :prefix "SPC"
      :non-normal-prefix "M-SPC"
      :prefix-command 'tm/prefix-command
      :prefix-map 'tm/prefix-map))
#+END_SRC

*** Evil mode
:PROPERTIES:
:HASH:     c8b8fee532d4ce52428f1d66d23d23d6
:MODIFIED: 2019-06-28 16:36:54
:END:

Install =evil= for =vi= style editing:

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-want-keybinding nil)
    :general
    (general-define-key :states '(normal motion)
                        :keymaps '(local override)
                        "/" 'swiper)
    :config
    (evil-mode 1))
#+END_SRC

**** =evil-collection=
:PROPERTIES:
:HASH:     50b488caed4b9c98c7e65aad9f1f9de7
:MODIFIED: 2019-03-10 19:04:45
:END:

#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :custom
    (evil-collection-company-use-tng nil)
    (evil-collection-setup-minibuffer t)
    (evil-collection-term-sync-state-and-mode-p t)
    :init
    (evil-collection-init))
#+END_SRC

*** Which-key
:PROPERTIES:
:HASH:     d2f64c42a8c8c8df1dc2b22eff1476ff
:MODIFIED: 2019-06-28 13:16:14
:END:

After pressing a prefix key and waiting a short time, [[https://github.com/justbur/emacs-which-key][which-key]]
provides a pop-up for possible completion candidates.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    ;; :general
    ;; (tm/leader-def
    ;;   :infix "k"
    ;;   :prefix-command 'tm/key-prefix-command
    ;;   :prefix-map 'tm/key-prefix-map
    ;;   "" '(:which-key "key? prefix" :ignore t)
    ;;   "t" 'which-key-show-top-level
    ;;   "m" 'which-key-show-major-mode)
    :config
    (which-key-mode))
#+END_SRC

**** TODO Bind =which-key-show-top-level= and =which-key-show-major-mode= :easy:
:PROPERTIES:
:HASH:     f302a44988f71a2b9482ff3808b51e0d
:MODIFIED: 2019-06-28 16:39:09
:END:
:LOGBOOK:
- State "TODO"       from              [2019-06-28 Fri 13:13]
:END:

** Emacs navigation
:PROPERTIES:
:HASH:     4779231949f3e304a921508cb6807dfa
:MODIFIED: 2019-03-08 15:49:53
:END:

Navigating in Emacs can be challenging. In this section, we'll make
changes that provide more sane methods for dealing with windows,
buffers, etc.

*** Buffer management
:PROPERTIES:
:HASH:     03fdec9f79386f840a45fca23a55cdfc
:MODIFIED: 2019-06-25 09:12:41
:END:

=ibuffer= provides a menu for manipulating buffers.

#+BEGIN_SRC emacs-lisp
  (use-package ibuffer
    :general
    (tm/leader-def
      "B" 'ibuffer)
    :config
    (autoload 'ibuffer "ibuffer" "List buffers." t))
#+END_SRC

*** Lines, cursors, marks, etc.
:PROPERTIES:
:HASH:     0c308dd41f3dd35f05947ea71ca2bee3
:MODIFIED: 2019-03-08 15:50:42
:END:

**** Cursor
:PROPERTIES:
:HASH:     f956c3255606265e0871ead39be8308a
:MODIFIED: 2019-06-27 21:57:58
:END:

Highlight line containing cursor:

#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :straight t
    :init
    (global-hl-line-mode -1)
    (beacon-mode 1)
    (setq beacon-color "#503450")
    (setq beacon-blink-when-focused t))
#+END_SRC

Multiple cursors for editing more than one line at the same time:

#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :general
    (tm/leader-def
      :infix "M"
      :prefix-command 'tm/multiple-cursor-prefix-command
      "" '(:which-key "multiple-cursors prefix" :ignore t)
      "c" 'mc/edit-lines
      ">" 'mc/mark-next-like-this
      "<" 'mc/mark-previous-like-this
      "C-<" 'mc/mark-all-like-this)
    :init
    (require 'multiple-cursors))
#+END_SRC

**** Indentation
:PROPERTIES:
:HASH:     aad2b05c9d58333e1305072dcb986555
:MODIFIED: 2019-06-28 13:20:23
:END:
:LOGBOOK:
- State "TODO"       from              [2019-06-27 Thu 21:53]
:END:

Update =hook= configuration.

Install =highlight-indent-guides= for indentation indicators in
=prog-mode=:

#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :hook
    (prog-mode . highlight-indent-guides-mode)
    :init
    (setq highlight-indent-guides-method 'column))
#+END_SRC

**** Avy
:PROPERTIES:
:HASH:     7dfdcdd366b80970950a29ea29aa073b
:MODIFIED: 2019-03-12 10:09:59
:END:

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :general
    (tm/leader-def
      :infix "a"
      :prefix-command 'tm/avy-prefix-command
      :prefix-map 'tm/avy-prefix-map
      "" '(:which-key "avy prefix" :ignore t)
      "a" 'avy-goto-char))
#+END_SRC

*** Window management
:PROPERTIES:
:HASH:     24ef076bad6be26be2c5115f0cd6099b
:MODIFIED: 2019-03-08 15:50:42
:END:

**** Undo/redo window layout changes
:PROPERTIES:
:HASH:     cc9b91036ddf2eb307c3b760a25e78a0
:MODIFIED: 2019-06-25 09:12:41
:END:

From =winner-mode= docstring:

#+BEGIN_QUOTE
Winner mode is a global minor mode that records the changes in
the window configuration (i.e. how the frames are partitioned
into windows) so that the changes can be "undone" using the
command ‘winner-undo’.  By default this one is bound to the key
sequence ‘C-c <left>’.  If you change your mind (while undoing),
you can press ‘C-c <right>’ (calling ‘winner-redo’).
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (use-package winner
    :general
    (tm/leader-def
      :infix "w"
      :prefix-command 'tm/window-prefix-command
      :prefix-map 'tm/window-prefix-map
      "" '(:which-key "window prefix" :ignore t)
      "u" 'winner-undo
      "C-r" 'winner-redo)
    :config
    (winner-mode 1))
#+END_SRC

**** Workspace management
:PROPERTIES:
:HASH:     456b5176ecad1485123fc5f66ef042d9
:MODIFIED: 2019-06-21 12:29:11
:END:

Install =eyebrowse= for i3 style workspace management:

#+BEGIN_SRC emacs-lisp
  (use-package eyebrowse
    :preface
    (defun tm/eyebrowse-dash ()
      (switch-to-buffer
       (get-buffer "*dashboard*")))
    :general
    (tm/leader-def
      :infix "e"
      :prefix-command 'tm/eyebrowse-prefix-command
      "" '(:ignore t :which-key "eyebrowse prefix")
      "s" 'eyebrowse-switch-to-window-config
      "l" 'eyebrowse-next-window-config
      "h" 'eyebrowse-prev-window-config
      "r" 'eyebrowse-rename-window-config
      "c" 'eyebrowse-close-window-config
      "'" 'eyebrowse-last-window-config
      "0" 'eyebrowse-switch-to-window-config-0
      "1" 'eyebrowse-switch-to-window-config-1
      "2" 'eyebrowse-switch-to-window-config-2
      "3" 'eyebrowse-switch-to-window-config-3
      "4" 'eyebrowse-switch-to-window-config-4
      "5" 'eyebrowse-switch-to-window-config-5
      "6" 'eyebrowse-switch-to-window-config-6
      "7" 'eyebrowse-switch-to-window-config-7
      "8" 'eyebrowse-switch-to-window-config-8
      "9" 'eyebrowse-switch-to-window-config-9)
    :init
    (setq eyebrowse-keymap-prefix "")
    (global-unset-key (kbd "C-c C-w"))
    :defer 1
    :config
    (setq eyebrowse-switch-back-and-forth t)
    (setq eyebrowse-wrap-around t)
    (setq eyebrowse-new-workspace 'tm/eyebrowse-dash)
    (eyebrowse-mode))
#+END_SRC

**** Switching/deleting/etc. windows
:PROPERTIES:
:HASH:     e8f7f1ebc020a8b58abb3b7851087a99
:MODIFIED: 2019-06-25 09:12:41
:END:

Install =ace-window= for more sane window management:

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :init
    (custom-set-faces '(aw-leading-char-face
                        ((t (:foreground "red" :height 3.0)))))
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    :general
    (tm/leader-def
      :infix "w"
      :prefix-command 'tm/window-prefix-command
      "" '(:which-key "window prefix" :ignore t )
      "m" 'ace-window
      "d" 'ace-delete-window
      "s" 'ace-swap-window))
#+END_SRC

Add normal Emacs window commands to leader key:

#+BEGIN_SRC emacs-lisp
  (tm/leader-def
    "1" 'delete-other-windows
    "2" 'split-window-below
    "3" 'split-window-right
    "0" 'delete-window)
#+END_SRC

**** [[https://emacs.stackexchange.com/a/32671][=display-buffer= customization]]
:PROPERTIES:
:HASH:     4fec7040991dbb08224656c57dc3f953
:MODIFIED: [2019-07-03 Wed 00:05]
:END:

Quoting a comment on the original question (linked above):

#+begin_quote
Most people aren't interested in opening up the source code -- e.g.,
the cider-stuff -- to customize it to suit their needs. Instead, they
look for simple fixes like customizing the
=display-buffer-alist=. Others just programmatically fix it after the
fact -- e.g., =delete-window= and =switch-to-buffer=,
split-vertically/horizontally, and so forth. And, there are some
additional libraries to help manage the windows and/or revert back to
the prior layout. I prefer the first option -- i.e., modify the source
and make it absolutely perfect, but I am in the rare minority of
people.
#+end_quote

#+begin_src emacs-lisp
  (setq display-buffer-alist
          ;; Help and stuff at the right
          `((,(rx string-start (or "*Apropos"
                                   "*Backtrace"
                                   "*Compile-Log*"
                                   "*Man"
                                   "*Process List*"
                                   "*Python"
                                   "*Warnings*"
                                   "*WoMan"
                                   "*compilation"
                                   "*helpful"
                                   "*Org Agenda*"
                                   (and (0+ anything) ".pdf")
                                   (and (1+ not-newline) " output*"))) ; AUCTeX
             (display-buffer-reuse-window display-buffer-in-side-window)
             (direction . rightmost)
             (side . right)
             (window-width . 80)
             (window-height . 0.45))
            ;; Side window on bottom:
            (,(rx string-start (or "*Calendar"
                                   "*Reconcile"))
             (display-buffer-reuse-window display-buffer-in-side-window)
             (side . bottom)
             (direction . bottom))
            ;; Right side, below the inferior buffer
            ;; (,(rx string-start (or "*help"
            ;;                        "R_x11"))
            ;;  (display-buffer-reuse-window my/display-window-at-right)
            ;;  (window-width . 80))
            ;; Full frame
            ;; (,(rx string-start "magit: ")
            ;;  (display-buffer-reuse-window my/display-buffer-fullframe))
            ;; Right side, above the inferior buffer
            ;; (,(rx string-start "*R dired")
            ;;  (display-buffer-reuse-window display-buffer-in-direction)
            ;;  (direction . rightmost)
            ;;  (side . right)
            ;;  (slot . -1)
            ;;  (window-height . 10))
            ;; Use same window
            (,(rx string-start (or "*Annotate "
                                   "*edit-indirect"
                                   "magit-log: "
                                   "magit-refs: "
                                   "*Org Src"))
             (display-buffer-reuse-window display-buffer-same-window))))
#+end_src

* Prog-mode
:PROPERTIES:
:HASH:     90d4d36e3c0c9c492cefe319acf21374
:MODIFIED: 2019-03-08 15:48:05
:END:

** Language modes
:PROPERTIES:
:HASH:     02c483ea42588716a19c373a00cdf8dd
:MODIFIED: 2019-03-08 15:50:42
:END:

Syntax highlighting, etc.

*** PowerShell
:PROPERTIES:
:HASH:     6d0b1b51582f98fd4b587a53a0ddefbf
:MODIFIED: 2019-06-23 19:35:21
:END:

Powershell syntax highlighting:

#+BEGIN_SRC emacs-lisp
  (use-package powershell)
#+END_SRC

*** =puppet-mode=
:PROPERTIES:
:HASH:     5e5877762f892cb810ae5ad946f42cc3
:MODIFIED: 2019-06-23 19:35:21
:END:

Syntax highlighting for Puppet:

#+BEGIN_SRC emacs-lisp
  (use-package puppet-mode
    :config
    (setq puppet-indent-level 4))
#+END_SRC

*** MarkDown
:PROPERTIES:
:HASH:     6f459b590b191c0a15871bcab723e20c
:MODIFIED: 2019-06-23 19:35:21
:END:

MarkDown syntax highlighting:

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode)
#+END_SRC

Mainly for editing MarkDown in org-mode:

#+BEGIN_SRC emacs-lisp
  (use-package pandoc-mode
    :straight t)
#+END_SRC

*** Fish Mode
:PROPERTIES:
:HASH:     64bbc23574dcc0657a3242aebecb7e6f
:MODIFIED: 2019-06-23 19:35:21
:END:

Sometimes fish one liners become long enough to deserve writing a
script! Fish syntax highlighting:

#+BEGIN_SRC emacs-lisp
  (use-package fish-mode)
#+END_SRC

*** Ruby
:PROPERTIES:
:HASH:     ad8e590959a37d5ae52b449c6ffa930b
:MODIFIED: 2019-06-28 16:46:33
:END:
:LOGBOOK:
- State "TODO"       from              [2019-03-04 Mon 16:51]
:END:

#+BEGIN_SRC emacs-lisp
  (use-package ruby-mode
    :config
    (setq ruby-indent-level 4)
    (eval-after-load "hideshow"
      '(add-to-list
        'hs-special-modes-alist
        `(ruby-mode
          ,(rx (or "def" "class" "module" "do" "{" "[")) ; Block start
          ,(rx (or "}" "]" "end"))		       ; Block end
          ,(rx (or "#" "=begin"))			       ; Comment start
          ruby-forward-sexp nil)))
    :hook
    (ruby-mode . eldoc-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package rubocopfmt
    :straight t
    :config
    (setq rubocopfmt-rubocop-command
          "rubocop"))
#+END_SRC

**** Robe
:PROPERTIES:
:HASH:     4d490bc51a299cc9329b02799c682b10
:MODIFIED: 2019-06-23 19:35:21
:END:

I've had some trouble with this package; mostly because I don't
understand Gemfiles and such. It would probably be worth figuring out
how to make it work. And once that's done, more configuration.

#+BEGIN_QUOTE
Robe is a code assistance tool that uses a Ruby REPL subprocess with
your application or gem code loaded, to provide information about
loaded classes and modules, and where each method is defined.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (use-package robe
    :config
    (add-hook 'ruby-mode-hook 'robe-mode)
    (eval-after-load 'company
    '(push 'company-robe company-backends)))
#+END_SRC

**** TODO Pry in Emacs                                         :moderate:
:PROPERTIES:
:HASH:     e59d32035b7e1e755f252639332c5832
:MODIFIED: 2019-06-28 16:47:43
:END:
:LOGBOOK:
- State "TODO"    from ""        [2019-06-28 Fri 16:00]
:END:

[[https://dev.to/thiagoa/ruby-and-emacs-tip-advanced-pry-integration-33bk][Ruby and Emacs Tip: Advanced Pry Integration]]
**** TODO [[https://github.com/purcell/emacs.d/blob/master/lisp/init-ruby.el][Steve Purcell's Ruby config]]                          :moderate:
:PROPERTIES:
:HASH:     864dad56bae6553bc5161acc55ed8a50
:MODIFIED: 2019-06-28 16:47:20
:END:
:LOGBOOK:
- State "TODO"    from ""        [2019-06-28 Fri 16:01]
:END:
*** Lisp
:PROPERTIES:
:HASH:     3dc42bf01d149bffe6719d0015247e06
:MODIFIED: 2019-06-28 16:47:20
:END:
:LOGBOOK:
- State "TODO"       from              [2019-03-06 Wed 08:45]
:END:

[[http://sachachua.com/blog/2015/04/2015-04-08-emacs-lisp-development-tips-with-john-wiegley/][Notes]] from Sacha Chua and John Wiegly youtube video.

=evil-mode= alternative to paredit:

#+BEGIN_SRC emacs-lisp
  (use-package lispy
      :init
      (add-hook 'emacs-lisp-mode-hook #'lispy-mode)
      (add-hook 'lisp-mode-hook #'lispy-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package lispyville
    :init
    (with-eval-after-load 'lispyville
      (lispyville-set-key-theme
       '(slurp/barf-cp
         mark-toggle)))
    (add-hook 'emacs-lisp-mode-hook #'lispyville-mode)
    (add-hook 'emacs-lisp-mode-hook
              (lambda () (setq-local lisp-indent-function
                                     #'tm/lisp-indent-function)))
    :after (lispy))
#+END_SRC

eldoc mode (stolen from John Wiegley's [[https://github.com/jwiegley/dot-emacs/blob/4e87553c2f2d21e30be885bdfba83b40c4bf0bed/init.el][emacs config]]):

#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :diminish
    :hook ((c-mode-common emacs-lisp-mode) . eldoc-mode))
#+END_SRC

Better paren highlighting with [[https://github.com/tsdh/highlight-parentheses.el][highlight-parentheses]]:

#+BEGIN_SRC emacs-lisp
  (use-package highlight-parentheses
    :init
    (highlight-parentheses-mode 1)
    :hook
    (prog-mode . highlight-parentheses-mode))
#+END_SRC

*** Bash/Shell
:PROPERTIES:
:HASH:     0f716d06eaa31eebe7fb20d76880a08d
:MODIFIED: 2019-06-21 11:43:16
:END:

#+BEGIN_SRC emacs-lisp
  (use-package sh-script
    :config
    (setq sh-basic-offset 2))
#+END_SRC

*** Elisp
:PROPERTIES:
:HASH:     55e5ffb39c78851888a18871af9febf8
:MODIFIED: 2019-03-08 15:50:42
:END:

**** Formatting
:PROPERTIES:
:HASH:     a0d0cf2bb986e44e84f29d791e2501a4
:MODIFIED: 2019-03-08 15:50:42
:END:

***** Indent keywords properly
:PROPERTIES:
:HASH:     57d44d33df95137bc7c45c9ca3e4119c
:MODIFIED: 2019-03-08 15:50:42
:END:

By default, =lisp-indent-function= indents =:keywords= improperly:

#+BEGIN_QUOTE
(:token token
        :token-quality quality)
#+END_QUOTE

To fix this, define a new function to use for =lisp-indent-function=
(solution from [[https://emacs.stackexchange.com/a/10233][here]]):

#+BEGIN_SRC emacs-lisp
  (eval-after-load "lisp-mode"
    '(defun tm/lisp-indent-function (indent-point state)
       "This function is the normal value of the variable `lisp-indent-function'.
  The function `calculate-lisp-indent' calls this to determine
  if the arguments of a Lisp function call should be indented specially.
  INDENT-POINT is the position at which the line being indented begins.
  Point is located at the point to indent under (for default indentation);
  STATE is the `parse-partial-sexp' state for that position.
  If the current line is in a call to a Lisp function that has a non-nil
  property `lisp-indent-function' (or the deprecated `lisp-indent-hook'),
  it specifies how to indent.  The property value can be:
  ,* `defun', meaning indent `defun'-style
    \(this is also the case if there is no property and the function
    has a name that begins with \"def\", and three or more arguments);
  ,* an integer N, meaning indent the first N arguments specially
    (like ordinary function arguments), and then indent any further
    arguments like a body;
  ,* a function to call that returns the indentation (or nil).
    `lisp-indent-function' calls this function with the same two arguments
    that it itself received.
  This function returns either the indentation to use, or nil if the
  Lisp function does not specify a special indentation."
       (let ((normal-indent (current-column))
             (orig-point (point)))
         (goto-char (1+ (elt state 1)))
         (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t)
         (cond
          ;; car of form doesn't seem to be a symbol, or is a keyword
          ((and (elt state 2)
                (or (not (looking-at "\\sw\\|\\s_"))
                    (looking-at ":")))
           (if (not (> (save-excursion (forward-line 1) (point))
                       calculate-lisp-indent-last-sexp))
               (progn (goto-char calculate-lisp-indent-last-sexp)
                      (beginning-of-line)
                      (parse-partial-sexp (point)
                                          calculate-lisp-indent-last-sexp 0 t)))
           ;; Indent under the list or under the first sexp on the same line as
           ;; calculate-lisp-indent-last-sexp.  Note that first thing on that
           ;; line has to be complete sexp since we are inside the innermost
           ;; containing sexp.
           (backward-prefix-chars)
           (current-column))
          ((and (save-excursion
                  (goto-char indent-point)
                  (skip-syntax-forward " ")
                  (not (looking-at ":")))
                (save-excursion
                  (goto-char orig-point)
                  (looking-at ":")))
           (save-excursion
             (goto-char (+ 2 (elt state 1)))
             (current-column)))
          (t
           (let ((function (buffer-substring (point)
                                             (progn (forward-sexp 1) (point))))
                 method)
             (setq method (or (function-get (intern-soft function)
                                            'lisp-indent-function)
                              (get (intern-soft function) 'lisp-indent-hook)))
             (cond ((or (eq method 'defun)
                        (and (null method)
                             (> (length function) 3)
                             (string-match "\\`def" function)))
                    (lisp-indent-defform state indent-point))
                   ((integerp method)
                    (lisp-indent-specform method state
                                          indent-point normal-indent))
                   (method
                    (funcall method indent-point state)))))))))
#+END_SRC

***** TODO Auto align :keywords "value" pairs                     :hard:
:PROPERTIES:
:HASH:     1bc9a1642b235e1e91650cb32456c98f
:MODIFIED: 2019-06-28 16:47:43
:END:
:LOGBOOK:
- State "TODO"       from              [2019-03-06 Wed 08:46]
:END:

**** [[https://github.com/joddie/macrostep][=macrostep=]]
:PROPERTIES:
:HASH:     b4a7b83f046c01b655d75b434fb1335b
:MODIFIED: 2019-06-25 09:24:49
:END:

#+begin_quote
An Emacs minor mode for interactively stepping through the expansion
of macros in Emacs Lisp source code.
#+end_quote

#+begin_src emacs-lisp
  (use-package macrostep
    :general
    (:keymaps 'emacs-lisp-mode-map
     :states '(normal)
     "ze" 'macrostep-expand))
#+end_src

** Complete any mode
:PROPERTIES:
:HASH:     14e4d6fdfb4ea0e5aed932291e100121
:MODIFIED: 2019-06-28 16:47:52
:END:
:LOGBOOK:
- State "TODO"       from              [2019-03-04 Mon 16:51]
:END:

General completion mechanism:

#+BEGIN_SRC emacs-lisp
  (use-package company
    :demand t
    :hook
    (prog-mode . company-mode)
    :preface
    (setq company-idle-delay 0.02))
#+END_SRC

*** Python
:PROPERTIES:
:HASH:     830ae4db84460e98ae5e80b8a31aa48e
:MODIFIED: 2019-06-28 16:48:11
:END:

Python JEDI backend for =company-mode=.

NOTE: Don't forget to install =virtualenv= (=$ pip install
virtualenv=) and run =M-x jedi:install-server=.

#+BEGIN_SRC emacs-lisp
  (use-package company-jedi
    :hook
    (python-mode-hook . tm/python-mode-hook)
    :config
    (defun tm/python-mode-hook ()
      (add-to-list 'company-backends 'company-jedi)))
#+END_SRC
*** TODO [[https://github.com/company-mode/company-mode/issues/180][=company=/=fci-mode= fix]]                                   :easy:
:PROPERTIES:
:HASH:     1a12de9473f4c2ac7ed2de8fbde5dbe1
:MODIFIED: 2019-06-28 16:48:11
:END:
:LOGBOOK:
- State "TODO"    from ""        [2019-06-27 Thu 21:30]
:END:

- Fix for fci-mode causing company popup distortion
** Miscellany
:PROPERTIES:
:HASH:     7f6e06b93f036f5a5456201d1476c5bf
:MODIFIED: 2019-06-28 16:49:17
:END:
:LOGBOOK:
- State "TODO"       from              [2019-03-05 Tue 11:15]
:END:

*** TODO Rename section or possibly break apart                     :easy:
:PROPERTIES:
:HASH:     489ffb334abc5104f0fd06d6ff75a241
:MODIFIED: 2019-06-28 16:49:26
:END:
:LOGBOOK:
- State "TODO"       from              [2019-06-28 Fri 16:48]
:END:

*** =hl-todo=
:PROPERTIES:
:HASH:     f36a1bfc1afe2df6b2ebfca7a208284e
:MODIFIED: 2019-06-23 19:35:21
:END:

Highlight TODO and other keywords in comments:

#+BEGIN_SRC emacs-lisp
  (use-package hl-todo
    :config
    (global-hl-todo-mode t))
#+END_SRC

*** =yasnippet=
:PROPERTIES:
:HASH:     495aae264006cd9fab2bf870890dcf89
:MODIFIED: 2019-06-28 16:50:29
:END:

Use yasnippet. Configure it.

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
    (yas-global-mode 1))
#+END_SRC

**** TODO Research and take notes on =yasnippet='s usefulness  :moderate:
:PROPERTIES:
:HASH:     a0ce21445ba2b0cd532c0b033be25bb5
:MODIFIED: 2019-06-28 16:50:44
:END:
:LOGBOOK:
- State "TODO"       from              [2019-06-28 Fri 16:49]
:END:

*** Code folding
:PROPERTIES:
:HASH:     a2c73c4d2db192f738abc62618f7ea1d
:MODIFIED: 2019-06-26 13:54:04
:END:

**** =yafolding=
:PROPERTIES:
:HASH:     0103d0ee10d1560b3bf95ba6527e432c
:MODIFIED: 2019-06-26 13:54:04
:END:

Code folding (based stupidly on indentation):

#+BEGIN_SRC emacs-lisp
  (use-package yafolding
    :config
    (add-to-list 'evil-fold-list
                 '((yafolding-mode)
                   :open-all yafolding-toggle-all
                   :close-all yafolding-toggle-all
                   :toggle yafolding-toggle-element))
    (add-hook 'prog-mode-hook (lambda () (yafolding-mode))))
#+END_SRC

**** =hs-minor-mode=
:PROPERTIES:
:HASH:     41bdc46d0a5a8badd9708938d066117c
:MODIFIED: 2019-06-26 13:54:04
:END:

Sources:

[[https://gist.github.com/jgomo3/2046f7f1da8110b163dd7690531d454f][hs-special-modes-alist]]
[[https://github.com/abo-abo/hydra/wiki/Emacs#hideshow-mode-for-code-folding][hydra-hs]]

#+begin_src emacs-lisp
  (use-package hs-minor-mode
    :straight nil
    :general
    (tm/leader-def
      :infix "TAB"
      :prefix-command 'tm/hideshow-prefix-command
      :prefix-map 'tm/hideshow-prefix-map
      "" '(:which-key "hideshow prefix" :ignore t)
      "s" 'hs-show-all
      "h" 'hs-hide-all
      "B" 'hs-show-block
      "b" 'hs-hide-block
      "t" 'hs-toggle-hiding
      "l" 'hs-hide-level)
    :hook
    (prog-mode . hs-minor-mode))
#+end_src

*** Linting an syntax checking
:PROPERTIES:
:HASH:     96753080bed1051fdec6e131bb9bdd2d
:MODIFIED: 2019-06-23 19:35:21
:END:

Syntax checking:

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :config
    (add-hook 'after-init-hook #'global-flycheck-mode)

    ;; Config for RuboCop
    (setq flycheck-rubocoprc "/home/tminor/.config/rubocop/.rubocop.yml")

    ;; Config for Puppet lint
    (setq flycheck-puppet-lint-rc "/home/tminor/.puppet-lint.rc")
    ;; Sets path to most recent puppet executable.
    (setq flycheck-puppet-parser-executable "/home/tminor/.gem/ruby/gems/puppet-6.5.0/bin/puppet"))
#+END_SRC

*** =rainbow-delimiters=
:PROPERTIES:
:HASH:     0ffde1297e521a78dbe4d7ba17c8bf26
:MODIFIED: 2019-06-23 19:35:21
:END:

This makes hunting down paren pairs easier in Elisp:

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

*** =fill-column-indicator=
:PROPERTIES:
:HASH:     b7b3465dde051b354aad60dc2bef2c2c
:MODIFIED: 2019-06-23 19:35:21
:END:

#+BEGIN_SRC emacs-lisp
  (use-package fill-column-indicator
    :straight t
    :hook
    (prog-mode . fci-mode))
#+END_SRC

** Version control
:PROPERTIES:
:HASH:     8d9a5fb1f24539513aa7494f92caaf48
:MODIFIED: 2019-03-08 15:50:43
:END:

*** Magit
:PROPERTIES:
:HASH:     f1f7d04aba25dab05cea78b048cbdf5a
:MODIFIED: 2019-06-23 19:35:21
:END:

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :general
    (tm/leader-def
      :infix "m"
      :prefix-command 'tm/magit-prefix-command
      :prefix-map 'tm/magit-prefix-map
      "" '(:which-key "magit prefix" :ignore t)
      "B" 'tm/magit-blame-toggle
      "C" 'magit-clone
      "L" 'magit-log-buffer-file
      "a" 'magit-submodule-add
      "b" 'magit-branch
      "c" 'magit-checkout
      "f" 'magit-find-file
      "l" 'magit-log-all
      "s" 'magit-status
      "p" 'magit-file-popup)
    :config
    (setq magit-diff-refine-hunk t
          auto-revert-check-vc-info t
          git-commit-summary-max-length 50
          git-commit-major-mode 'org-mode))
#+END_SRC

**** [[https://github.com/alphapapa/magit-todos][=magit-todos=]]
:PROPERTIES:
:HASH:     8282e1e45bcba018e0d3076e157d4f1f
:MODIFIED: 2019-06-27 21:41:58
:END:
:LOGBOOK:
- State "TODO"    from ""        [2019-06-26 Wed 14:25]
:END:

#+begin_quote
This package displays keyword entries from source code comments and
Org files in the Magit status buffer.
#+end_quote

#+begin_src emacs-lisp
  (use-package magit-todos
    :hook
    (prog-mode . magit-todos-mode)
    (org-mode . magit-todos-mode))
#+end_src

**** [[https://github.com/emacs-evil/evil-magit][=evil-magit=]]
:PROPERTIES:
:HASH:     47f88cbb28f2e462c16a164006af3196
:MODIFIED: 2019-06-29 11:46:29
:END:

#+begin_quote
This library configures Magit and Evil to play well with each other.
#+end_quote

#+begin_src emacs-lisp
  (use-package evil-magit
    :init
    (setq evil-magit-use-y-for-yank nil))
#+end_src

**** TODO Tweak magit =display-buffer=                             :hard:
:PROPERTIES:
:HASH:     5e647e092f3a059f6865b1268b638456
:MODIFIED: 2019-06-28 16:50:44
:END:
:LOGBOOK:
- State "TODO"    from ""        [2019-06-26 Wed 14:26]
:END:

=magit-display-*=
**** TODO Change face for hunks
:PROPERTIES:
:HASH:     360de633bc7e82d40aef6ae7d1927f51
:MODIFIED: 2019-06-29 12:18:15
:END:
:LOGBOOK:
- State "TODO"    from ""        [2019-06-29 Sat 12:17]
:END:
*** Elisp
:PROPERTIES:
:HASH:     e93f4e70a579e1e0cc61e2310499a079
:MODIFIED: 2019-03-08 15:50:43
:END:

From [[https://github.com/dieggsy/dotfiles/blob/master/emacs.d/init.org#functions-7][here]]:

#+BEGIN_SRC emacs-lisp
  (defun d/magit-blame-toggle ()
    "Toggle magit-blame-mode on and off interactively.

  Source: https://git.io/vQKub"
    (interactive)
    (if (bound-and-true-p magit-blame-mode)
        (magit-blame-quit)
      (call-interactively 'magit-blame)))
#+end_src

* Mail
:PROPERTIES:
:HASH:     77e2ccb28c4429b559d2716250583790
:MODIFIED: 2019-03-08 14:47:24
:END:

** Elisp
:PROPERTIES:
:HASH:     ba12765916563b3f00515d61783c7933
:MODIFIED: 2019-03-08 15:50:43
:END:

*** Refresh specified buffer
:PROPERTIES:
:HASH:     126d4867987bee8fb6a59afa59a66f85
:MODIFIED: 2019-06-03 17:06:34
:END:

#+BEGIN_SRC emacs-lisp
  (defun tm/notmuch-refresh-feed-buffer ()
    "Invoke `notmuch-refresh-this-buffer' specified buffer.

  The buffer is silently refreshed, i.e. they are not forced to
  be displayed."
    (interactive)
    (dolist (buffer (buffer-list))
      (let ((buffer-mode (buffer-local-value 'major-mode buffer)))
        (with-current-buffer buffer
          (when (and (memq buffer-mode '(notmuch-show-mode
                                         notmuch-tree-mode
                                         notmuch-search-mode
                                         notmuch-hello-mode))
                     (string= (buffer-name) "*notmuch-saved-search-feed*"))
            (notmuch-refresh-this-buffer))))))
#+END_SRC

*** Setting faces
:PROPERTIES:
:HASH:     c5941e1d0eb532b3955ca2a7efb0488b
:MODIFIED: 2019-03-08 18:04:39
:END:

#+BEGIN_SRC emacs-lisp
  (defun tm/set-feed-faces ()
    (if (string= (buffer-name) "*notmuch-saved-search-feed*")
        (progn
          (setq notmuch-search-line-faces '(("git-commits" . '(:foreground "green"))
                                            ("nagios" . '(:foreground "red"))
                                            ("servicenow" . '(:foreground "yellow"))
                                            ("tenshi-uga" . '(:foreground "DodgerBlue1"))
                                            ("tenshi-db300" . '(:foreground "DodgerBlue1"))
                                            ("ssladmin" . '(:foreground "pink"))
                                            ("unread" . '(:background "gray15"))))
          (make-local-variable 'notmuch-search-line-faces))
      (setq notmuch-search-line-faces
            '(("unread" . notmuch-search-unread-face)
              ("flagged" . notmuch-search-flagged-face)))))
#+END_SRC

*** Sending
:PROPERTIES:
:HASH:     bfd4e36f7b78a41304a0ffaf94d8641e
:MODIFIED: 2019-03-08 15:50:43
:END:

**** Signatures
:PROPERTIES:
:HASH:     bcca16c42b05160ca1f0157b0d3c44db
:MODIFIED: 2019-03-08 15:50:43
:END:

#+BEGIN_SRC emacs-lisp
(defvar tm/signature-alist '((?f "Formal"
			      (lambda () (insert-file-contents
					  "~/org/sigs/formal")))
			  (?i "Informal"
			      (lambda () (insert-file-contents
					  "~/org/sigs/informal")))))

(defun tm/signature-choose ()
  "Lets the user choose the animal and takes the corresponding action.
Returns whatever the action returns."
  (interactive)
  (let ((choice (read-char-choice (mapconcat (lambda (item) (format "%c: %s" (car item) (cadr item))) tm/signature-alist "; ")
                  (mapcar #'car tm/signature-alist))))
    (funcall (nth 2 (assoc choice tm/signature-alist)))))

(add-hook 'notmuch-message-mode-hook
          (lambda () (local-set-key (kbd "C-c C-w") #'tm/signature-choose)))
#+END_SRC

*** TODO Refine notmuch alerts/include X11 aware function           :hard:
:PROPERTIES:
:HASH:     39b732fcba095641190ef76879f63568
:MODIFIED: 2019-06-28 16:52:18
:END:
:LOGBOOK:
- State "TODO"       from              [2019-06-28 Fri 16:51]
:END:

*** Alerts
:PROPERTIES:
:HASH:     15987ec94feb521ed21dd33ac25e266b
:MODIFIED: 2019-06-28 16:52:18
:END:
:LOGBOOK:
- State "TODO"       from              [2019-03-11 Mon 16:42]
:END:

#+BEGIN_SRC emacs-lisp
  (defun tm/notmuch-notify ()
    "Generate desktop notifcations for new mail.

  Utilize `notmuch-call-notmuch-sexp' to fetch the latest messages
  tagged inbox and send a notification to the desktop"
    (let* ((latest-messages
            (apply
             #'notmuch-call-notmuch-sexp
             '("search"
               "--format=sexp"
               "--format-version=4"
               "--sort=newest-first"
               "tag:inbox"
               "date:45secs..")))
           (who)
           (when)
           (what)
           (mail-message)
           (body))
      (mapcar (lambda (mail-message)
                (setq when (plist-get mail-message :date_relative))
                (setq who (if (string-match-p "|"
                                              (plist-get mail-message :authors))
                              (progn (string-match "[[:space:],]\\{0,2\\}\\([a-zA-z[:space:]]+\\)|"
                                                   (plist-get mail-message
                                                              :authors))
                                     (match-string 1 (plist-get mail-message
                                                                :authors)))
                            (plist-get mail-message :authors)))
                (setq what (plist-get mail-message :subject))
                (setq body (format "<b>%s</b>\n<b>%s</b>\n\n%s" when who what))
                (notifications-notify :title "New message(s)!\n"
                                      :body body
                                      :app-name "notmuchmail"))
              latest-messages)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun tm/notmuch-unread ()
    "Show unread message count in mode-line."
    (let* ((unread-mail (apply
                         #'notmuch-call-notmuch-sexp
                         '("search"
                           "--format=sexp"
                           "--format-version=4"
                           "--sort=newest-first"
                           "--output=messages"
                           "tag:inbox"
                           "and tag:unread"))))
      (if (> (length unread-mail) 0)
          (setq global-mode-string
                (propertize
                 (format "%s %s"
                         (all-the-icons-material "mail" :face 'all-the-icons-cyan-alt)
                         (length unread-mail)) 'font-lock-face '(:foreground "#61dafb")))
        (setq global-mode-string nil))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-hook 'notmuch-after-tag-hook #'tm/notmuch-unread)
#+END_SRC

*** TODO Reminders for sent mail
:PROPERTIES:
:HASH:     ab24c782ddaadca26d2c549655a3ffea
:MODIFIED: 2019-03-08 15:50:43
:END:
:LOGBOOK:
- State "TODO"       from              [2019-03-06 Wed 09:32]
:END:

Reminders a la Gmail about sent mail that hasn't received a response.

*** Feed highlighting
:PROPERTIES:
:HASH:     a10fbdc7b002315029169a2a1baa82d3
:MODIFIED: 2019-06-03 17:06:34
:END:

#+BEGIN_SRC emacs-lisp
  (defface notmuch-feed-gluu
    '((t :foreground "purple2"
         :background "#6e6ed3d31110"
         :weight bold))
    "Highlight gluu messages.")
  (defface notmuch-feed-nagios-problem
    '((t :foreground "#ffff00008080"
         :weight bold))
    "Highlight gluu messages.")
  (defface notmuch-feed-nagios-recovery
    '((t :foreground "SpringGreen"
         :weight bold))
    "Highlight gluu messages.")
  (defface notmuch-feed-inbox
    '((t :foreground "cyan"
         :weight bold))
    "Highlight gluu messages.")

  (defun tm/highlight-notmuch-feed ()
    "Highlight interesting words in saved search."
    (let ((phrase-alist '(("idp-demo-prod" . notmuch-feed-gluu)
                          ("PROBLEM" . notmuch-feed-nagios-problem)
                          ("RECOVERY" . notmuch-feed-nagios-recovery)
                          ("inbox" . notmuch-feed-inbox))))
      (cl-loop for (key . value) in phrase-alist do
               (highlight-phrase key value))))
#+END_SRC

** Notmuch
:PROPERTIES:
:HASH:     38a40d083af8d6a167c7d26351cd763c
:MODIFIED: 2019-06-28 16:53:23
:END:
:LOGBOOK:
- State "TODO"       from              [2019-03-05 Tue 10:30]
:END:

#+BEGIN_SRC emacs-lisp
  (use-package notmuch
    :if (executable-find "notmuch")
    :init
    ;; Org/HTML deps
    (use-package htmlize)
    (use-package org-mime)
    (require 'org-mime)
    (use-package w3m
      :if (executable-find "w3m"))
    :general
    (tm/leader-def
      "/" 'notmuch)
    :config
    ;; Help Emacs find notmuch and load it
    (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
    (setq exec-path (append exec-path '("/usr/local/bin")))
    (autoload 'notmuch "notmuch" "notmuch mail" t)

    ;; Tell Emacs how to send mail
    (setq message-send-mail-function 'message-send-mail-with-sendmail
          sendmail-program "/usr/bin/msmtp")

    ;; Configure Fcc
    (setq notmuch-fcc-dirs "work/Sent +sent -new"
          notmuch-maildir-use-notmuch-insert t)

    ;; Other variables
    (setq notmuch-search-oldest-first nil
          message-kill-buffer-on-exit t
          notmuch-show-indent-messages-width 4
          notmuch-multipart/alternative-discouraged '("text/html" "text/plain")
          notmuch-archive-tags '("-inbox" "+archive"))

    ;; Refresh feed buffer at specified intervals if it's open
    (run-with-timer 0 30 'tm/notmuch-refresh-feed-buffer)

    ;; Render HTML with w3m
    (setq mm-text-html-renderer 'w3m)

    ;; Activate line highlighting only for feed buffer
    ;;
    ;; This is very slow, so disabling for now
    ;; (add-hook 'notmuch-search-mode-hook 'tm/set-feed-faces)

    ;; Shows saved searches in `notmuch-hello' even if they're empty.
    (setq notmuch-show-empty-saved-searches t)

    ;; Saved searches for notmuch-hello
    (setq notmuch-saved-searches
          '((:name "inbox"
             :query "tag:inbox"
             :key "i"
             :count-query "tag:inbox and tag:unread")
            (:name "git issues"
             :query "tag:lists/854 and not tag:archive and date:1week..now"
             :count-query "tag:lists/854 and not tag:archive and date:1week..now and tag:unread")
            (:name "feed"
             :query "date:\"1hours..now\"")
            (:name "nagios-gluu"
             :query "subject:\"/idp-demo-prod/\" and tag:nagios-gluu and date:30days..today"
             :count-query "subject:\"/idp-demo-prod/\" and tag:nagios-gluu and date:30days..today and tag:unread")
            (:name "nagios"
             :query "tag:nagios not 'subject:\"/Project: gluu/\"' and date:3days..today"
             :count-query "tag:nagios not 'subject:\"/Project: gluu/\"' and date:3days..today and tag:unread")
            (:name "flappy vs capy"
             :query "subject:\"/gluu/\" and tag:nagios and date:3days..now")
            (:name "git messages"
             :query "tag:git and date:4days..today"
             :count-query "tag:git and date:4days..today and tag:unread")
            (:name "service now"
             :query "tag:servicenow and date:3days..today and not subject:\"/(Resolved|Closed)/\""
             :count-query "tag:servicenow and date:3days..today and not subject:\"/(Resolved|Closed)/\" and tag:unread")
            (:name "ssl" :query "tag:ssladmin and date:6days..today")
            (:name "cron daemon"
             :query "date:4days..today and from:\"(Cron Daemon)\""
             :count-query "date:4days..today and from:\"(Cron Daemon)\" and tag:unread")
            (:name "tenshi"
             :query "date:2days..today and tag:tenshi-db300 or tag:tenshi-uga"
             :count-query "date:2days..today and tag:tenshi-db300 or tag:tenshi-uga and tag:unread")
            (:name "sent"
             :query "tag:sent"
             :key "t"))))
#+END_SRC

*** TODO Add keybindings for notmuch forward (and others)           :easy:
:PROPERTIES:
:HASH:     bcc46b363caa0c639b0862290130e7be
:MODIFIED: 2019-06-28 16:53:23
:END:
:LOGBOOK:
- State "TODO"       from              [2019-06-28 Fri 16:52]
:END:

** Gnus
:PROPERTIES:
:HASH:     3208698b3565e832a0a8eb6f55766786
:MODIFIED: 2019-06-24 10:01:44
:END:

#+begin_src emacs-lisp
  (use-package gnus
    :straight nil
    :demand t
    :general
    (:keymaps 'gnus-group-mode-map
     :states 'normal
     "RET" 'gnus-group-select-group
     "q" 'gnus-group-exit
     "L" 'gnus-group-list-all-groups
     "j" 'gnus-group-next-unread-group
     "J" 'gnus-group-next-group
     "k" 'gnus-group-prev-unread-group
     "K" 'gnus-group-next-group
     "u" 'gnus-group-unsubscribe-current-group
     "gr" 'gnus-group-get-new-news
     "gy" 'hydra-gnus-group/body
     "c" 'gnus-group-catchup-current
     "C" 'gnus-group-catchup-all
     "m" 'gnus-group-mark-group)
    (:keymaps 'gnus-summary-mode-map
     :states 'normal
     "RET" 'gnus-summary-scroll-up
     "C-e" 'gnus-summary-scroll-up
     "C-y" 'gnus-summary-scroll-down
     "C-f" 'gnus-summary-next-page
     "C-b" 'gnus-summary-prev-page
     "G" 'gnus-summary-end-of-article
     "gg" 'gnus-summary-beginning-of-article
     "j" 'gnus-summary-next-unread-article
     "k" 'gnus-summary-prev-unread-article
     "J" 'gnus-summary-next-article
     "K" 'gnus-summary-prev-article
     "c" 'gnus-summary-catchup
     "q" 'gnus-summary-exit
     "t" 'gnus-summary-toggle-header
     "TT" 'gnus-summary-toggle-threads
     "gsd" 'gnus-summary-sort-by-date
     "gsD" 'gnus-summary-sort-by-most-recent-date
     "gss" 'gnus-summary-sort-by-score
     "gsa" 'gnus-summary-sort-by-author
     "gy" 'hydra-gnus-summary/body
     "!" 'gnus-summary-tick-article-forward
     "?" 'gnus-summary-mark-as-dormant
     "MVk" 'gnus-summary-kill-below
     "Mb" 'gnus-summary-set-bookmark
     "MB" 'gnus-summary-remove-bookmark
     "MM" 'gnus-summary-mark-map)
    (:keymaps 'gnus-browse-mode-map)

    :init
    ;; Sets initial `evil-mode' state for Gnus.
    (evil-set-initial-state 'gnus-group-mode 'normal)
    (evil-set-initial-state 'gnus-summary-mode 'normal)
    (evil-set-initial-state 'gnus-browse-mode 'normal)

    (setq gnus-sum-thread-tree-indent "  ")
    (setq gnus-sum-thread-tree-root "")
    (setq gnus-sum-thread-tree-false-root "")
    (setq gnus-sum-thread-tree-single-indent "")
    (setq gnus-sum-thread-tree-vertical "\u2502")
    (setq gnus-sum-thread-tree-leaf-with-other "\u251c\u2500\u25ba ")
    (setq gnus-sum-thread-tree-single-leaf "\u2570\u2500\u25ba ")

    (setq gnus-summary-line-format
          (concat
           "%0{%U%R%z%}"
           "%3{\u2502%}" "%1{%d%}" "%3{\u2502%}" ;; date
           "  "
           "%4{%-20,20f%}" ;; name
           "  "
           "%3{\u2502%}"
           " "
           "%1{%B%}"
           "%s\n"))

    (setq gnus-summary-display-arrow t)
    (setq gnus-use-adaptive-scoring t)

    (setq gnus-default-adaptive-score-alist
          '((gnus-unread-mark)
            (gnus-ticked-mark (from 4))
            (gnus-dormant-mark (from 5))
            (gnus-del-mark (from -4) (subject -1))
            (gnus-read-mark (from 4) (subject 2))
            (gnus-expirable-mark (from -1) (subject -1))
            (gnus-killed-mark (from -1) (subject -3))
            (gnus-kill-file-mark)
            (gnus-ancient-mark)
            (gnus-low-score-mark)
            (gnus-catchup-mark (from -1) (subject -1))))

    (setq gnus-use-cache t)
    (setq gnus-cacheable-groups "^nnnotmuch")
    (setq gnus-cache-directory (concat no-littering-var-directory
                                       "News/cache"))

    :config
    (setq gnus-select-method '(nnnotmuch ""))
    (setq nnnotmuch-groups
          '((""
             ;; InCommon Operators list
             ("nnnotmuch+lists.inc-ops-notifications"
              "tag:lists/inc-ops-notifications")
             ;; Notmuch Commits list
             ("nnnotmuch+lists.notmuch-commits"
              "tag:lists/notmuch-commits")
             ;; All Tenshi messages
             ("nnnotmuch+tenshi" "tag:tenshi-db300 or tag:tenshi-uga")
             ;; Git commits
             ("nnnotmuch+git-commits" "tag:git")
             ;; Git issue messages
             ("nnnotmuch+git-issues" "tag:lists/854")
             ;; Nagios alerts
             ("nnnotmuch+nagios-alerts"
              "tag:nagios and not 'subject:\"/Project: gluu/\"'")
             ;; ServiceNow messages
             ("nnnotmuch+service-now"
              "tag:servicenow and not subject:\"/(Resolved|Closed)/\"")
             ;; SSL messages
             ("nnnotmuch+ssl-admin" "tag:ssladmin")
             ;; Cron daemon output messages
             ("nnnotmuch+cron-daemon" "from:\"(Cron Daemon)\"")))))
#+end_src

*** [[https://github.com/tlikonen/nnnotmuch][=nnnotmuch=]]
:PROPERTIES:
:HASH:     2c3a20426c7bb676ac5045835d641997
:MODIFIED: 2019-06-21 13:56:27
:END:

#+begin_quote
Notmuch search engine back-end for Gnus (Emacs's mail and news client)
#+end_quote

#+begin_src emacs-lisp
  (use-package nnnotmuch
    :straight (nnnotmuch :type git :host github
                         :repo "tlikonen/nnnotmuch"))
#+end_src

* Org-mode
:PROPERTIES:
:HASH:     1ec6d96ffcc20597ffd547966ecf91ee
:MODIFIED: 2019-03-08 15:48:05
:END:

** Org-mode
:PROPERTIES:
:HASH:     f40e82b6ae092d1613e05d17f45e50c1
:MODIFIED: 2019-03-08 15:50:43
:END:

*** Config
:PROPERTIES:
:HASH:     71690f18806d3e7e4c6b86a3d2c19209
:MODIFIED: [2019-06-30 Sun 20:51]
:END:

#+BEGIN_SRC emacs-lisp
  (use-package org
    :straight org-plus-contrib
    :demand t
    :hook
    (after-init . (lambda ()
                    (if (try-completion "main.org"
                                        (mapcar #'buffer-name
                                                (buffer-list)))
                        (kill-buffer "main.org"))))

    (evil-insert-state-exit . (lambda ()
                                (if (string= major-mode
                                             "org-mode")
                                    (save-buffer))))
    :general
    (:keymaps 'org-mode-map
     "<S-iso-lefttab>" 'org-global-cycle
     "zf" 'tm/org-set-focus-time)
    (tm/leader-def
      :infix "o"
      :prefix-command 'tm/org-prefix-command
      :prefix-map 'tm/org-prefix-map
      "" '(:which-key "org prefix" :ignore t)
      "a" 'org-agenda
      "c" 'org-capture
      "b" 'org-switchb
      "h" 'org-recent-headings-ivy
      "j" 'tm/org-journal-prefix-command
      "1" 'tm/org-agenda-work-today
      "2" 'tm/org-agenda-work-week)

    :config
    (defun tm/org-agenda-work-week (&optional arg)
      "Opens agenda for this week."
      (interactive)
      (org-agenda arg "ww"))
    (defun tm/org-agenda-work-today (&optional arg)
      "Opens agenda for today."
      (interactive)
      (org-agenda arg "wt"))

    (setq org-tags-column -76)

    (require 'org-tempo)
    (require 'org-protocol)

    (use-package org-ql
      :after (org-mode)
      :straight
      (:type git :host github :repo "alphapapa/org-ql"))

    (defmacro tm/org-make-level-faces (level)
      "Generate commands and set vars for creating new `org-level-face's."
      (let ((num 0))
        (while (< num (+ (string-to-number level) 1))
          (progn
            `(defface ,(intern (concat "org-level-"
                                       level))
               (org-compatible-face nil
                 '((((class color) (min-colors 16) (background light))
                    (:foreground "RosyBrown"))
                   (((class color) (min-colors 16) (background dark))
                    (:foreground "LightSalmon"))
                   (((class color) (min-colors 8)) (:foreground "green"))))
               ,(format "Face used for level %s headlines." level)
               :group 'org-faces)
            (let ((face (intern (concat "org-level-" level))))
              (unless (member face
                              org-level-faces)
                (setq org-level-faces (append org-level-faces
                                              (list face))))))
          (setq num (+ num 1))))
      (setq org-n-level-faces
            (string-to-number level)))

    (tm/org-make-level-faces "16")

    ;; Makes more outline path faces available.
    (setq org-n-level-faces 15)
    ;; (setq org-level-faces
    ;;       '(org-level-1 org-level-2 org-level-3 org-level-4 org-level-5
    ;;                     org-level-6 org-level-7 org-level-8 org-level-9
    ;;                     org-level-10 org-level-11 org-level-12))

    ;; Use UTF8 bullets instead of asterisks for Org headings
    (use-package org-bullets
      :hook
      (org-mode . (lambda () (org-bullets-mode 1)))
      :config
      (setq org-bullets-bullet-list
            '("⑴" "⑵" "⑶" "⑷" "⑸" "⑹" "⑺" "⑻" "⑼" "⑽"
              "⑾" "⑿" "⒀" "⒁" "⒂" "⒃")))

    ;; Evil key bindings in Org mode
    (use-package evil-org
      :after org
      :hook
      (org-mode . evil-org-mode)
      (evil-org-mode . (lambda ()
                         (evil-org-set-key-theme '(textobjects
                                                   insert
                                                   navigation
                                                   additional
                                                   shift
                                                   todo
                                                   heading)))))

    ;; Add TOC for any heading with :TOC: tag
    ;; https://github.com/snosov1/toc-org
    (use-package toc-org
      :config
      (add-hook 'org-mode-hook 'toc-org-mode))

    ;; Sets org file base directory.
    (setq org-base-directory "~/org/")
    (setq org-work-directory (concat org-base-directory "work/"))
    (setq org-home-directory (concat org-base-directory "home/"))

    ;; Adds indentation based on heading level.
    (setq org-startup-indented t)

    ;; Enables syntax highlighting for code blocks.
    (setq org-src-fontify-natively t)

    ;; (add-hook 'window-configuration-change-hook 'tm/place-org-tags)

    ;; Add modified time property when Org mode files are saved
    (add-hook 'before-save-hook
              (lambda ()
                (when (eq major-mode 'org-mode)
                  (org-map-entries #'tm/update-modification-time ;; FUNC
                                   nil			   ;; MATCH
                                   'file			   ;; SCOPE
                                   #'tm/skip-nonmodified)))) ;; SKIP

    ;; Define TODO/DONE-state keywords
    (setq org-todo-keywords
          '((sequence "TODO(t!)"	       ; TODO for projects or one offs
                      "WAIT(w@)"	       ; Waiting on someone/something
                      "|"
                      "DONE(d@)"
                      "CANCELLED(c@)"
                      "NOTE(n!)")))

    ;; Enable state change logging in :LOGBOOK: drawer
    (setq org-log-into-drawer t)

    ;; Enable fast todo selection
    (setq org-use-fast-todo-selection t)

    ;; Make headlines look different for TODO/DONE states
    (setq org-fontify-done-headline t)
    (setq org-fontify-quote-and-verse-blocks t)
    (setq org-fontify-whole-heading-line t)

    ;; Org modules notes:
    ;;
    ;; - The values set below were probably copied from elsewhere, so I'm
    ;;   not sure what most of them do.
    ;; - Org Easy templates uses a different system in org 9.2.
    ;;   `org-tempo' provides the old functionality by loading it with
    ;;   `org-modules'.
    ;;
    (setq org-modules
          '(org-bbdb org-bibtex org-docview org-gnus org-habit org-info
                     org-irc org-mhe org-rmail org-w3m))

    ;; Faces

    ;; Task state faces
    (setq org-todo-keyword-faces
          '(("TODO" :background "#DD0B53" :foreground "#EAEAEA"
             :weight bold :box (:line-width -1 :style released-button))
            ("DONE" :background "#0F0" :foreground "#000" :weight bold
             :box (:line-width -1 :style released-button))
            ("WAIT" :background "#FEDA98" :foreground "#000" :weight bold
             :box (:line-width -1 :style released-button))
            ("CANCELLED" :background "#F94FA0" :foreground "#EAEAEA"
             :weight bold :box (:line-width -1 :style released-button))
            ("MEETING" :background "#3EDAD4" :foreground "#000"
             :weight bold :box (:line-width -1 :style released-button))))

    ;; Priority faces
    (setq org-priority-faces '((?A . (:foreground "#DD0B53" :weight bold))
                               (?B . (:foreground "#FEDA98"))
                               (?C . (:foreground "#0F0"))))

    ;;  ;;;;;;;;;;;;;;;;;;;
    ;;
    ;; `org-refile' section
    ;;
    ;;  ;;;;;;;;;;;;;;;;;;;

    ;; `org-refile-targets' controls completion candidates for
    ;; `org-refile'.  The following enables refiling to any file in
    ;; `org-agenda-files' and any heading 10 levels or less therein.
    (setq org-refile-targets
          `((org-agenda-files . (:maxlevel . 10))
            (,(concat user-emacs-directory "main.org") . (:maxlevel . 16))))

    ;; Setting the following to nil enables ivy read completions.
    (setq org-outline-path-complete-in-steps nil)

    ;; Includes file names in refile targets.
    (setq org-refile-use-outline-path 'file))
#+END_SRC

*** Elisp
:PROPERTIES:
:HASH:     55e5ffb39c78851888a18871af9febf8
:MODIFIED: 2019-03-08 15:50:43
:END:

**** Tag placement
:PROPERTIES:
:HASH:     8ee1aa3aa218557d747fff03e57be937
:MODIFIED: 2019-03-08 15:50:43
:END:

#+BEGIN_SRC emacs-lisp
  (defun tm/place-agenda-tags ()
      "Flush tags to right side of agenda window."
      (with-current-buffer
          (buffer-name)
        (if (derived-mode-p 'org-agenda-mode)
            (progn
              (setq org-agenda-tags-column (abs (- 20 (window-width))))
              (setq org-habit-graph-column (abs (- 65 (window-width))))
              (org-agenda-align-tags))
          nil)))

  (defun tm/place-org-tags ()
      "Align tags with right side of current window."
      (with-current-buffer
          (buffer-name)
        (if (derived-mode-p 'org-mode)
            (progn
              (setq org-tags-column (abs (- 30 (window-width))))
              (org-align-all-tags))
          nil)))
#+END_SRC

**** Org-refile functions
:PROPERTIES:
:HASH:     f847514018712eb68be765b1360e070f
:MODIFIED: 2019-03-08 15:50:43
:END:

From [[https://github.com/Fuco1/Fuco1.github.io/blob/master/posts/2017-05-09-Automatically-remove-inherited-tags-from-tasks-after-refiling.org][here]]:

#+BEGIN_SRC emacs-lisp
  (defun tm/org-remove-inherited-local-tags ()
    "Remove local tags that can be inherited instead."
    (let* ((target-tags-local (org-get-tags-at nil 'local))
           ;; We have to remove the local tags otherwise they would not show up
           ;; as being inherited if they are present on parents---the local tag
           ;; would "override" the parent
           (target-tags-inherited
            (unwind-protect
                (progn
                  (org-set-tags-to nil)
                  (org-get-tags-at))
              (org-set-tags-to target-tags-local))))
      (-each target-tags-local
        (lambda (tag)
          (when (member tag target-tags-inherited)
            (org-toggle-tag tag 'off))))))
#+END_SRC

**** Set =FOCUS= property
:PROPERTIES:
:HASH:     ef961ceede3b5e954a6b01f89f537ae5
:MODIFIED: [2019-06-30 Sun 11:24]
:END:

#+begin_src emacs-lisp
  (defun tm/org-set-focus-time ()
    "Set an active timestamp for FOCUS property."
    (interactive)
    (let ((time (with-temp-buffer
                  (call-interactively #'org-time-stamp)
                  (buffer-string))))
      (org-set-property "FOCUS" time)))
#+end_src

*** Org-recent-headers
:PROPERTIES:
:HASH:     bebf11be533555f421531a220b94c8bd
:MODIFIED: 2019-06-28 13:28:13
:END:

#+BEGIN_SRC emacs-lisp
  (use-package org-recent-headings
    :straight t
    :init
    (setq org-recent-headings-save-file
          (concat no-littering-var-directory
                  "org-recent-headings"))
    :config
    (org-recent-headings-mode))
#+END_SRC
*** TODO Add custom org link for emails                         :moderate:
:PROPERTIES:
:HASH:     4fc5a070bcbc73244a67032c73a4c062
:MODIFIED: [2019-06-30 Sun 11:30]
:FOCUS:    <2019-07-01 Mon>
:END:
:LOGBOOK:
- State "TODO"    from ""        [2019-06-27 Thu 10:34]
:END:

[[https://endlessparentheses.com/use-org-mode-links-for-absolutely-anything.html][Use Org-Mode Links for Absolutely Anything]]
** Org-journal
:PROPERTIES:
:HASH:     dea753dc4a3fa7d62d1dd2b651b3be53
:MODIFIED: 2019-06-23 11:05:39
:END:

#+BEGIN_SRC emacs-lisp
  (use-package org-journal
    :straight t
    :preface
    (defun org-journal-work-find-location ()
      (setq org-journal-dir "~/org/work/journal/")
      ;; Open today's journal, but specify a non-nil prefix argument in
      ;; order to inhibit inserting the heading; org-capture will insert
      ;; the heading.
      (org-journal-new-entry t)
      ;; Position point on the journal's top-level heading so that
      ;; org-capture will add the new entry as a child entry.
      (goto-char (point-max))
      (org-up-element)
      (goto-char (org-find-exact-headline-in-buffer
                  (org-find-top-headline
                   (point-max)))))
    (defun org-journal-home-find-location ()
      (setq org-journal-dir "~/org/home/journal/")
      ;; Open today's journal, but specify a non-nil prefix argument in
      ;; order to inhibit inserting the heading; org-capture will insert
      ;; the heading.
      (org-journal-new-entry t)
      ;; Position point on the journal's top-level heading so that
      ;; org-capture will add the new entry as a child entry.
      (goto-char (point-max))
      (org-up-element)
      (goto-char (org-find-exact-headline-in-buffer
                  (org-find-top-headline
                   (point-max)))))
    :general
    (tm/leader-def
      :infix "j"
      :prefix-command 'tm/org-journal-prefix-command
      :prefix-map 'tm/org-journal-prefix-map
      "" '(:which-key "org-journal prefix" :ignore t)
      "c" 'org-journal-new-entry
      "l" 'org-journal-next-entry
      "h" 'org-journal-previous-entry)
    :custom
    (org-journal-dir "~/org/work/journal")
    (org-journal-file-type 'weekly)
    (org-journal-enable-agenda-integration t)
    (org-journal-file-format "%Y%m%d.org"))
#+END_SRC

** Org-agenda
:PROPERTIES:
:HASH:     41d3f193eaaac071532945c71c538817
:MODIFIED: 2019-03-08 15:50:43
:END:

*** Elisp
:PROPERTIES:
:HASH:     55e5ffb39c78851888a18871af9febf8
:MODIFIED: 2019-03-08 15:50:43
:END:

**** Add modified date property to headings in Org mode file
:PROPERTIES:
:HASH:     7d50d3dfc7fb325ab976bef44d97bd04
:MODIFIED: [2019-06-30 Sun 11:05]
:END:

Functions for calculating last update time per Org heading (from
[[https://emacs.stackexchange.com/a/39376][here]]):

#+BEGIN_SRC emacs-lisp
  (defun tm/getentryhash ()
    "Get the hash sum of the text in current entry, except :HASH:
  and :MODIFIED: property texts."
    (save-excursion
      (let* ((full-str
              (buffer-substring-no-properties (point-min)
                                              (point-max)))
             (str-nohash
              (if (string-match "^ *:HASH:.+\n" full-str)
                  (replace-match "" nil nil full-str)
                full-str))
             (str-nohash-nomod
              (if (string-match "^ *:MODIFIED:.+\n" str-nohash)
                  (replace-match "" nil nil str-nohash)
                str-nohash))
             (str-nohash-nomod-nopropbeg
              (if (string-match "^ *:PROPERTIES:\n" str-nohash-nomod)
                  (replace-match "" nil nil str-nohash-nomod)
                str-nohash-nomod))
             (str-nohash-nomod-nopropbeg-end
              (if (string-match "^ *:END:\n" str-nohash-nomod-nopropbeg)
                  (replace-match "" nil nil str-nohash-nomod-nopropbeg)
                str-nohash-nomod-nopropbeg)))
        (secure-hash 'md5 str-nohash-nomod-nopropbeg-end))))

  (defun tm/update-modification-time ()
    "Set the :MODIFIED: property of the current entry to NOW and
  update :HASH: property."
    (save-excursion
      (save-restriction
        (let* ((beg
                (progn
                  (org-back-to-heading)
                  (point)))
               (end
                (progn
                  (outline-next-heading)
                  (- (point) 1))))
          (narrow-to-region beg end)
          (org-set-property "HASH"
                            (format "%s" (tm/getentryhash)))
          (org-set-property "MODIFIED"
                            (format-time-string "[%Y-%m-%d %a %H:%M]"))))))

  (defun tm/skip-nonmodified ()
    "Skip headings whose :MODIFIED: properties are unchanged."
    (let ((next-headline
           (save-excursion
             (or (outline-next-heading)
                 (point-max)))))
      (save-restriction
        (let* ((beg
                (progn
                  (org-back-to-heading)
                  (point)))
               (end
                (progn
                  (outline-next-heading)
                  (- (point) 1))))
          (narrow-to-region beg end)
          (if (string= (org-entry-get (point) "HASH" nil)
                       (format "%s" (tm/getentryhash)))
              next-headline
            nil)))))
#+END_SRC

**** More convenient movement
:PROPERTIES:
:HASH:     4f01861f68279253b01512c998c8c3cf
:MODIFIED: 2019-03-08 15:50:43
:END:

Move between =org-agenda-custom-command= blocks (from [[https://blog.aaronbieber.com/2016/09/25/agenda-interactions-primer.html][here]]):

#+BEGIN_SRC emacs-lisp
  (require 'org-agenda)

  (defun tm/org-agenda-next-header ()
    "Jump to the next header in an agenda series."
    (interactive)
    (tm/org-agenda-goto-header))

  (defun tm/org-agenda-previous-header ()
    "Jump to the previous header in an agenda series."
    (interactive)
    (tm/org-agenda-goto-header t))

  (defun tm/org-agenda-goto-header (&optional backwards)
    "Find the next agenda series header forwards or BACKWARDS."
    (let ((pos (save-excursion
                 (goto-char (if backwards
                                (line-beginning-position)
                              (line-end-position)))
                 (let* ((find-func (if backwards
                                       'previous-single-property-change
                                     'next-single-property-change))
                        (end-func (if backwards
                                      'max
                                    'min))
                        (all-pos-raw (list (funcall find-func (point) 'org-agenda-structural-header)
                                           (funcall find-func (point) 'org-agenda-date-header)))
                        (all-pos (cl-remove-if-not 'numberp all-pos-raw))
                        (prop-pos (if all-pos (apply end-func all-pos) nil)))
                   prop-pos))))
      (if pos (goto-char pos))
      (if backwards (goto-char (line-beginning-position)))))
#+END_SRC

**** Auto-refresh specified files when they change on disk
:PROPERTIES:
:HASH:     3cdaee95aa51037958c93867636832fb
:MODIFIED: [2019-06-30 Sun 11:07]
:END:

Activate minor modes based on file names (from [[https://stackoverflow.com/a/13946304][here)]]:

#+BEGIN_SRC emacs-lisp
  (defvar tm/auto-minor-mode-alist ()
    "Alist of filename patterns vs correpsonding minor mode
  functions, see `auto-mode-alist' All elements of this alist are
  checked, meaning you can enable multiple minor modes for the same
  regexp.")

  (defun tm/enable-minor-mode-based-on-extension ()
    "Check file name against `tm/auto-minor-mode-alist' to enable minor modes
  the checking happens for all pairs in tm/auto-minor-mode-alist"
    (when buffer-file-name
      (let ((name (file-name-sans-versions buffer-file-name))
            (remote-id (file-remote-p buffer-file-name))
            (case-fold-search auto-mode-case-fold)
            (alist tm/auto-minor-mode-alist))
        ;; Remove remote file name identification.
        (when (and (stringp remote-id)
                   (string-match-p (regexp-quote remote-id) name))
          (setq name (substring name (match-end 0))))
        (while (and alist (caar alist) (cdar alist))
          (if (string-match-p (caar alist) name)
              (funcall (cdar alist) 1))
          (setq alist (cdr alist))))))

  (setq auto-revert-verbose nil)
#+END_SRC

**** TODO Function to change clock char in =org-agenda-current-time-string= :hard:
:PROPERTIES:
:HASH:     6cb4a60164567f79d324babc4cb11d96
:MODIFIED: [2019-06-30 Sun 11:07]
:END:
:LOGBOOK:
- State "TODO"    from ""        [2019-06-28 Fri 10:58]
:END:

*** Config
:PROPERTIES:
:HASH:     fe4a764b15ad7022b1e1daeec832fab3
:MODIFIED: [2019-06-30 Sun 21:12]
:END:

#+BEGIN_SRC emacs-lisp
  (use-package org-agenda
    :after (org)
    :straight nil
    :general
    (org-agenda-mode-map
     :keymaps 'override
     "j" 'org-agenda-next-item
     "k" 'org-agenda-previous-item
     "J" 'tm/org-agenda-next-header
     "K" 'tm/org-agenda-previous-header)

    :init
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys)

    :config
    ;; https://emacs.stackexchange.com/a/26369
    (defun tm/org-cmp-date-property (prop)
      "Compare two `org-mode' agenda entries, `A' and `B', by some date property.

  If a is before b, return -1. If a is after b, return 1. If they
  are equal return t."
      (lexical-let ((prop prop))
        #'(lambda (a b)
            (let* ((a-pos (get-text-property 0 'org-marker a))
                   (b-pos (get-text-property 0 'org-marker b))
                   (a-date (or (org-entry-get a-pos prop)
                               (format "<%s>" (org-read-date t nil "now"))))
                   (b-date (or (org-entry-get b-pos prop)
                               (format "<%s>" (org-read-date t nil "now"))))
                   (cmp (compare-strings a-date nil nil b-date nil nil)))
              (if (eq cmp t) nil (signum cmp))))))

    ;; calendar.org has gotten very large and I received an error
    ;; indicating this variable should be increased
    (setq undo-outer-limit 25170000)

    ;; Hooks
    ;;
    ;; Place tags flush with right side of window
    (add-hook 'window-configuration-change-hook 'tm/place-agenda-tags)
    (add-hook 'find-file-hook #'tm/enable-minor-mode-based-on-extension)

    ;; Activate `auto-revert-mode' for calendar.org
    (add-to-list 'tm/auto-minor-mode-alist '("calendar.org" . auto-revert-mode))

    ;; Files that `org-agenda' uses to populate its commands/views
    (setq org-agenda-files
          `(,(concat org-base-directory "mobile-capture.org")
            ,(concat org-base-directory "capture.org")
            ,(concat org-work-directory "calendar/calendar.org")
            ,(concat org-base-directory "notes.org")
            ,(concat org-base-directory "todo.org")))

    ;; Don't show scheduled TODOs in `org-agenda'
    (setq org-agenda-todo-ignore-scheduled t)

    ;; Tell `org-agenda' to use `current-buffer' to avoid destroying
    ;; precious window layouts
    (setq org-agenda-window-setup 'current-window)

    ;; Set up `org-habit'
    (require 'org-habit)
    (setq org-habit-graph-column 80
          org-habit-show-habits-only-for-today t)

    ;; ﹌
    (setq org-agenda-block-separator 65100)

    ;; ✔
    (setq org-habit-completed-glyph 10004)
    ;; 🙪
    (setq org-habit-today-glyph 128618)

    (setq org-agenda-current-time-string
          (format "⁕⁕⁕⁕  %s  ⁕⁕⁕⁕"
                  (propertize "🕖" :foreground "#F94FA0" :weight 'bold)))

    ;; Create `org-agenda' custom commands
    (setq org-agenda-custom-commands
          `(("w" . "Work agenda views")
            ("ww" "Weekly work agenda"
             ((agenda
               ""
               ((org-agenda-todo-ignore-scheduled 'past)
                (org-agenda-time-grid (quote
                                       ((daily today remove-match)
                                        (300 600 900 1200 1500 1800 2100)
                                        "......" "----------------")))
                (org-agenda-span 'week)
                (org-journal-dir "~/org/work/journal/")))
              (todo
               "TODO"
               ((org-agenda-prefix-format
                 ,(concat "%5(org-entry-get nil \"MODIFIED\") "))
                (org-agenda-todo-ignore-scheduled t)
                (org-agenda-sorting-strategy '(effort-down))
                (org-journal-dir "~/org/work/journal/")
                (org-agenda-tag-filter-preset '("-FUTURE"))))))
            ("wt" "Today's work agenda"
             ((agenda
               ""
               ((org-agenda-todo-ignore-scheduled 'past)
                (org-agenda-time-grid (quote
                                       ((daily today remove-match)
                                        (300 600 900 1200 1500 1800 2100)
                                        "......" "----------------")))
                (org-agenda-span 'day)
                (org-journal-dir "~/org/work/journal/")))
              (tags-todo
               "+WORK"
               ((org-agenda-prefix-format
                 ,(concat "%5(org-entry-get nil \"MODIFIED\") "))
                (org-agenda-todo-ignore-scheduled t)
                (org-agenda-sorting-strategy '(effort-down))
                (org-journal-dir "~/org/work/journal/")
                (org-agenda-tag-filter-preset '("-FUTURE"))
                (org-agenda-cmp-user-defined (tm/org-cmp-date-property
                                              "MODIFIED"))
                (org-agenda-sorting-strategy '(user-defined-down)))))))))
#+END_SRC

**** TODO Remap =org-promote= and =org-demote= in insert mode      :easy:
:PROPERTIES:
:HASH:     1572bc7daeab79feb261980d30633ce3
:MODIFIED: 2019-06-28 16:54:37
:END:
:LOGBOOK:
- State "TODO"    from ""        [2019-06-28 Fri 11:09]
:END:
*** Org-super-agenda
:PROPERTIES:
:HASH:     3193aeb0755e285ee7651aaa528044ab
:MODIFIED: [2019-06-30 Sun 11:07]
:END:

#+BEGIN_SRC emacs-lisp
  (use-package org-super-agenda
    :straight t
    :config
    (org-super-agenda-mode)
    (setq org-super-agenda-groups
           ;; '((:name "High Priority"
           ;;   :priority "A")
           ;;  (:name "Medium Priority"
           ;;   :priority "B")
           ;;  (:name "Low priority"
           ;;   :priority "C"))
          nil))
#+END_SRC
*** TODO Facility for easily adding a property with a timestamp
:PROPERTIES:
:HASH:     db8f4d9d769a995523edd6577d0f0556
:MODIFIED: [2019-06-30 Sun 21:12]
:END:
:LOGBOOK:
- State "TODO"    from ""        [2019-06-28 Fri 17:26]
:END:

*** TODO [[https://github.com/spegoraro/org-alert][org-alert]]
:PROPERTIES:
:HASH:     e242d036ef6e54f2b8d4d77b32cdb6db
:MODIFIED: [2019-07-01 Mon 09:25]
:END:
:LOGBOOK:
- State "TODO"    from ""        [2019-06-30 Sun 20:31]
:END:

#+begin_quote
Provides notifications for scheduled or deadlined agenda entries.
#+end_quote

*** TODO Ignore FOCUS property in agenda                        :moderate:
:PROPERTIES:
:HASH:     d17c71668f4cbd362cad2ebe2c8310d5
:MODIFIED: [2019-07-03 Wed 00:05]
:END:
:LOGBOOK:
- State "TODO"    from ""        [2019-07-01 Mon 10:49]
:END:

*** TODO Add mixed (home/work) agenda view                      :moderate:
:PROPERTIES:
:HASH:     16c0de67c671a7e899feab1a927fd2fc
:MODIFIED: [2019-07-03 Wed 00:05]
:END:
:LOGBOOK:
- State "TODO"    from ""        [2019-07-01 Mon 10:52]
:END:

** Org-capture
:PROPERTIES:
:HASH:     601b1d12b653c8928bc99dc44281c235
:MODIFIED: 2019-03-08 15:50:43
:END:

*** Config
:PROPERTIES:
:HASH:     46f83cc5f2b7ee889a5213e9f70322ae
:MODIFIED: 2019-06-30 10:25:16
:END:

#+BEGIN_SRC emacs-lisp
  (use-package org-capture
    :straight nil
    :after (org)
    :config
    (defun transform-square-brackets-to-round-ones (string-to-transform)
      "Transforms [ into ( and ] into ), other chars left unchanged."
      (concat
       (mapcar #'(lambda (c)
                   (if (equal c ?[) ?\( (if (equal c ?]) ?\) c)))
               string-to-transform)))

    (defmacro tm/org-get-headings-command (fn-suffix target)
      "Generate a command for capturing to TARGET."
      `(defun ,(intern (concat "tm/org-get-headings-"
                               (symbol-name fn-suffix))) ()
         ,(format "Return `point' for heading in %S" target)
         (interactive)
         (let* ((file (concat (if (string= ,target
                                           "main.org")
                                  user-emacs-directory
                                org-base-directory)
                              ,target))
                (buf (find-buffer-visiting file)))
           (unless buf
             (find-file file))
           (with-current-buffer
               buf
             ;; Gets headings from TARGET and fontifies them before collecting
             ;; them in `heading-point-alist', each cons cell of which reprents a
             ;; heading (with text properties) pointing at the value for that
             ;; heading's point.  `heading-point-alist' is passed to
             ;; `completing-read' read, ultimately calling `goto-char' against the
             ;; point from the chosen cons cell.
             (let* ((heading-point-alist '())
                    (headings
                     (org-map-entries
                      (lambda ()
                        (cl-pushnew `(,(save-excursion
                                         (org-format-outline-path
                                          (org-get-outline-path t)))
                                      . ,(goto-char (point)))
                                    heading-point-alist
                                    :test #'equal)))))
               (goto-char (cdr (assoc
                                (completing-read "File under: "
                                                 heading-point-alist)
                                heading-point-alist))))))))
    (tm/org-get-headings-command todo "todo.org")
    (tm/org-get-headings-command notes "notes.org")
    (tm/org-get-headings-command config "main.org")

    ;; Adds functions, advice, etc. for killing a new frame if one has
    ;; been created by org-capture browser extension.
    ;;
    ;; https://github.com/sprig/org-capture-extension#example-closins-the-frame-after-a-capture
    (defvar tm/delete-frame-after-capture 0
      "Whether to delete the last frame after the current capture.")
    (defun tm/delete-frame-if-neccessary (&rest r)
      (cond
       ((= tm/delete-frame-after-capture 0) nil)
       ((> tm/delete-frame-after-capture 1)
        (setq tm/delete-frame-after-capture (- tm/delete-frame-after-capture 1)))
       (t
        (setq tm/delete-frame-after-capture 0)
        (delete-frame))))
    (advice-add 'org-capture-finalize
                :after 'tm/delete-frame-if-neccessary)
    (advice-add 'org-capture-kill
                :after 'tm/delete-frame-if-neccessary)
    (advice-add 'org-capture-refile
                :after 'tm/delete-frame-if-neccessary)

    ;; Set default capture file
    (setq org-default-notes-file "~/org/capture.org")

    (setq
     org-capture-templates
     `(
       ("j" "Journal entry" entry
        ;; Target
        (function (lambda ()
                    (org-journal-new-entry t)
                    (goto-char (point-min))))
        ,(concat "* %(format-time-string org-journal-time-format)"
                 "%^{Title}\n"
                 ":LOGBOOK:\n"
                 "- State \"TODO\"    from \"\"        %U\n"
                 ":END:\n\n"
                 "%i%?"))

       ("c" "Emacs configuration change" entry
        ;; Target
        (file+function "~/.emacs.d/main.org" tm/org-get-headings-config)
        ;; Template
        ,(concat "* TODO %?\n"
                 ":LOGBOOK:\n"
                 "- State \"TODO\"    from \"\"        %U\n"
                 ":END:\n")
        :empty-lines 1)

       ("t" "Task" entry
        ;; Target
        (file+function "~/org/todo.org" tm/org-get-headings-todo)
        ;; Template
        ,(concat "* TODO %?\n"
                 ":LOGBOOK:\n"
                 "- State \"TODO\"    from \"\"        %U\n"
                 ":END:\n")
        :empty-lines 1)

       ("n" "Note" entry
        ;; Target
        (file+function "~/org/notes.org" tm/org-get-headings-notes)
        ;; Template
        ,(concat "* %?\n"
                 ":LOGBOOK:\n"
                 "- State \"\"        from \"\"        %U\n"
                 ":END:\n")
        :empty-lines 1)

       ("l" "Link" entry
        ;; Target
        (file+function "~/org/notes.org" tm/org-get-headings-notes)
        ;; Template
        ,(concat "* %(format-time-string org-journal-time-format) "
                 "%(org-web-tools--org-link-for-url) :link:\n\n"
                 ":LOGBOOK:\n"
                 "- State \"\"        from \"\"        %U\n"
                 ":END:\n\n"
                 "%?")
        :empty-lines 1)

       ;; `org-capture' browser extension templates
       ("p" "Link with quote for org-protocol" entry
        ;; Target
        (file+function "~/org/notes.org" tm/org-get-headings-notes)
        ;; Template
        ,(concat
          "* %^{Title}\n"
          ":LOGBOOK:\n"
          "- State \"\"        from \"\"        %U\n"
          ":END:\n\n"
          "Source: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n%?"
          "%(progn (setq tm/delete-frame-after-capture 2)")
        :empty-lines 1)

       ("L" "Link for org-protocol" entry
        ;; Target
        (file+function "~/org/notes.org" tm/org-get-headings-notes)
        ;; Template
        ,(concat
          "%(org-web-tools--url-as-readable-org \"%:link\")"
          "%?")
        :empty-lines 1))))
#+END_SRC

*** Org-web-tools
:PROPERTIES:
:HASH:     2cc90080db3d85c1e6490a89b6be2030
:MODIFIED: 2019-06-29 12:03:34
:END:

[[https://github.com/alphapapa/org-web-tools][org-web-tools]]

#+BEGIN_SRC emacs-lisp
  (use-package org-web-tools
    :straight t)
#+END_SRC

*** [[https://addons.mozilla.org/en-US/firefox/addon/org-capture/][=org-capture= Extension]]
:PROPERTIES:
:HASH:     fa9622fe701be083f443c39ebcba41f8
:MODIFIED: 2019-06-30 10:25:16
:END:
:LOGBOOK:
- State "TODO"    from ""        [2019-06-26 Wed 14:20]
:END:

[[https://github.com/sprig/org-capture-extension][On GitHub.]]

#+begin_quote
This is an extension for Google Chrome (tm) and Firefox (tm) which
adds a "Capture" button.
#+end_quote

** Blog Publishing
:PROPERTIES:
:HASH:     8b354a10182b63dd89078424ec136ce0
:MODIFIED: 2019-06-28 16:55:42
:END:
:LOGBOOK:
- State "TODO"       from              [2019-03-06 Wed 08:47]
:END:

I never use this (because I never blog). I should re-evaluate this
(and blog more) and decide if moving to Hugo would be better/easier.

*** =org2jekyll=
:PROPERTIES:
:HASH:     faa9575444c7e96f1b7d6fd2608933d4
:MODIFIED: 2019-03-08 15:50:43
:END:

Write blog posts in =org-mode= and publish them to a Jekyll site with =org2jekyll=.

Define the following variables:
- =org2jekyll-source-directory=: The directory where =*.org= blog posts are stored.
- =org2jekyll-jekyll-directory=: Path to a Jekyll site.
- =org2jekyll-posts-dir=: The directory where Jekyll posts are stored.

#+BEGIN_SRC emacs-lisp
(use-package org2jekyll
  :defer 3
  :config
  (setq org2jekyll-blog-author       "tminor"
        org2jekyll-source-directory  (expand-file-name "~/org/blog")
        org2jekyll-jekyll-directory  (expand-file-name "~/blog")
        org2jekyll-jekyll-drafts-dir ""
        org2jekyll-jekyll-posts-dir  "_posts/"
        org-publish-project-alist
            `(("default"
                :base-directory ,(org2jekyll-input-directory)
                :base-extension "org"
                ;; :publishing-directory "/ssh:user@host:~/html/notebook/"
                :publishing-directory ,(org2jekyll-output-directory)
                :publishing-function org-html-publish-to-html
                :headline-levels 4
                :section-numbers nil
                :with-toc nil
                :html-head "<link rel=\"stylesheet\" href=\"./css/style.css\" type=\"text/css\"/>"
                :html-preamble t
                :recursive t
                :make-index t
                :html-extension "html"
                :body-only t)

            ("post"
                :base-directory ,(org2jekyll-input-directory)
                :base-extension "org"
                :publishing-directory ,(org2jekyll-output-directory org2jekyll-jekyll-posts-dir)
                :publishing-function org-html-publish-to-html
                :headline-levels 4
                :section-numbers nil
                :with-toc nil
                :html-head "<link rel='stylesheet' href='https://blog.tminor.io/assets/core.css'>"
                :html-preamble t
                :recursive t
                :make-index t
                :html-extension "html"
                :body-only t)

            ("images"
                :base-directory ,(org2jekyll-input-directory "img")
                :base-extension "jpg\\|gif\\|png"
                :publishing-directory ,(org2jekyll-output-directory "img")
                :publishing-function org-publish-attachment
                :recursive t)

            ("js"
                :base-directory ,(org2jekyll-input-directory "js")
                :base-extension "js"
                :publishing-directory ,(org2jekyll-output-directory "js")
                :publishing-function org-publish-attachment
                :recursive t)

            ("css"
                :base-directory ,(org2jekyll-input-directory "css")
                :base-extension "css\\|el"
                :publishing-directory ,(org2jekyll-output-directory "css")
                :publishing-function org-publish-attachment
                :recursive t)

            ("web" :components ("images" "js" "css")))))
#+END_SRC

*** Creating a Blog Post
:PROPERTIES:
:HASH:     d628231bc1be949d8580001a964548b3
:MODIFIED: 2019-03-08 15:50:43
:END:

1. Invoke =org2jekyll-create-draft=, select your layout and follow the prompts in the mini buffer.
2. Write your post.
3. Publish it with =org2jekyll-publish=.

* Shell and Term Modes
:PROPERTIES:
:HASH:     7c791981d7972ac86100ae2ec527dbae
:MODIFIED: 2019-03-08 15:48:05
:END:

** Term-mode
:PROPERTIES:
:HASH:     00b998b9a2db835c11e0c2d26777e401
:MODIFIED: 2019-06-28 16:56:43
:END:
:LOGBOOK:
- State "TODO"       from              [2019-03-04 Mon 16:50]
:END:

Moving to using Emacs as a primary terminal emulator is probably
something I should work towards.

#+BEGIN_SRC emacs-lisp
  (use-package multi-term
    :config
    ;; I'm not quite sure what this does; it was in my init.el (it was
    ;; added by `custom.el')
    (setq ansi-color-faces-vector
          [default bold shadow italic underline bold bold-italic bold])
    (setq ansi-color-names-vector
          (vector "#ffffff"
                  "#f36c60"
                  "#8bc34a"
                  "#fff59d"
                  "#4dd0e1"
                  "#b39ddb"
                  "#81d4fa"
                  "#263238")))
#+END_SRC

** Eshell
:PROPERTIES:
:HASH:     8076a1dc2497b7682ed6f5caea168a65
:MODIFIED: 2019-06-28 16:56:43
:END:
:LOGBOOK:
- State "TODO"       from              [2019-03-04 Mon 16:51]
:END:

*** =egp= (=eshell-prompt-extras=)
:PROPERTIES:
:HASH:     f3736f30a89218c7c73318bbf611993a
:MODIFIED: 2019-06-23 17:24:41
:END:

=eshell= prompt theme from [[https://github.com/dieggsy/dotfiles/blob/master/emacs/.emacs.d/lisp/egp.el][here]].

#+BEGIN_SRC emacs-lisp
  (use-package egp
    :straight
    (dotfiles :host github :repo "dieggsy/dotfiles"
	 :files (("emacs/.emacs.d/lisp/egp.el" . "egp.el")))
    :commands egp-theme)
#+END_SRC

*** =eshell-mode=
:PROPERTIES:
:HASH:     17601a8877a5a595f02e0dac831d029a
:MODIFIED: 2019-06-23 19:49:19
:END:

Configure =eshell= to use [[https://github.com/manateelazycat/aweshell][aweshell]] and =egp=.

#+BEGIN_SRC emacs-lisp
  (use-package eshell
    :init
    (require 'egp)
    :custom
    (eshell-prompt-function #'egp-theme)
    :config
    (when (and (executable-find "fish")
               (require 'fish-completion nil t))
      (global-fish-completion-mode)))
#+END_SRC

*** [[https://github.com/dieggsy/esh-autosuggest][=esh-autosuggest=]]
:PROPERTIES:
:HASH:     fd84d3e3e16373c5455a11524589e3a1
:MODIFIED: 2019-06-23 18:59:53
:END:

#+begin_quote
Fish-like history autosuggestions in eshell
#+end_quote

#+BEGIN_SRC emacs-lisp
  (use-package esh-autosuggest
    :preface
    (defun tm/setup-eshell-ivy-completion ()
      (define-key eshell-mode-map [remap eshell-pcomplete] 'completion-at-point)
      ;; only if you want to use the minibuffer for completions instead of
      ;; the in-buffer interface
      (setq-local ivy-display-functions-alist
                  (remq (assoc 'ivy-completion-in-region ivy-display-functions-alist)
                        ivy-display-functions-alist)))
    :hook
    (eshell-mode . esh-autosuggest-mode)
    (eshell-mode . tm/setup-eshell-ivy-completion))
#+END_SRC

*** [[https://gitlab.com/ambrevar/emacs-fish-completion][=fish-completion=]]
:PROPERTIES:
:HASH:     299e4e28879f06d9c8da79c59b877654
:MODIFIED: 2019-06-23 18:56:24
:END:

#+begin_quote
This package extends the pcomplete completion framework with
completion from the fish shell.
#+end_quote

#+begin_src emacs-lisp
  (use-package fish-completion
    :straight (:host gitlab :repo "ambrevar/emacs-fish-completion"))
#+end_src

*** =exec-path-from-shell=
:PROPERTIES:
:HASH:     cbeab8cdddf69fea1a3767966becf2eb
:MODIFIED: 2019-06-20 16:41:23
:END:

Get environment variables from =$SHELL=.

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :straight t
    :config
    (setq tm/environment-variables '("REPODIR"
                                     "RUBYLIB"
                                     "RUBYBINDIR"
                                     "PUPPETDIR"))
    (dolist (env-var tm/environment-variables)
      (add-to-list 'exec-path-from-shell-variables env-var))
    ;; https://github.com/purcell/exec-path-from-shell/issues/87
    (setq exec-path-from-shell-arguments '("-l"))
    ;; https://github.com/syl20bnr/spacemacs/issues/4755
    (setq explicit-shell-file-name "/bin/bash")
    (setq shell-file-name "bash")
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+END_SRC

*** [[https://github.com/manateelazycat/aweshell][=aweshell=]]
:PROPERTIES:
:HASH:     52fd7ad41a98912c89c3839a2b484ce1
:MODIFIED: 2019-06-23 19:17:06
:END:

#+begin_quote
Various extensions to Eshell.
#+end_quote

#+begin_src emacs-lisp
  (use-package aweshell
    :after (eshell-up)
    :general
    (tm/leader-def
      :infix "E"
      :prefix-command 'tm/eshell-prefix-command
      :prefix-map 'tm/eshell-prefix-map
      "" '(:which-key "eshell prefix" :ignore t)
      "n" 'aweshell-new
      "l" 'aweshell-next
      "h" 'aweshell-prev
      "b" 'aweshell-switch-buffer
      "u" 'eshell-up)
    :straight (:type git :host github :repo "manateelazycat/aweshell"
               :files ("*aweshell.el"))
    :init
    (setq aweshell-valid-command-color "#3EDAD4"))
#+end_src

*** [[https://github.com/peterwvj/eshell-up][=eshell-up=]]
:PROPERTIES:
:HASH:     b81770dccb9cf044f03f1259287031e4
:MODIFIED: 2019-06-23 12:21:28
:END:

#+begin_quote
Emacs package for quickly navigating to a specific parent directory in
eshell without having to repeatedly typing =cd ..=.
#+end_quote

#+begin_src emacs-lisp
  (use-package eshell-up
    :straight (:type git :host github :repo "peterwvj/eshell-up"))
#+end_src

*** [[https://github.com/ryuslash/eshell-fringe-status][=eshell-fringe-status=]]
:PROPERTIES:
:HASH:     dcd151f7c7e45dd46ae615179deb9c1c
:MODIFIED: 2019-06-23 17:47:16
:END:

#+begin_quote
Show an indicator of the status of the last command run in Eshell.
#+end_quote

#+begin_src emacs-lisp
  (use-package eshell-fringe-status
    :hook
    (eshell-mode . eshell-fringe-status-mode))
#+end_src

*** Elisp
:PROPERTIES:
:HASH:     764d4de2cf3b4da403ab77e77561556a
:MODIFIED: 2019-06-23 11:58:21
:END:

A quick internet search said that Eshell doesn't have anything like
brace expansion built in. [[https://emacs.stackexchange.com/a/9521][This]] Stack Exchange post provides a
solution:

#+BEGIN_SRC emacs-lisp
(defun eshell-brace-expansion (str)
  (let* ((parts (split-string str "[{}]"))
         (prefix (car parts))
         (body   (nth 1 parts))
         (suffix (nth 2 parts)))
    (mapcar (lambda (x) (concat prefix x suffix))
            (split-string body ","))))
#+END_SRC

Used like this:

#+begin_example
ls "prefix-{A,B,C}.suffix"(|eshell-brace-expansion)
#+end_example

*** TODO defun for projectile cd
:LOGBOOK:
- State "TODO"    from ""        [2019-07-01 Mon 09:24]
:END:

** SSH/GPG keys
:PROPERTIES:
:HASH:     dbb0127da65e33d98ffe2017f496efa3
:MODIFIED: 2019-06-23 11:58:21
:END:

Install =keychain-environment= so Emacs can use [[https://github.com/funtoo/keychain][keychain]] to access SSH
and GPG keys.

#+BEGIN_SRC emacs-lisp
  (use-package keychain-environment
    :init
    (keychain-refresh-environment))
#+END_SRC

* Hydra
:PROPERTIES:
:HASH:     5e6e39921e99257f5dec24edd71c7ccd
:MODIFIED: 2019-03-08 15:48:05
:END:

** Hydra bootstrap
:PROPERTIES:
:HASH:     05cb03ac5afa0a2919e6faba418c1a86
:MODIFIED: 2019-03-11 06:42:11
:END:

Make sure hydra is installed.

#+BEGIN_SRC emacs-lisp
(use-package hydra)
#+END_SRC

** Window management
:PROPERTIES:
:HASH:     806bb5758f392a3ca70bf08383e72e57
:MODIFIED: 2019-03-08 15:50:43
:END:

*** hydra Window Functions
:PROPERTIES:
:HASH:     49cee86c3193fa0485a86f7b4987a21f
:MODIFIED: 2019-03-08 15:50:43
:END:

The following functions are used in =hydra-window=.

#+BEGIN_SRC emacs-lisp
(defun hydra-move-splitter-left (arg)
  "Move window splitter left."
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'right))
      (shrink-window-horizontally arg)
    (enlarge-window-horizontally arg)))

(defun hydra-move-splitter-right (arg)
  "Move window splitter right."
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'right))
      (enlarge-window-horizontally arg)
    (shrink-window-horizontally arg)))

(defun hydra-move-splitter-up (arg)
  "Move window splitter up."
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'up))
      (enlarge-window arg)
    (shrink-window arg)))

(defun hydra-move-splitter-down (arg)
  "Move window splitter down."
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'up))
      (shrink-window arg)
    (enlarge-window arg)))
#+END_SRC

*** hydra-window
:PROPERTIES:
:HASH:     95d76987d76100cbdfb620b1d0a0e5f8
:MODIFIED: 2019-03-08 15:50:43
:END:

From [[https://github.com/abo-abo/hydra/wiki/Window-Management][the wiki]].

#+BEGIN_SRC emacs-lisp
  (defhydra hydra-window (global-map "<f5>")
    "
  Movement^^        ^Split^         ^Switch^            ^Resize^
  ----------------------------------------------------------------
  _h_ ←            _v_ertical          _b_uffer         _q_ X←
  _j_ ↓            _x_ horizontal      _f_ind files     _w_ X↓
  _k_ ↑            _z_ undo            _a_ce 1          _e_ X↑
  _l_ →            _Z_ reset           _s_wap           _r_ X→
  _F_ollow         _D_lt Other         _S_ave        max_i_mize
  _SPC_ cancel     _o_nly this         _d_elete    zoom _I_n
                                             ^^^^^^zoom _O_ut
  "
    ("h" windmove-left)
    ("j" windmove-down)
    ("k" windmove-up)
    ("l" windmove-right)
    ("q" hydra-move-splitter-left)
    ("w" hydra-move-splitter-down)
    ("e" hydra-move-splitter-up)
    ("r" hydra-move-splitter-right)
    ("b" helm-mini)
    ("f" helm-find-files)
    ("F" follow-mode)
    ("a" (lambda ()
           (interactive)
           (ace-window 1)
           (add-hook 'ace-window-end-once-hook
                     'hydra-window/body)))
    ("v" (lambda ()
           (interactive)
           (split-window-right)
           (windmove-right)))
    ("x" (lambda ()
           (interactive)
           (split-window-below)
           (windmove-down)))
    ("s" (lambda ()
           (interactive)
           (ace-window 4)
           (add-hook 'ace-window-end-once-hook
                     'hydra-window/body)))
    ("S" save-buffer)
    ("d" delete-window)
    ("D" (lambda ()
           (interactive)
           (ace-window 16)
           (add-hook 'ace-window-end-once-hook
                     'hydra-window/body)))
    ("o" delete-other-windows)
    ("i" ace-maximize-window)
    ("z" (progn
           (winner-undo)
           (setq this-command 'winner-undo)))
    ("Z" winner-redo)
    ("I" text-scale-increase)
    ("O" text-scale-decrease)
    ("SPC" nil))
     ;("SPC" hydra-pop "exit" :color "blue"))

  (global-set-key (kbd "C-c M-v") 'hydra-window/body)
#+END_SRC

** Dired
:PROPERTIES:
:HASH:     231e61f79b39583572eaa6a12cc0e9e8
:MODIFIED: 2019-03-08 15:50:43
:END:

#+BEGIN_SRC emacs-lisp
(defhydra hydra-dired (:hint nil :color pink)
  "
_+_ mkdir          _v_iew           _m_ark             _(_ details        _i_nsert-subdir    wdired
_C_opy             _O_ view other   _U_nmark all       _)_ omit-mode      _$_ hide-subdir    C-x C-q : edit
_D_elete           _o_pen other     _u_nmark           _l_ redisplay      _w_ kill-subdir    C-c C-c : commit
_R_ename           _M_ chmod        _t_oggle           _g_ revert buf     _e_ ediff          C-c ESC : abort
_Y_ rel symlink    _G_ chgrp        _E_xtension mark   _s_ort             _=_ pdiff
_S_ymlink          ^ ^              _F_ind marked      _._ toggle hydra   \\ flyspell
_r_sync            ^ ^              ^ ^                ^ ^                _?_ summary
_z_ compress-file  _A_ find regexp
_Z_ compress       _Q_ repl regexp

T - tag prefix
"
  ("\\" dired-do-ispell)
  ("(" dired-hide-details-mode)
  (")" dired-omit-mode)
  ("+" dired-create-directory)
  ("=" diredp-ediff)         ;; smart diff
  ("?" dired-summary)
  ("$" diredp-hide-subdir-nomove)
  ("A" dired-do-find-regexp)
  ("C" dired-do-copy)        ;; Copy all marked files
  ("D" dired-do-delete)
  ("E" dired-mark-extension)
  ("e" dired-ediff-files)
  ("F" dired-do-find-marked-files)
  ("G" dired-do-chgrp)
  ("g" revert-buffer)        ;; read all directories again (refresh)
  ("i" dired-maybe-insert-subdir)
  ("l" dired-do-redisplay)   ;; relist the marked or singel directory
  ("M" dired-do-chmod)
  ("m" dired-mark)
  ("O" dired-display-file)
  ("o" dired-find-file-other-window)
  ("Q" dired-do-find-regexp-and-replace)
  ("R" dired-do-rename)
  ("r" dired-do-rsynch)
  ("S" dired-do-symlink)
  ("s" dired-sort-toggle-or-edit)
  ("t" dired-toggle-marks)
  ("U" dired-unmark-all-marks)
  ("u" dired-unmark)
  ("v" dired-view-file)      ;; q to exit, s to search, = gets line #
  ("w" dired-kill-subdir)
  ("Y" dired-do-relsymlink)
  ("z" diredp-compress-this-file)
  ("Z" dired-do-compress)
  ("q" nil)
  ;("." hydra-pop "exit" :color "blue"))
  ("." nil))

(define-key dired-mode-map "." 'hydra-dired/body)
#+END_SRC

** Projectile
:PROPERTIES:
:HASH:     3c18b5d7c686036dfdfe0563c5fc006c
:MODIFIED: 2019-05-10 01:35:12
:END:



For projectile fun:

#+BEGIN_SRC emacs-lisp
(defhydra hydra-projectile-other-window (:color teal)
  "projectile-other-window"
  ("f"  projectile-find-file-other-window        "file")
  ("g"  projectile-find-file-dwim-other-window   "file dwim")
  ("d"  projectile-find-dir-other-window         "dir")
  ("b"  projectile-switch-to-buffer-other-window "buffer")
  ("q"  hydra-pop                                "exit"))
  ;("q"  nil                                      "cancel" :color "blue"))

(defhydra hydra-projectile (:color teal
                            :hint nil)
  "
     PROJECTILE: %(projectile-project-root)

     Find File            Search/Tags          Buffers                Cache
------------------------------------------------------------------------------------------
  _F_: file            _R_: ripgrep           _i_: Ibuffer           _c_: cache clear
 _ff_: file dwim       _g_: update gtags      _b_: switch to buffer  _x_: remove known project
 _fd_: file curr dir   _o_: multi-occur       _K_: Kill all buffers  _X_: cleanup non-existing
  _r_: recent file            ^^              _s_: Switch project    _z_: cache current
  _d_: dir

"
  ("b"   projectile-switch-to-buffer)
  ("c"   projectile-invalidate-cache)
  ("d"   projectile-find-dir)
  ("F"   projectile-find-file)
  ("ff"  projectile-find-file-dwim)
  ("fd"  projectile-find-file-in-directory)
  ("g"   ggtags-update-tags)
  ("s-g" ggtags-update-tags)
  ("i"   projectile-ibuffer)
  ("K"   projectile-kill-buffers)
  ("s-k" projectile-kill-buffers)
  ("m"   projectile-multi-occur)
  ("o"   projectile-multi-occur)
  ("s-p" projectile-switch-project "switch project")
  ("p"   projectile-switch-project)
  ("s"   projectile-switch-project)
  ("R"   projectile-ripgrep)
  ("r"   projectile-recentf)
  ("x"   projectile-remove-known-project)
  ("X"   projectile-cleanup-known-projects)
  ("z"   projectile-cache-current-file)
  ("`"   hydra-projectile-other-window/body "other window")
  ;("q"   hydra-pop "exit" :color "blue"))
  ("q"   nil "cancel"))
#+END_SRC

*** Elisp
:PROPERTIES:
:HASH:     97c812eadd4dff50f76b1b6e1ff69809
:MODIFIED: 2019-05-10 01:35:12
:END:

Implement =projectile-find-file-at-point=:

#+BEGIN_SRC emacs-lisp
  (defun tm/projectile-find-file-at-point (&optional open-another-window)
    "Find file whose name is guessed around point.
  If OPEN-ANOTHER-WINDOW is not nil, the file will be opened in new window."
    (interactive "P")
    (let* ((filename (or (ffap-file-at-point)
                         (thing-at-point 'filename)
                         (thing-at-point 'symbol)
                         (read-string "No file name at point. Please provide file name:")))
           ;; filename could be a path
           (ffip-match-path-instead-of-filename t))
      (cond
       (filename
        ;; strip prefix "../../" or "././" from file name
        (setq filename (replace-regexp-in-string "^\\(\\.\\.*/\\)*" "" filename))
        (ffip-find-files filename open-another-window))
       (t
        (message "No file name is provided.")))))
#+END_SRC

** Magit
:PROPERTIES:
:HASH:     e1458d1eda5888068c5ba4dd22240087
:MODIFIED: 2019-03-08 15:50:43
:END:

#+BEGIN_SRC emacs-lisp
(defun matcha-magit-dir ()
  "Return `magit-toplevel' if `magit' is loaded, otherwise."
  (if (featurep 'magit)
      (magit-toplevel)
    "Not yet loaded."))

(defun matcha-magit-status-pick-repository ()
  "Calls `magit-status' with a prefix argument to allow picking the repository."
  (interactive)
  (let ((current-prefix-arg '(4))) ; C-u
    (call-interactively 'magit-status)))

(defun matcha-magit-status-or-switch-buffer ()
  "Switch to existing `magit-status' without updating or run `magit-status'.
If `magit' is not yet loaded yet, just call `magit-status' directly."
  (interactive)
  (if (not (featurep 'magit))
      (magit-status-internal default-directory)
    (if-let (magit-buffer
             (magit-mode-get-buffer
              #'magit-status-mode nil nil
              (magit-buffer-lock-value #'magit-status-mode nil)))
        (switch-to-buffer magit-buffer)
      (magit-status-internal default-directory))))

(defhydra hydra-magit-log (:color "blue" :hint nil)
  "
   Magit Log: %s(matcha-magit-dir)
    File                       Branch                  Reflog
  ------------------------------------------------------------------------------
    _f_ Current File         _p_ Pick Branch            _P_ Pick Branch
    _F_ Current File Popup   _c_ Current Branch         _C_ Current Branch
    _u_ Unmerged Commits     _h_ Head Branch            _H_ Head Branch
                           ^^_o_ Local + Head
                           ^^_a_ Local + Remote + Head
                           ^^_A_ Everything
"
  ("f" magit-log-buffer-file)
  ("F" magit-log-buffer-file-popup)
  ("u" magit-cherry)
  ("p" magit-log-other)
  ("c" magit-log-current)
  ("h" magit-log-head)
  ("o" magit-log-branches)
  ("a" magit-log-all-branches)
  ("A" magit-log-all)
  ("P" magit-reflog)
  ("C" magit-reflog-current)
  ("H" magit-reflog-head)
  ("q" nil))

(defhydra hydra-magit (:color "blue" :hint nil)
  "
   Magit: %s(matcha-magit-dir)
    Status                    Blame                 ?
  ------------------------------------------------------------------------------
    _s_ Status               _b_ Blame               _p_ File Popup
    _g_ Switch to Status     _j_ Blob Next           _d_ Dispatch
    _L_ List Repos           _k_ Blob Previous       _l_ Log
    _r_ Pick Repo
    Search                           Diff            Repository
  ------------------------------------------------------------------------------
    _f_ Find File                _ef_ Ediff Files        ^^_c_ Clone
    _F_ Find File Other Window   _eb_ Ediff Buffers
                               ^^_ed_ Ediff Directories
"
  ("p" magit-file-popup)
  ("d" magit-dispatch-popup)
  ("f" magit-find-file)
  ("F" magit-find-file-other-window)
  ("j" magit-blob-next)
  ("k" magit-blob-previous)
  ("b" magit-blame-addition)
  ("l" matcha-magit-log/body)
  ("L" magit-list-repositories)
  ("r" matcha-magit-status-pick-repository)
  ("g" matcha-magit-status-or-switch-buffer)
  ("s" magit-status)
  ("c" magit-clone)
  ("ef" ediff-files)
  ("eF" ediff-files3)
  ("eb" ediff-buffers)
  ("eB" ediff-buffers3)
  ("ed" ediff-directories)
  ("eD" ediff-directories3)
  ("q" nil))
#+END_SRC

** Notmuch
:PROPERTIES:
:HASH:     2ddb9d79bec19182987b02463a05f17a
:MODIFIED: 2019-03-08 15:50:43
:END:

#+BEGIN_SRC emacs-lisp
(defhydra hydra-notmuch-tree-mode (:color "blue")
  "Tree"
  ("?" (notmuch-tree-close-message-pane-and #'notmuch-help) "Help")
  ("q" notmuch-tree-quit "Quit")
  ("s" notmuch-tree-to-search "Search")
  ("m" (notmuch-tree-close-message-pane-and #'notmuch-mua-new-mail)
   "Compose")
  ("J" (notmuch-tree-close-message-pane-and #'notmuch-jump-search) "Jump")
  ("S" notmuch-search-from-tree-current-query "Search from Query")
  ("|" notmuch-show-pipe-message "Show Pipe Message")
  ("w" notmuch-show-save-attachments "Save Attachments")
  ("v" notmuch-show-view-all-mime-parts "View All Mime Parts")
  ("c" hydra-notmuch-show-stash-command/body "Show Stash Commands")
  ("b" notmuch-show-resend-message "Resend Message")
  ("$" (notmuch-tree-to-message-pane #'notmuch-show-toggle-process-crypto)
   "Process Crypto")
  ("f" (notmuch-tree-close-message-pane-and #'notmuch-show-forward-message)
   "Forward Message")
  ("r" (notmuch-tree-close-message-pane-and #'notmuch-show-reply-sender)
   "Reply To Sender")
  ("R" (notmuch-tree-close-message-pane-and #'notmuch-show-reply) "Reply")
  ("V" (notmuch-tree-close-message-pane-and #'notmuch-show-view-raw-message)
   "View Raw Message")
  ("RET" notmuch-tree-show-message "Show Message")
  ("x" notmuch-tree-quit "Quit")
  ("A" notmuch-tree-archive-thread "Archive Thread")
  ("a" notmuch-tree-archive-message-then-next "Archive Message Then Next")
  ("z" notmuch-tree-to-tree "Tree to Tree")
  ("n" notmuch-tree-next-matching-message "Next Matching Message")
  ("p" notmuch-tree-prev-matching-message "Previous Matching Message")
  ("N" notmuch-tree-next-message "Next Message")
  ("P" notmuch-tree-prev-message "Previous Message")
  ("C-p" notmuch-tree-prev-thread "Previous Thread")
  ("C-n" notmuch-tree-next-thread "Next Thread")
  ("k" notmuch-tag-jump "Tag Jump")
  ("-" notmuch-tree-remove-tag "Remove Tag")
  ("+" notmuch-tree-add-tag "Add Tag")
  ("*" notmuch-tree-tag-thread "Tag Thread")
  ("e" notmuch-tree-resume-message "Resume Message"))

(defhydra hydra-notmuch-search-mode (:color "blue")
  "Search"
  ("J" notmuch-jump-search "Jump Search")
  ("K" notmuch-tag-jump "Tag Jump")
  ("L" notmuch-search-filter "Search Filter")
  ("C" compose-mail-other-frame "Compose Mail Other Frame")
  ("O" notmuch-search-toggle-order "Toggle Order")
  ("R" notmuch-search-reply-to-thread "Reply to Thread")
  ("Z" notmuch-tree-from-search-current-query "Tree from current Query")
  ("a" notmuch-search-archive-thread "Archive Thread")
  ("c" compose-mail "Compose Mail")
  ("d" +notmuch-search-toggle-delete "Toggle Delete")
  ("m" hydra-notmuch-common/body "Common Commands")
  ("n" notmuch-search-next-thread "Next Thread")
  ("o" compose-mail-other-window "Compose Mail Other Window")
  ("p" notmuch-search-previous-thread "Previous Thread")
  ("q" notmuch-bury-or-kill-this-buffer "Bury or Kill Buffer")
  ("r" notmuch-search-reply-to-thread-sender "Reply to Thread Sender")
  ("t" notmuch-search-filter-by-tag "Filter by Tag")
  ("z" hydra-notmuch-search-stash/body "Search Stash Map")
  ("*" notmuch-search-tag-all "Tag All")
  ("-" notmuch-search-remove-tag "Remove Tag")
  ("+" notmuch-search-add-tag "Add Tag")
  ("<" notmuch-search-first-thread "First Thread")
  (">" notmuch-search-last-thread "Last Thread")
  ("RET" notmuch-search-show-thread "Show Thread"))

(defhydra hydra-notmuch-search-stash (:color "blue")
  "Stash"
  ("i" notmuch-search-stash-thread-id "Stash Thread Id")
  ("q" notmuch-stash-query "Stash Query")
  ("?" notmuch-subkeymap-help "Help"))

(defhydra hydra-notmuch-common (:color "blue")
  "Common Commands"
  ("?" notmuch-help "Help")
  ("q" notmuch-bury-or-kill-this-buffer "Bury or Kill Buffer")
  ("s" notmuch-search "Search")
  ("z" notmuch-tree "Tree")
  ("m" notmuch-mua-new-mail "Mua New Mail")
  ("gr" notmuch-refresh-this-buffer "Refresh this Buffer")
  ("gR" notmuch-refresh-all-buffers "Refresh all Buffers")
  ("Z" notmuch-poll-and-refresh-this-buffer "Poll and Refresh this Buffer")
  ("J" notmuch-jump-search "Jump Search"))

(defhydra hydra-notmuch-hello-mode (:color "blue")
  "Hello"
  ("m" hydra-notmuch-common/body "Common Commands"))

(defhydra hydra-notmuch-show-stash-commands (:color "blue")
  "Show Stash Commands"
  ("c" notmuch-show-stash-cc "CC")
  ("d" notmuch-show-stash-date "Date")
  ("F" notmuch-show-stash-filename "Filename")
  ("f" notmuch-show-stash-from "From")
  ("i" notmuch-show-stash-message-id "Message Id")
  ("I" notmuch-show-stash-message-id-stripped "Message Id Stripped")
  ("s" notmuch-show-stash-subject "Subject")
  ("T" notmuch-show-stash-tags "Tags")
  ("t" notmuch-show-stash-to "To")
  ("l" notmuch-show-stash-mlarchive-link "Archive Link")
  ("L" notmuch-show-stash-mlarchive-link-and-go "Archive Link and Go")
  ("G" notmuch-show-stash-git-send-email "Git Send Email")
  ("?" notmuch-subkeymap-help "Help"))

(defhydra hydra-notmuch-show-part (:color "blue")
  "Show Part"
  ("s" notmuch-show-save-part "Save Part")
  ("v" notmuch-show-view-part "View Part")
  ("o" notmuch-show-interactively-view-part "Show Interactively View Part")
  ("|" notmuch-show-pipe-part "Show Pipe Part")
  ("m" notmuch-show-choose-mime-of-part "Show Choose Mime of Part")
  ("?" notmuch-subkeymap-help "Help"))

(defhydra hydra-notmuch-show-mode (:color "blue" :hint nil)
  "
   Show: %(notmuch-show-get-subject)
    ^^Compose^^             ^^Tags^^         ^^Archive Then^^       ^^Misc^^
  ------------------------------------------------------------------------------
  _F_ Forward Open      ^_d_ Delete    ^^_A_ -> Message     ^_l_ Filter Thread
  _R_ Reply             ^_K_ Jump      ^^_a_ Msg Or Thread  ^_m_ Common
  _r_ Reply Sender      ^_-_ Remove    ^^_X_ -> Exit        ^_w_ Save Attachments
  _S_ Resend Message    ^_+_ Add       ^^_x_ Msg Or Exit    ^_._ Attachments
  _e_ Resume Draft      ^_*_ Tag All                      ^^^^^_|_ Pipe
  _f_ Forward Message

    ^^Navigate^^                ^^View^^                ^^Toggle^^
  ------------------------------------------------------------------------------
  _j_ Next Thread         ^^_N_ Next Message      ^^_h_ Headers
  _k_ Previous Thread     ^^_P_ Previous Message  ^^_t_ Truncate Lines
  _n_ Next Message        ^^_V_ Raw Message       ^^_!_ Elide Non Matching
  _p_ Previous Message    ^^_#_ Print Message     ^^_$_ Process Crypto
  _y_ Rewind              ^^_Z_ Tree              ^^_<_ Thread Indentation
  _z_ Advance             ^^_c_ Stash             ^^_T_ All Messages
                                                ^^^^^^^^_RET_ Message
"
  ("l" notmuch-show-filter-thread)
  ("m" hydra-notmuch-common/body)
  ("w" notmuch-show-save-attachments)
  ("." hydra-notmuch-show-part/body)
  ("|" notmuch-show-pipe-message)
  ("F" notmuch-show-forward-open-messages)
  ("R" notmuch-show-reply)
  ("r" notmuch-show-reply-sender)
  ("S" notmuch-show-resend-message)
  ("e" notmuch-show-resume-message)
  ("f" notmuch-show-forward-message)
  ("h" notmuch-show-toggle-visibility-headers)
  ("t" toggle-truncate-lines)
  ("!" notmuch-show-toggle-elide-non-matching)
  ("$" notmuch-show-toggle-process-crypto)
  ("<" notmuch-show-toggle-thread-indentation)
  ("T" notmuch-show-open-or-close-all)
  ("RET" notmuch-show-toggle-message)
  ("d" +notmuch-show-toggle-delete)
  ("K" notmuch-tag-jump)
  ("-" notmuch-show-remove-tag)
  ("+" notmuch-show-add-tag)
  ("*" notmuch-show-tag-all)
  ("A" notmuch-show-archive-thread-then-next)
  ("X" notmuch-show-archive-thread-then-exit)
  ("a" notmuch-show-archive-message-then-next-or-next-thread)
  ("x" notmuch-show-archive-message-then-next-or-exit)
  ("j" notmuch-show-next-thread-show :color red)
  ("k" notmuch-show-previous-thread-show :color red)
  ("n" notmuch-show-next-open-message :color red)
  ("p" notmuch-show-previous-open-message :color red)
  ("y" notmuch-show-rewind)
  ("z" notmuch-show-advance-and-archive)
  ("N" notmuch-show-next-message :color red)
  ("P" notmuch-show-previous-message :color red)
  ("V" notmuch-show-view-raw-message)
  ("#" notmuch-show-print-message)
  ("Z" notmuch-tree-from-show-current-query)
  ("c" hydra-notmuch-show-stash-command/body))

(defun hydra-notmuch-set-launcher ()
  "Set `hydra' launcher for `notmuch'."
  (matcha-set-mode-command
   :mode 'notmuch-hello-mode :command #'hydra-notmuch-hello-mode/body)
  (matcha-set-mode-command
   :mode 'notmuch-show-mode :command #'hydra-notmuch-show-mode/body)
  (matcha-set-mode-command
   :mode 'notmuch-tree-mode :command #'hydra-notmuch-tree-mode/body)
  (matcha-set-mode-command
   :mode 'notmuch-search-mode :command #'hydra-notmuch-search-mode/body))
#+END_SRC

** Org agenda
:PROPERTIES:
:HASH:     c5228c33b74abe44f07d4bc13271c018
:MODIFIED: 2019-03-08 15:50:43
:END:

#+BEGIN_SRC emacs-lisp
(defhydra hydra-org-agenda (:pre (setq which-key-inhibit t)
                                 :post (setq which-key-inhibit nil)
                                 :hint none)
  "
Org agenda (_q_uit)

^Clock^      ^Visit entry^              ^Date^             ^Other^
^-----^----  ^-----------^------------  ^----^-----------  ^-----^---------
_ci_ in      _SPC_ in other window      _ds_ schedule      _gr_ reload
_co_ out     _TAB_ & go to location     _dd_ set deadline  _._  go to today
_cq_ cancel  _RET_ & del other windows  _dt_ timestamp     _gd_ go to date
_cj_ jump    _o_   link                 _+_  do later      ^^
^^           ^^                         _-_  do earlier    ^^
^^           ^^                         ^^                 ^^
^View^          ^Filter^                 ^Headline^         ^Toggle mode^
^----^--------  ^------^---------------  ^--------^-------  ^-----------^----
_vd_ day        _ft_ by tag              _ht_ set status    _tf_ follow
_vw_ week       _fr_ refine by tag       _hk_ kill          _tl_ log
_vt_ fortnight  _fc_ by category         _hr_ refile        _ta_ archive trees
_vm_ month      _fh_ by top headline     _hA_ archive       _tA_ archive files
_vy_ year       _fx_ by regexp           _h:_ set tags      _tr_ clock report
_vn_ next span  _fd_ delete all filters  _hp_ set priority  _td_ diaries
_vp_ prev span  ^^                       ^^                 ^^
_vr_ reset      ^^                       ^^                 ^^
^^              ^^                       ^^                 ^^
"
  ;; Entry
  ("hA" org-agenda-archive-default)
  ("hk" org-agenda-kill)
  ("hp" org-agenda-priority)
  ("hr" org-agenda-refile)
  ("h:" org-agenda-set-tags)
  ("ht" org-agenda-todo)
  ;; Visit entry
  ("o"   link-hint-open-link :exit t)
  ("<tab>" org-agenda-goto :exit t)
  ("TAB" org-agenda-goto :exit t)
  ("SPC" org-agenda-show-and-scroll-up)
  ("RET" org-agenda-switch-to :exit t)
  ;; Date
  ("dt" org-agenda-date-prompt)
  ("dd" org-agenda-deadline)
  ("+" org-agenda-do-date-later)
  ("-" org-agenda-do-date-earlier)
  ("ds" org-agenda-schedule)
  ;; View
  ("vd" org-agenda-day-view)
  ("vw" org-agenda-week-view)
  ("vt" org-agenda-fortnight-view)
  ("vm" org-agenda-month-view)
  ("vy" org-agenda-year-view)
  ("vn" org-agenda-later)
  ("vp" org-agenda-earlier)
  ("vr" org-agenda-reset-view)
  ;; Toggle mode
  ("ta" org-agenda-archives-mode)
  ("tA" (org-agenda-archives-mode 'files))
  ("tr" org-agenda-clockreport-mode)
  ("tf" org-agenda-follow-mode)
  ("tl" org-agenda-log-mode)
  ("td" org-agenda-toggle-diary)
  ;; Filter
  ("fc" org-agenda-filter-by-category)
  ("fx" org-agenda-filter-by-regexp)
  ("ft" org-agenda-filter-by-tag)
  ("fr" org-agenda-filter-by-tag-refine)
  ("fh" org-agenda-filter-by-top-headline)
  ("fd" org-agenda-filter-remove-all)
  ;; Clock
  ("cq" org-agenda-clock-cancel)
  ("cj" org-agenda-clock-goto :exit t)
  ("ci" org-agenda-clock-in :exit t)
  ("co" org-agenda-clock-out)
  ;; Other
  ("q" nil :exit t)
  ("gd" org-agenda-goto-date)
  ("." org-agenda-goto-today)
  ("gr" org-agenda-redo))
#+END_SRC

*** TODO notmuch calendar/org-agenda things worth looking at
:PROPERTIES:
:HASH:     863e467aa0bfee03c0d790199b04ffd4
:MODIFIED: 2019-06-28 16:57:35
:Effort:   00:10
:END:
:LOGBOOK:
- State "TODO"       from "STUFF"      [2019-02-18 Mon 10:42]
:END:

https://github.com/larkery/emacs/blob/d89d5194f04caa2fc00454a7e6b94bcfd359fb64/site-lisp/notmuch-agenda.el

[2019-02-14 Thu 09:38]

** Multiple-cursors
:PROPERTIES:
:HASH:     4a5645a305de8acec62e69c94c7b1da0
:MODIFIED: 2019-03-08 15:50:43
:END:

#+BEGIN_SRC emacs-lisp
(defhydra hydra-multiple-cursors (:hint nil)
  "
 Up^^             Down^^           Miscellaneous           % 2(mc/num-cursors) cursor%s(if (> (mc/num-cursors) 1) \"s\" \"\")
------------------------------------------------------------------
 [_p_]   Next     [_n_]   Next     [_l_] Edit lines  [_0_] Insert numbers
 [_P_]   Skip     [_N_]   Skip     [_a_] Mark all    [_A_] Insert letters
 [_M-p_] Unmark   [_M-n_] Unmark   [_s_] Search
 [Click] Cursor at point       [_q_] Quit"
  ("l" mc/edit-lines :exit t)
  ("a" mc/mark-all-like-this :exit t)
  ("n" mc/mark-next-like-this)
  ("N" mc/skip-to-next-like-this)
  ("M-n" mc/unmark-next-like-this)
  ("p" mc/mark-previous-like-this)
  ("P" mc/skip-to-previous-like-this)
  ("M-p" mc/unmark-previous-like-this)
  ("s" mc/mark-all-in-region-regexp :exit t)
  ("0" mc/insert-numbers :exit t)
  ("A" mc/insert-letters :exit t)
  ("<mouse-1>" mc/add-cursor-on-click)
  ;; Help with click recognition in this hydra
  ("<down-mouse-1>" ignore)
  ("<drag-mouse-1>" ignore)
  ("q" nil))
#+END_SRC

** Straight.el
:PROPERTIES:
:HASH:     a729bc93162f640534c88d342f37a8b7
:MODIFIED: 2019-03-11 06:42:11
:END:

Straight [[https://github.com/abo-abo/hydra/wiki/straight.el][hydra helper menu]]:

#+BEGIN_SRC emacs-lisp
  (defhydra hydra-straight-helper (:hint nil)
    "
  _c_heck all       |_f_etch all     |_m_erge all      |_n_ormalize all   |p_u_sh all
  _C_heck package   |_F_etch package |_M_erge package  |_N_ormlize package|p_U_sh package
  ----------------^^+--------------^^+---------------^^+----------------^^+------------||_q_uit||
  _r_ebuild all     |_p_ull all      |_v_ersions freeze|_w_atcher start   |_g_et recipe
  _R_ebuild package |_P_ull package  |_V_ersions thaw  |_W_atcher quit    |prun_e_ build"
    ("c" straight-check-all)
    ("C" straight-check-package)
    ("r" straight-rebuild-all)
    ("R" straight-rebuild-package)
    ("f" straight-fetch-all)
    ("F" straight-fetch-package)
    ("p" straight-pull-all)
    ("P" straight-pull-package)
    ("m" straight-merge-all)
    ("M" straight-merge-package)
    ("n" straight-normalize-all)
    ("N" straight-normalize-package)
    ("u" straight-push-all)
    ("U" straight-push-package)
    ("v" straight-freeze-versions)
    ("V" straight-thaw-versions)
    ("w" straight-watcher-start)
    ("W" straight-watcher-quit)
    ("g" straight-get-recipe)
    ("e" straight-prune-build)
    ("q" nil))
#+END_SRC

** Gnus
:PROPERTIES:
:HASH:     fbc1f968b812e0ec5b843ed4b4feeb96
:MODIFIED: 2019-06-21 14:44:27
:END:

#+begin_src emacs-lisp
  ;; @see https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/gnus-guide-en.org
  ;; gnus-group-mode
  (eval-after-load 'gnus-group
    '(progn
       (defhydra hydra-gnus-group (:color blue)
         "
  [_A_] Remote groups (A A) [_g_] Refresh
  [_L_] Local groups        [_\\^_] List servers
  [_c_] Mark all read       [_m_] Compose new mail
  [_G_] Search mails (G G) [_#_] Mark mail
  "
         ("A" gnus-group-list-active)
         ("L" gnus-group-list-all-groups)
         ("c" gnus-topic-catchup-articles)
         ("G" dianyou-group-make-nnir-group)
         ("g" gnus-group-get-new-news)
         ("^" gnus-group-enter-server-mode)
         ("m" gnus-group-new-mail)
         ("#" gnus-topic-mark-topic)
         ("q" nil))
       ;; y is not used by default
       (define-key gnus-group-mode-map "y" 'hydra-gnus-group/body)))

  ;; gnus-summary-mode
  (eval-after-load 'gnus-sum
    '(progn
       (defhydra hydra-gnus-summary (:color blue)
         "
  [_s_] Show thread   [_F_] Forward (C-c C-f)
  [_h_] Hide thread   [_e_] Resend (S D e)
  [_n_] Refresh (/ N) [_r_] Reply
  [_!_] Mail -> disk  [_R_] Reply with original
  [_d_] Disk -> mail  [_w_] Reply all (S w)
  [_c_] Read all      [_W_] Reply all with original (S W)
  [_#_] Mark          [_G_] Search mails
  "
         ("s" gnus-summary-show-thread)
         ("h" gnus-summary-hide-thread)
         ("n" gnus-summary-insert-new-articles)
         ("F" gnus-summary-mail-forward)
         ("!" gnus-summary-tick-article-forward)
         ("d" gnus-summary-put-mark-as-read-next)
         ("c" gnus-summary-catchup-and-exit)
         ("e" gnus-summary-resend-message-edit)
         ("R" gnus-summary-reply-with-original)
         ("r" gnus-summary-reply)
         ("W" gnus-summary-wide-reply-with-original)
         ("w" gnus-summary-wide-reply)
         ("#" gnus-topic-mark-topic)
         ("G" dianyou-group-make-nnir-group)
         ("q" nil))
       ;; y is not used by default
       (define-key gnus-summary-mode-map "y" 'hydra-gnus-summary/body)))

  ;; gnus-article-mode
  (eval-after-load 'gnus-art
    '(progn
       (defhydra hydra-gnus-article (:color blue)
         "
  [_o_] Save attachment        [_F_] Forward
  [_v_] Play video/audio       [_r_] Reply
  [_d_] CLI to dowloand stream [_R_] Reply with original
  [_b_] Open external browser  [_w_] Reply all (S w)
  [_f_] Click link/button      [_W_] Reply all with original (S W)
  [_g_] Focus link/button
  "
         ("F" gnus-summary-mail-forward)
         ("r" gnus-article-reply)
         ("R" gnus-article-reply-with-original)
         ("w" gnus-article-wide-reply)
         ("W" gnus-article-wide-reply-with-original)
         ("o" gnus-mime-save-part)
         ("v" w3mext-open-with-mplayer)
         ("d" w3mext-download-rss-stream)
         ("b" w3mext-open-link-or-image-or-url)
         ("f" w3m-lnum-follow)
         ("g" w3m-lnum-goto)
         ("q" nil))
       ;; y is not used by default
       (define-key gnus-article-mode-map "y" 'hydra-gnus-article/body)))
#+end_src

** Menu for all hydras
:PROPERTIES:
:HASH:     f217b2d1d543d12672e815fc0e0c1b23
:MODIFIED: 2019-06-21 14:44:27
:END:

Remembering keys is hard, so here's a hydra that should add a menu for
other hydras:

#+BEGIN_SRC emacs-lisp
  (defvar hydra-stack nil)

  (defun hydra-push (expr)
    (push `(lambda () ,expr) hydra-stack))

  (defun hydra-pop ()
    (interactive)
    (let ((x (pop hydra-stack)))
      (when x
        (funcall x))))

  (defhydra hydra-hydras-menu (:color teal)
    "
       Hydras List
  ---------------------
  _d_:  hydra-dired
  _c_:  hydra-multiple-cursors
  _pp_: hydra-projectile
  _pw_: hydra-projectile-other-window
  _w_:  hydra-window
  _ml_: hydra-magit-log
  _mm_: hydra-magit
  _n_:  hydra-notmuch-show-mode
  _o_:  hydra-org-agenda

  "
    ("d" (progn
           (hydra-dired/body)
           (hydra-push '(hydra-dired/body)))
         "visit hydra-dired")
    ("c" (progn
           (hydra-multiple-cursors/body)
           (hydra-push '(hydra-multiple-cursors/body)))
         "visit hydra-multiple-cursors")
    ("ml" (progn
           (hydra-magit-log/body)
           (hydra-push '(hydra-magit-log/body)))
         "visit hydra-magit-log")
    ("mm" (progn
           (hydra-magit/body)
           (hydra-push '(hydra-magit/body)))
         "visit hydra-magit")
    ("n" (progn
           (hydra-notmuch-show-mode/body)
           (hydra-push '(hydra-notmuch-show-mode/body)))
         "visit hydra-notmuch-show-mode")
    ("o" (progn
           (hydra-org-agenda/body)
           (hydra-push '(hydra-org-agenda/body)))
         "visit hydra-org-agenda")
    ("pp" (progn
           (hydra-projectile/body)
           (hydra-push '(hydra-projectile/body)))
         "visit hydra-projectile")
    ("pw" (progn
           (hydra-projectile-other-window/body)
           (hydra-push '(hydra-projectile-other-window/body)))
         "visit hydra-projectile-other-window")
    ("w" (progn
           (hydra-window/body)
           (hydra-push '(hydra-window/body)))
         "visit hydra-window")
    ("q" hydra-pop "exit" :exit t))

  (global-set-key (kbd "C-c h") 'hydra-hydras-menu/body)
#+END_SRC

* Other
:PROPERTIES:
:HASH:     4bad01946f576f1858db6dc458a7ff7a
:MODIFIED: 2019-03-08 15:48:05
:END:

** Kill whitespace when saving
:PROPERTIES:
:HASH:     631782a0d5b9beb39260ddc329b3188f
:MODIFIED: 2019-06-27 21:52:53
:END:

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** Rainbow Mode
:PROPERTIES:
:HASH:     cc38369f16226c187e8b23e7ddd6c76f
:MODIFIED: 2019-06-27 21:52:53
:END:

Rainbow mode changes the background of any color name. This includes
hexidecimal representation of colors.

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode)
#+END_SRC

** TODO Spell check                                                  :easy:
:PROPERTIES:
:HASH:     60797ef1b8dc4f07509f8356fe0a627c
:MODIFIED: 2019-06-28 16:58:34
:END:
:LOGBOOK:
- State "TODO"       from              [2019-06-27 Thu 21:52]
:END:

Move this section and update =hook= section.

Spell checking with flyspell:

#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :config
    (add-hook 'text-mode-hook 'flyspell-mode))
#+END_SRC

** File type modes (not =prog-mode= files)
:PROPERTIES:
:HASH:     0da15673b84dbf69ae2cf8d8caf3d66f
:MODIFIED: 2019-06-27 21:52:53
:END:

File types like csv, yaml, etc.

#+BEGIN_SRC emacs-lisp
  (use-package csv-mode)
#+END_SRC
